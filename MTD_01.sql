USE [master]
GO
/****** Object:  Database [MTD_01]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE DATABASE [MTD_01]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'MTD_01_Data', FILENAME = N'F:\DATA\MTD_01.mdf' , SIZE = 9386GB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ),
( NAME = N'PreJan25', FILENAME = N'J:\DATA\PreJan25.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [Apr25] 
( NAME = N'Apr25', FILENAME = N'J:\DATA\Apr25.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Apr26] 
( NAME = N'Apr26', FILENAME = N'J:\DATA\Apr26.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Aug25] 
( NAME = N'Aug25', FILENAME = N'J:\DATA\Aug25.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Aug26] 
( NAME = N'Aug26', FILENAME = N'J:\DATA\Aug26.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Dec25] 
( NAME = N'Dec25', FILENAME = N'J:\DATA\Dec25.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Dec26] 
( NAME = N'Dec26', FILENAME = N'J:\DATA\Dec26.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Feb25] 
( NAME = N'Feb25', FILENAME = N'J:\DATA\Feb25.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Feb26] 
( NAME = N'Feb26', FILENAME = N'J:\DATA\Feb26.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Jan25] 
( NAME = N'Jan25', FILENAME = N'J:\DATA\Jan25.ndf' , SIZE = 79691776KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Jan26] 
( NAME = N'Jan26', FILENAME = N'J:\DATA\Jan26.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Jul25] 
( NAME = N'Jul25', FILENAME = N'J:\DATA\Jul25.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Jul26] 
( NAME = N'Jul26', FILENAME = N'J:\DATA\Jul26.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Jun25] 
( NAME = N'Jun25', FILENAME = N'J:\DATA\Jun25.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Jun26] 
( NAME = N'Jun26', FILENAME = N'J:\DATA\Jun26.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Mar25] 
( NAME = N'Mar25', FILENAME = N'J:\DATA\Mar25.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Mar26] 
( NAME = N'Mar26', FILENAME = N'J:\DATA\Mar26.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [May25] 
( NAME = N'May25', FILENAME = N'J:\DATA\May25.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [May26] 
( NAME = N'May26', FILENAME = N'J:\DATA\May26.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Nov25] 
( NAME = N'Nov25', FILENAME = N'J:\DATA\Nov25.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Nov26] 
( NAME = N'Nov26', FILENAME = N'J:\DATA\Nov26.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Oct25] 
( NAME = N'Oct25', FILENAME = N'J:\DATA\Oct25.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Oct26] 
( NAME = N'Oct26', FILENAME = N'J:\DATA\Oct26.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Sep25] 
( NAME = N'Sep25', FILENAME = N'J:\DATA\Sep25.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [Sep26] 
( NAME = N'Sep26', FILENAME = N'J:\DATA\Sep26.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [SixMon_01] 
( NAME = N'SixMon_01', FILENAME = N'F:\DATA\SixMon_01.ndf' , SIZE = 51200KB , MAXSIZE = UNLIMITED, FILEGROWTH = 10240KB ), 
 FILEGROUP [SixMon_01O] 
( NAME = N'SixMon_01O', FILENAME = N'J:\DATA\SixMon_01O.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 262144KB ), 
 FILEGROUP [SixMon_02] 
( NAME = N'SixMon_02', FILENAME = N'J:\DATA\SixMon_02.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [SixMon_03] 
( NAME = N'SixMon_03', FILENAME = N'J:\DATA\SixMon_03.ndf' , SIZE = 325990016KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [SixMon_04] 
( NAME = N'SixMon_04', FILENAME = N'J:\DATA\SixMon_04.ndf' , SIZE = 3021GB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [SixMon_05] 
( NAME = N'SixMon_05', FILENAME = N'F:\DATA\SixMon_05.ndf' , SIZE = 1437696000KB , MAXSIZE = UNLIMITED, FILEGROWTH = 2097152KB ), 
 FILEGROUP [SixMon_06] 
( NAME = N'SixMon_06', FILENAME = N'J:\DATA\SixMon_06.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 262144KB ), 
 FILEGROUP [SixMon_07] 
( NAME = N'SixMon_07', FILENAME = N'J:\DATA\SixMon_07.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 262144KB ), 
 FILEGROUP [SixMon_08] 
( NAME = N'SixMon_08', FILENAME = N'J:\DATA\SixMon_08.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 262144KB ), 
 FILEGROUP [SixMon_09] 
( NAME = N'SixMon_09', FILENAME = N'J:\DATA\SixMon_09.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 262144KB ), 
 FILEGROUP [SixMon_10] 
( NAME = N'SixMon_10', FILENAME = N'J:\DATA\SixMon_10.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 262144KB ), 
 FILEGROUP [SixMon_11] 
( NAME = N'SixMon_11', FILENAME = N'J:\DATA\SixMon_11.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 262144KB ), 
 FILEGROUP [SixMon_12] 
( NAME = N'SixMon_12', FILENAME = N'J:\DATA\SixMon_12.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 262144KB ), 
 FILEGROUP [SixMon_13] 
( NAME = N'SixMon_13', FILENAME = N'J:\DATA\SixMon_13.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 262144KB ), 
 FILEGROUP [SixMon_14] 
( NAME = N'SixMon_14', FILENAME = N'J:\DATA\SixMon_14.ndf' , SIZE = 10485760KB , MAXSIZE = UNLIMITED, FILEGROWTH = 262144KB ), 
 FILEGROUP [SixMon_15] 
( NAME = N'SixMon_15', FILENAME = N'F:\DATA\SixMon_15.ndf' , SIZE = 14376960KB , MAXSIZE = UNLIMITED, FILEGROWTH = 262144KB )
 LOG ON 
( NAME = N'MTD_01_Log', FILENAME = N'H:\logs\MTD_01.ldf' , SIZE = 122824704KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1048576KB )
GO
ALTER DATABASE [MTD_01] ADD FILEGROUP [LOB_DATA]
GO
ALTER DATABASE [MTD_01] ADD FILEGROUP [PreJan25]
GO
ALTER DATABASE [MTD_01] SET COMPATIBILITY_LEVEL = 130
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [MTD_01].[dbo].[sp_fulltext_database] @action = 'disable'
end
GO
ALTER DATABASE [MTD_01] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [MTD_01] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [MTD_01] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [MTD_01] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [MTD_01] SET ARITHABORT OFF 
GO
ALTER DATABASE [MTD_01] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [MTD_01] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [MTD_01] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [MTD_01] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [MTD_01] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [MTD_01] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [MTD_01] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [MTD_01] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [MTD_01] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [MTD_01] SET  DISABLE_BROKER 
GO
ALTER DATABASE [MTD_01] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [MTD_01] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [MTD_01] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [MTD_01] SET ALLOW_SNAPSHOT_ISOLATION ON 
GO
ALTER DATABASE [MTD_01] SET PARAMETERIZATION FORCED 
GO
ALTER DATABASE [MTD_01] SET READ_COMMITTED_SNAPSHOT ON 
GO
ALTER DATABASE [MTD_01] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [MTD_01] SET RECOVERY FULL 
GO
ALTER DATABASE [MTD_01] SET  MULTI_USER 
GO
ALTER DATABASE [MTD_01] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [MTD_01] SET DB_CHAINING OFF 
GO
ALTER DATABASE [MTD_01] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [MTD_01] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [MTD_01] SET DELAYED_DURABILITY = DISABLED 
GO
EXEC sys.sp_db_vardecimal_storage_format N'MTD_01', N'ON'
GO
ALTER DATABASE [MTD_01] SET ENCRYPTION ON
GO
ALTER DATABASE [MTD_01] SET QUERY_STORE = ON
GO
ALTER DATABASE [MTD_01] SET QUERY_STORE (OPERATION_MODE = READ_WRITE, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 2), DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_STORAGE_SIZE_MB = 1024, QUERY_CAPTURE_MODE = AUTO, SIZE_BASED_CLEANUP_MODE = AUTO, MAX_PLANS_PER_QUERY = 1000)
GO
USE [MTD_01]
GO
ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
GO
ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
GO
USE [MTD_01]
GO
/****** Object:  User [zwelch]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [zwelch] FOR LOGIN [zwelch] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [whalerlink]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [whalerlink] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [WhalerETL]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [WhalerETL] FOR LOGIN [WhalerETL] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [WebReports]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [WebReports] FOR LOGIN [WebReports] WITH DEFAULT_SCHEMA=[WebReports]
GO
/****** Object:  User [VCommUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [VCommUser] FOR LOGIN [VCommUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [VCommAnalyzerUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [VCommAnalyzerUser] FOR LOGIN [VCommAnalyzerUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [UserMgrUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [UserMgrUser] FOR LOGIN [UserMgrUser] WITH DEFAULT_SCHEMA=[UserMgrUser]
GO
/****** Object:  User [tdunaj]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [tdunaj] FOR LOGIN [tdunaj] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [SMSMessageServiceUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [SMSMessageServiceUser] FOR LOGIN [SMSMessageServiceUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [SMSFailSafe]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [SMSFailSafe] FOR LOGIN [SMSFailSafe] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [skuznetsov]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [skuznetsov] FOR LOGIN [skuznetsov] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [SendCodeuser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [SendCodeuser] FOR LOGIN [SendCodeuser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [SdcMgrViewer]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [SdcMgrViewer] FOR LOGIN [SdcMgrViewer] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [SdcMgrUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [SdcMgrUser] FOR LOGIN [SdcMgrUser] WITH DEFAULT_SCHEMA=[SdcMgrUser]
GO
/****** Object:  User [sdcApiUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [sdcApiUser] FOR LOGIN [sdcApiUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [sCupstid_dba]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [sCupstid_dba] FOR LOGIN [sCupstid_dba] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [SCupstid]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [SCupstid] FOR LOGIN [scupstid] WITH DEFAULT_SCHEMA=[Developer_Schema]
GO
/****** Object:  User [ScramUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [ScramUser] FOR LOGIN [ScramUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [RTCStats]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [RTCStats] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [ReportClientUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [ReportClientUser] FOR LOGIN [ReportClientUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [RBuffington]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [RBuffington] FOR LOGIN [RBuffington] WITH DEFAULT_SCHEMA=[developer_Schema]
GO
/****** Object:  User [QAAutomationUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [QAAutomationUser] FOR LOGIN [QAAutomationUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [PTMUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [PTMUser] FOR LOGIN [PTMUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [psablan]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [psablan] FOR LOGIN [psablan] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [ProdStats]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [ProdStats] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [PHickman]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [PHickman] FOR LOGIN [PHickman] WITH DEFAULT_SCHEMA=[developer_Schema]
GO
/****** Object:  User [PCEUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [PCEUser] FOR LOGIN [PCEUser] WITH DEFAULT_SCHEMA=[PCEUser]
GO
/****** Object:  User [PageAckUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [PageAckUser] FOR LOGIN [PageAckUser] WITH DEFAULT_SCHEMA=[PageAckUser]
GO
/****** Object:  User [PackageOperator]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [PackageOperator] FOR LOGIN [PackageOperator] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [osomuyiwa]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [osomuyiwa] FOR LOGIN [osomuyiwa] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [nkent]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [nkent] FOR LOGIN [nkent] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [NagiosUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [NagiosUser] FOR LOGIN [NagiosUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [MTDDebug]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [MTDDebug] FOR LOGIN [MTDDebug] WITH DEFAULT_SCHEMA=[MTDDebug]
GO
/****** Object:  User [mnguyen]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [mnguyen] FOR LOGIN [mnguyen] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [mgendrau]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [mgendrau] FOR LOGIN [mgendrau] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [LowTouchUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [LowTouchUser] FOR LOGIN [LowTouchUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [Linkmeup]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [Linkmeup] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [kpullamsetti]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [kpullamsetti] FOR LOGIN [kpullamsetti] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [kkulikova]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [kkulikova] FOR LOGIN [kkulikova] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [jmerritt]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [jmerritt] FOR LOGIN [jmerritt] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [InvMgmtUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [InvMgmtUser] FOR LOGIN [InvMgmtUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [HwAdminUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [HwAdminUser] FOR LOGIN [HwAdminUser] WITH DEFAULT_SCHEMA=[HwAdminUser]
GO
/****** Object:  User [HardwareAdminUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [HardwareAdminUser] FOR LOGIN [HardwareAdminUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [GUkarande]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [GUkarande] FOR LOGIN [GUkarande] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [FVMUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [FVMUser] FOR LOGIN [FVMUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [FirebaseSvcUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [FirebaseSvcUser] FOR LOGIN [FirebaseSvcUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [FftUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [FftUser] FOR LOGIN [FftUser] WITH DEFAULT_SCHEMA=[FftUser]
GO
/****** Object:  User [FastCheckUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [FastCheckUser] FOR LOGIN [FastCheckUser] WITH DEFAULT_SCHEMA=[FastCheckUser]
GO
/****** Object:  User [EYoung]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [EYoung] FOR LOGIN [EYoung] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [EventProcessorUser ]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [EventProcessorUser ] FOR LOGIN [EventProcessorUser ] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [EMMAPIUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [EMMAPIUser] FOR LOGIN [EMMAPIUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [EMHwAdminAPI]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [EMHwAdminAPI] FOR LOGIN [EMHwAdminApi] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [EmAssociation]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [EmAssociation] FOR LOGIN [EmAssociation] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DVSRUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [DVSRUser] FOR LOGIN [DVSRUser] WITH DEFAULT_SCHEMA=[DVSRUser]
GO
/****** Object:  User [DEllingsworth]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [DEllingsworth] FOR LOGIN [DEllingsworth] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCMUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [DCMUser] FOR LOGIN [DCMUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCCUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [DCCUser] FOR LOGIN [DCCUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DBoyd]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [DBoyd] FOR LOGIN [dboyd] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DBLoadInfoUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [DBLoadInfoUser] FOR LOGIN [DBLoadInfoUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DataDeleteUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [DataDeleteUser] FOR LOGIN [DataDeleteUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DataCenter]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [DataCenter] FOR LOGIN [DataCenter] WITH DEFAULT_SCHEMA=[DataCenter]
GO
/****** Object:  User [CGibson]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [CGibson] FOR LOGIN [CGibson] WITH DEFAULT_SCHEMA=[developer_Schema]
GO
/****** Object:  User [CenturionSync]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [CenturionSync] FOR LOGIN [CenturionSync] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [CAMUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [CAMUser] FOR LOGIN [CAMUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [BillingMgrUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [BillingMgrUser] FOR LOGIN [BillingMgrUser] WITH DEFAULT_SCHEMA=[BillingMgrUser]
GO
/****** Object:  User [aTomasi_dba]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [aTomasi_dba] FOR LOGIN [aTomasi_dba] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [ATomasi]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [ATomasi] FOR LOGIN [ATomasi] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [ashah]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [ashah] FOR LOGIN [ashah] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [ArchiveUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [ArchiveUser] FOR LOGIN [ArchiveUser] WITH DEFAULT_SCHEMA=[ArchiveUser]
GO
/****** Object:  User [ArchiveDataDeleteUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [ArchiveDataDeleteUser] FOR LOGIN [ArchiveDataDeleteUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [AlarmSvrUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [AlarmSvrUser] FOR LOGIN [AlarmSvrUser] WITH DEFAULT_SCHEMA=[AlarmSvrUser]
GO
/****** Object:  User [AInostroza]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [AInostroza] FOR LOGIN [ainostroza] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [AGibson]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [AGibson] FOR LOGIN [AGibson] WITH DEFAULT_SCHEMA=[developer_Schema]
GO
/****** Object:  User [ActionTestUser]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE USER [ActionTestUser] FOR LOGIN [ActionTestUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  DatabaseRole [VCommUserRole]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE ROLE [VCommUserRole]
GO
/****** Object:  DatabaseRole [SalesReadOnly]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE ROLE [SalesReadOnly]
GO
/****** Object:  DatabaseRole [Read_Only]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE ROLE [Read_Only]
GO
/****** Object:  DatabaseRole [Developer_Role]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE ROLE [Developer_Role]
GO
/****** Object:  DatabaseRole [dba]    Script Date: 9/3/2025 6:47:08 PM ******/
CREATE ROLE [dba]
GO
ALTER ROLE [db_datareader] ADD MEMBER [zwelch]
GO
ALTER ROLE [db_datareader] ADD MEMBER [whalerlink]
GO
ALTER ROLE [db_datareader] ADD MEMBER [WhalerETL]
GO
ALTER ROLE [db_datareader] ADD MEMBER [WebReports]
GO
ALTER ROLE [VCommUserRole] ADD MEMBER [VCommUser]
GO
ALTER ROLE [db_datareader] ADD MEMBER [VCommAnalyzerUser]
GO
ALTER ROLE [db_datareader] ADD MEMBER [tdunaj]
GO
ALTER ROLE [db_datareader] ADD MEMBER [skuznetsov]
GO
ALTER ROLE [db_datareader] ADD MEMBER [SendCodeuser]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [SendCodeuser]
GO
ALTER ROLE [db_datareader] ADD MEMBER [SdcMgrViewer]
GO
ALTER ROLE [db_datareader] ADD MEMBER [SdcMgrUser]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [SdcMgrUser]
GO
ALTER ROLE [db_datareader] ADD MEMBER [sdcApiUser]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [sdcApiUser]
GO
ALTER ROLE [dba] ADD MEMBER [sCupstid_dba]
GO
ALTER ROLE [db_owner] ADD MEMBER [sCupstid_dba]
GO
ALTER ROLE [Developer_Role] ADD MEMBER [SCupstid]
GO
ALTER ROLE [Read_Only] ADD MEMBER [SCupstid]
GO
ALTER ROLE [db_datareader] ADD MEMBER [RTCStats]
GO
ALTER ROLE [db_datareader] ADD MEMBER [ReportClientUser]
GO
ALTER ROLE [Developer_Role] ADD MEMBER [RBuffington]
GO
ALTER ROLE [db_datareader] ADD MEMBER [QAAutomationUser]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [QAAutomationUser]
GO
ALTER ROLE [db_datareader] ADD MEMBER [PTMUser]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [PTMUser]
GO
ALTER ROLE [Read_Only] ADD MEMBER [psablan]
GO
ALTER ROLE [db_datareader] ADD MEMBER [psablan]
GO
ALTER ROLE [Developer_Role] ADD MEMBER [PHickman]
GO
ALTER ROLE [Read_Only] ADD MEMBER [PHickman]
GO
ALTER ROLE [db_datareader] ADD MEMBER [PCEUser]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [PCEUser]
GO
ALTER ROLE [db_datareader] ADD MEMBER [PageAckUser]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [PageAckUser]
GO
ALTER ROLE [db_datareader] ADD MEMBER [osomuyiwa]
GO
ALTER ROLE [db_datareader] ADD MEMBER [nkent]
GO
ALTER ROLE [db_datareader] ADD MEMBER [MTDDebug]
GO
ALTER ROLE [db_denydatawriter] ADD MEMBER [MTDDebug]
GO
ALTER ROLE [db_datareader] ADD MEMBER [mnguyen]
GO
ALTER ROLE [db_datareader] ADD MEMBER [mgendrau]
GO
ALTER ROLE [db_datareader] ADD MEMBER [Linkmeup]
GO
ALTER ROLE [db_datareader] ADD MEMBER [kpullamsetti]
GO
ALTER ROLE [db_datareader] ADD MEMBER [kkulikova]
GO
ALTER ROLE [db_datareader] ADD MEMBER [jmerritt]
GO
ALTER ROLE [db_datareader] ADD MEMBER [HwAdminUser]
GO
ALTER ROLE [db_datareader] ADD MEMBER [HardwareAdminUser]
GO
ALTER ROLE [db_datareader] ADD MEMBER [GUkarande]
GO
ALTER ROLE [db_datareader] ADD MEMBER [FirebaseSvcUser]
GO
ALTER ROLE [db_datareader] ADD MEMBER [FftUser]
GO
ALTER ROLE [db_owner] ADD MEMBER [EYoung]
GO
ALTER ROLE [db_datareader] ADD MEMBER [EYoung]
GO
ALTER ROLE [db_datareader] ADD MEMBER [EventProcessorUser ]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [EventProcessorUser ]
GO
ALTER ROLE [db_datareader] ADD MEMBER [EMMAPIUser]
GO
ALTER ROLE [db_datareader] ADD MEMBER [EmAssociation]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DVSRUser]
GO
ALTER ROLE [Developer_Role] ADD MEMBER [DEllingsworth]
GO
ALTER ROLE [Read_Only] ADD MEMBER [DEllingsworth]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DEllingsworth]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCCUser]
GO
ALTER ROLE [Read_Only] ADD MEMBER [DBoyd]
GO
ALTER ROLE [db_owner] ADD MEMBER [DBoyd]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DBoyd]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DataCenter]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [DataCenter]
GO
ALTER ROLE [Developer_Role] ADD MEMBER [CGibson]
GO
ALTER ROLE [Read_Only] ADD MEMBER [CGibson]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [CGibson]
GO
ALTER ROLE [db_datareader] ADD MEMBER [CenturionSync]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [CenturionSync]
GO
ALTER ROLE [db_datareader] ADD MEMBER [CAMUser]
GO
ALTER ROLE [db_datareader] ADD MEMBER [BillingMgrUser]
GO
ALTER ROLE [dba] ADD MEMBER [aTomasi_dba]
GO
ALTER ROLE [db_owner] ADD MEMBER [aTomasi_dba]
GO
ALTER ROLE [dba] ADD MEMBER [ATomasi]
GO
ALTER ROLE [Read_Only] ADD MEMBER [ATomasi]
GO
ALTER ROLE [db_datareader] ADD MEMBER [ATomasi]
GO
ALTER ROLE [db_datareader] ADD MEMBER [ashah]
GO
ALTER ROLE [db_datareader] ADD MEMBER [AlarmSvrUser]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [AlarmSvrUser]
GO
ALTER ROLE [Read_Only] ADD MEMBER [AInostroza]
GO
ALTER ROLE [db_datareader] ADD MEMBER [AInostroza]
GO
ALTER ROLE [Developer_Role] ADD MEMBER [AGibson]
GO
/****** Object:  Schema [AlarmSvrUser]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [AlarmSvrUser]
GO
/****** Object:  Schema [ArchiveUser]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [ArchiveUser]
GO
/****** Object:  Schema [Association]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [Association]
GO
/****** Object:  Schema [BillingMgrUser]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [BillingMgrUser]
GO
/****** Object:  Schema [DataCenter]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [DataCenter]
GO
/****** Object:  Schema [Developer_Schema]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [Developer_Schema]
GO
/****** Object:  Schema [DVSRUser]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [DVSRUser]
GO
/****** Object:  Schema [FastCheckUser]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [FastCheckUser]
GO
/****** Object:  Schema [FftUser]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [FftUser]
GO
/****** Object:  Schema [HwAdminUser]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [HwAdminUser]
GO
/****** Object:  Schema [msqta]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [msqta]
GO
/****** Object:  Schema [MTDDebug]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [MTDDebug]
GO
/****** Object:  Schema [PageAckUser]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [PageAckUser]
GO
/****** Object:  Schema [PCEUser]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [PCEUser]
GO
/****** Object:  Schema [ph]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [ph]
GO
/****** Object:  Schema [SalesReadOnly]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [SalesReadOnly]
GO
/****** Object:  Schema [SdcMgrUser]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [SdcMgrUser]
GO
/****** Object:  Schema [UserMgrUser]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [UserMgrUser]
GO
/****** Object:  Schema [VCommUserRole]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [VCommUserRole]
GO
/****** Object:  Schema [WebReports]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SCHEMA [WebReports]
GO
/****** Object:  PartitionFunction [PF_MonthlyPartition_MTD_01]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION FUNCTION [PF_MonthlyPartition_MTD_01](datetimeoffset(7)) AS RANGE RIGHT FOR VALUES (N'01/01/2025 00:00:00 +00:00', N'02/01/2025 00:00:00 +00:00', N'03/01/2025 00:00:00 +00:00', N'04/01/2025 00:00:00 +00:00', N'05/01/2025 00:00:00 +00:00', N'06/01/2025 00:00:00 +00:00', N'07/01/2025 00:00:00 +00:00', N'08/01/2025 00:00:00 +00:00', N'09/01/2025 00:00:00 +00:00', N'10/01/2025 00:00:00 +00:00', N'11/01/2025 00:00:00 +00:00', N'12/01/2025 00:00:00 +00:00', N'01/01/2026 00:00:00 +00:00', N'02/28/2026 00:00:00 +00:00', N'03/01/2026 00:00:00 +00:00', N'04/01/2026 00:00:00 +00:00', N'05/01/2026 00:00:00 +00:00', N'06/01/2026 00:00:00 +00:00', N'07/01/2026 00:00:00 +00:00', N'08/01/2026 00:00:00 +00:00', N'09/01/2026 00:00:00 +00:00', N'10/01/2026 00:00:00 +00:00', N'11/01/2026 00:00:00 +00:00', N'12/01/2026 00:00:00 +00:00')
GO
/****** Object:  PartitionFunction [PF_SemiYearly_MTD_ActionLog]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION FUNCTION [PF_SemiYearly_MTD_ActionLog](datetime) AS RANGE RIGHT FOR VALUES (N'2019-06-30T23:59:59.997', N'2019-12-31T23:59:59.997', N'2020-06-30T23:59:59.997', N'2020-12-31T23:59:59.997', N'2021-06-30T23:59:59.997', N'2021-12-31T23:59:59.997', N'2022-06-30T23:59:59.997', N'2022-12-31T23:59:59.997', N'2023-06-30T23:59:59.997', N'2023-12-31T23:59:59.997', N'2024-06-30T23:59:59.997', N'2024-12-31T23:59:59.997', N'2025-06-30T23:59:59.997', N'2025-12-31T23:59:59.997')
GO
/****** Object:  PartitionFunction [PF_SemiYearly_MTD_Alarms_1]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION FUNCTION [PF_SemiYearly_MTD_Alarms_1](datetime) AS RANGE RIGHT FOR VALUES (N'2019-06-30T23:59:59.997', N'2019-12-31T23:59:59.997', N'2020-06-30T23:59:59.997', N'2020-12-31T23:59:59.997', N'2021-06-30T23:59:59.997', N'2021-12-31T23:59:59.997', N'2022-06-30T23:59:59.997', N'2022-12-31T23:59:59.997', N'2023-06-30T23:59:59.997', N'2023-12-31T23:59:59.997', N'2024-06-30T23:59:59.997', N'2024-12-31T23:59:59.997', N'2025-06-30T23:59:59.997', N'2025-12-31T23:59:59.997')
GO
/****** Object:  PartitionFunction [PF_SemiYearly_MTD_EMailMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION FUNCTION [PF_SemiYearly_MTD_EMailMessages](datetime) AS RANGE RIGHT FOR VALUES (N'2019-06-30T23:59:59.997', N'2019-12-31T23:59:59.997', N'2020-06-30T23:59:59.997', N'2020-12-31T23:59:59.997', N'2021-06-30T23:59:59.997', N'2021-12-31T23:59:59.997', N'2022-06-30T23:59:59.997', N'2022-12-31T23:59:59.997', N'2023-06-30T23:59:59.997', N'2023-12-31T23:59:59.997', N'2024-06-30T23:59:59.997', N'2024-12-31T23:59:59.997', N'2025-06-30T23:59:59.997', N'2025-12-31T23:59:59.997')
GO
/****** Object:  PartitionFunction [PF_SemiYearly_MTD_Positions]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION FUNCTION [PF_SemiYearly_MTD_Positions](datetime) AS RANGE RIGHT FOR VALUES (N'2019-06-30T23:59:59.997', N'2019-12-31T23:59:59.997', N'2020-06-30T23:59:59.997', N'2020-12-31T23:59:59.997', N'2021-06-30T23:59:59.997', N'2021-12-31T23:59:59.997', N'2022-06-30T23:59:59.997', N'2022-12-31T23:59:59.997', N'2023-06-30T23:59:59.997', N'2023-12-31T23:59:59.997', N'2024-06-30T23:59:59.997', N'2024-12-31T23:59:59.997', N'2025-06-30T23:59:59.997', N'2025-12-31T23:59:59.997')
GO
/****** Object:  PartitionFunction [PF_SemiYearly_MTDCalls]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION FUNCTION [PF_SemiYearly_MTDCalls](datetime) AS RANGE RIGHT FOR VALUES (N'2019-06-30T23:59:59.997', N'2019-12-31T23:59:59.997', N'2020-06-30T23:59:59.997', N'2020-12-31T23:59:59.997', N'2021-06-30T23:59:59.997', N'2021-12-31T23:59:59.997', N'2022-06-30T23:59:59.997', N'2022-12-31T23:59:59.997', N'2023-06-30T23:59:59.997', N'2023-12-31T23:59:59.997', N'2024-06-30T23:59:59.997', N'2024-12-31T23:59:59.997', N'2025-06-30T23:59:59.997', N'2025-12-31T23:59:59.997')
GO
/****** Object:  PartitionFunction [PF_SemiYearly_OffenderPositionsReviewed]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION FUNCTION [PF_SemiYearly_OffenderPositionsReviewed](datetime) AS RANGE RIGHT FOR VALUES (N'2019-06-30T23:59:59.997', N'2019-12-31T23:59:59.997', N'2020-06-30T23:59:59.997', N'2020-12-31T23:59:59.997', N'2021-06-30T23:59:59.997', N'2021-12-31T23:59:59.997', N'2022-06-30T23:59:59.997', N'2022-12-31T23:59:59.997', N'2023-06-30T23:59:59.997', N'2023-12-31T23:59:59.997', N'2024-06-30T23:59:59.997', N'2024-12-31T23:59:59.997', N'2025-06-30T23:59:59.997', N'2025-12-31T23:59:59.997')
GO
/****** Object:  PartitionFunction [PF_SemiYearlyPartition]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION FUNCTION [PF_SemiYearlyPartition](datetime) AS RANGE RIGHT FOR VALUES (N'2019-06-30T23:59:59.997', N'2019-12-31T23:59:59.997', N'2020-06-30T23:59:59.997', N'2020-12-31T23:59:59.997', N'2021-06-30T23:59:59.997')
GO
/****** Object:  PartitionFunction [PF_SemiYearlyPartition_Test]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION FUNCTION [PF_SemiYearlyPartition_Test](datetime) AS RANGE RIGHT FOR VALUES (N'2019-06-30T23:59:59.997', N'2019-12-31T23:59:59.997', N'2020-06-30T23:59:59.997', N'2020-12-31T23:59:59.997', N'2021-06-30T23:59:59.997', N'2022-06-30T23:59:59.997', N'2022-12-31T23:59:59.997')
GO
/****** Object:  PartitionFunction [PS_SemiYearly_MTD_ActionLog]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION FUNCTION [PS_SemiYearly_MTD_ActionLog](datetime) AS RANGE RIGHT FOR VALUES (N'2019-06-30T23:59:59.997', N'2019-12-31T23:59:59.997', N'2020-06-30T23:59:59.997', N'2020-12-31T23:59:59.997', N'2021-06-30T23:59:59.997', N'2021-12-31T23:59:59.997', N'2022-06-30T23:59:59.997', N'2022-12-31T23:59:59.997', N'2023-06-30T23:59:59.997', N'2023-12-31T23:59:59.997', N'2024-06-30T23:59:59.997', N'2024-12-31T23:59:59.997', N'2025-06-30T23:59:59.997')
GO
/****** Object:  PartitionFunction [PS_SemiYearly_MTD_Alarms]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION FUNCTION [PS_SemiYearly_MTD_Alarms](datetime) AS RANGE RIGHT FOR VALUES (N'2019-06-30T23:59:59.997', N'2019-12-31T23:59:59.997', N'2020-06-30T23:59:59.997', N'2020-12-31T23:59:59.997', N'2021-06-30T23:59:59.997', N'2021-12-31T23:59:59.997', N'2022-06-30T23:59:59.997', N'2022-12-31T23:59:59.997', N'2023-06-30T23:59:59.997', N'2023-12-31T23:59:59.997', N'2024-06-30T23:59:59.997', N'2024-12-31T23:59:59.997', N'2025-06-30T23:59:59.997', N'2025-12-31T23:59:59.997', N'2099-12-31T23:59:59.997')
GO
/****** Object:  PartitionScheme [PS_Monthly_MTD_01]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION SCHEME [PS_Monthly_MTD_01] AS PARTITION [PF_MonthlyPartition_MTD_01] TO ([Jan25], [Feb25], [Mar25], [Apr25], [May25], [Jun25], [Jul25], [Aug25], [Sep25], [Oct25], [Nov25], [Dec25], [Jan26], [Feb26], [Mar26], [Apr26], [May26], [Jun26], [Jul26], [Aug26], [Sep26], [Oct26], [Nov26], [Dec26], [PRIMARY])
GO
/****** Object:  PartitionScheme [PS_SemiYearly]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION SCHEME [PS_SemiYearly] AS PARTITION [PF_SemiYearlyPartition] TO ([SixMon_01], [SixMon_12], [SixMon_03], [SixMon_04], [SixMon_05], [PRIMARY], [SixMon_11])
GO
/****** Object:  PartitionScheme [PS_SemiYearly_MTD_ActionLog]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION SCHEME [PS_SemiYearly_MTD_ActionLog] AS PARTITION [PF_SemiYearly_MTD_ActionLog] TO ([SixMon_01], [SixMon_02], [SixMon_03], [SixMon_04], [SixMon_05], [SixMon_06], [SixMon_07], [SixMon_08], [SixMon_09], [SixMon_10], [SixMon_11], [SixMon_12], [SixMon_13], [SixMon_14], [PRIMARY])
GO
/****** Object:  PartitionScheme [PS_SemiYearly_MTD_Alarms]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION SCHEME [PS_SemiYearly_MTD_Alarms] AS PARTITION [PS_SemiYearly_MTD_Alarms] TO ([SixMon_01], [SixMon_02], [SixMon_03], [SixMon_04], [SixMon_05], [SixMon_06], [SixMon_07], [SixMon_08], [SixMon_09], [SixMon_10], [SixMon_11], [SixMon_12], [SixMon_13], [SixMon_14], [PRIMARY], [SixMon_01O])
GO
/****** Object:  PartitionScheme [PS_SemiYearly_MTD_Alarms_1]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION SCHEME [PS_SemiYearly_MTD_Alarms_1] AS PARTITION [PF_SemiYearly_MTD_Alarms_1] TO ([SixMon_01], [SixMon_02], [SixMon_03], [SixMon_04], [SixMon_05], [SixMon_06], [SixMon_07], [SixMon_08], [SixMon_09], [SixMon_10], [SixMon_11], [SixMon_12], [SixMon_13], [SixMon_14], [PRIMARY])
GO
/****** Object:  PartitionScheme [PS_SemiYearly_MTD_EMailMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION SCHEME [PS_SemiYearly_MTD_EMailMessages] AS PARTITION [PF_SemiYearly_MTD_EMailMessages] TO ([SixMon_01], [SixMon_02], [SixMon_03], [SixMon_04], [SixMon_05], [SixMon_06], [SixMon_07], [SixMon_08], [SixMon_09], [SixMon_10], [SixMon_11], [SixMon_12], [SixMon_13], [SixMon_14], [PRIMARY], [SixMon_15])
GO
/****** Object:  PartitionScheme [PS_SemiYearly_MTD_Positions]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION SCHEME [PS_SemiYearly_MTD_Positions] AS PARTITION [PF_SemiYearly_MTD_Positions] TO ([SixMon_01], [SixMon_02], [SixMon_03], [SixMon_04], [SixMon_05], [SixMon_06], [SixMon_07], [SixMon_08], [SixMon_09], [SixMon_10], [SixMon_11], [SixMon_12], [SixMon_13], [SixMon_14], [PRIMARY])
GO
/****** Object:  PartitionScheme [PS_SemiYearly_MTDCalls]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION SCHEME [PS_SemiYearly_MTDCalls] AS PARTITION [PF_SemiYearly_MTDCalls] TO ([SixMon_01], [SixMon_02], [SixMon_03], [SixMon_04], [SixMon_05], [SixMon_06], [SixMon_07], [SixMon_08], [SixMon_09], [SixMon_10], [SixMon_11], [SixMon_12], [SixMon_13], [SixMon_14], [PRIMARY])
GO
/****** Object:  PartitionScheme [PS_SemiYearly_OffenderPositionsReviewed]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE PARTITION SCHEME [PS_SemiYearly_OffenderPositionsReviewed] AS PARTITION [PF_SemiYearly_OffenderPositionsReviewed] TO ([SixMon_01], [SixMon_02], [SixMon_03], [SixMon_04], [SixMon_05], [SixMon_06], [SixMon_07], [SixMon_08], [SixMon_09], [SixMon_10], [SixMon_11], [SixMon_12], [SixMon_13], [SixMon_14], [PRIMARY])
GO
/****** Object:  UserDefinedTableType [dbo].[MyOffenderPositionsReviewedTable]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE TYPE [dbo].[MyOffenderPositionsReviewedTable] AS TABLE(
	[OffenderPositionsReviewedRecID] [bigint] NULL,
	[OffenderID] [int] NULL,
	[PositionrecID] [bigint] NULL,
	[UserRecID] [int] NULL,
	[ReviewedDate] [datetime] NULL,
	[AppID] [int] NULL,
	[DeviceType] [int] NULL,
	[PositionDate] [datetime] NULL
)
GO
/****** Object:  UserDefinedTableType [msqta].[ExecutionStatType]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE TYPE [msqta].[ExecutionStatType] AS TABLE(
	[GroupID] [bigint] NOT NULL,
	[QueryID] [bigint] NOT NULL,
	[DatabaseName] [sysname] NOT NULL,
	[StatType] [tinyint] NOT NULL,
	[IsProfiled] [bit] NOT NULL,
	[ExecutionCount] [bigint] NOT NULL,
	[Showplan] [nvarchar](max) NULL,
	[Stats] [nvarchar](max) NOT NULL
)
GO
/****** Object:  UserDefinedTableType [msqta].[QueryOptionGroupType]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE TYPE [msqta].[QueryOptionGroupType] AS TABLE(
	[GroupID] [bigint] NOT NULL,
	[QueryID] [bigint] NOT NULL,
	[DatabaseName] [sysname] NOT NULL,
	[QueryOptions] [nvarchar](max) NOT NULL,
	[IsVerified] [bit] NOT NULL,
	[IsDeployed] [bit] NOT NULL,
	[ValidationCompleteDate] [datetime2](7) NULL
)
GO
/****** Object:  UserDefinedTableType [msqta].[TuningQueryType]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE TYPE [msqta].[TuningQueryType] AS TABLE(
	[QueryID] [bigint] NOT NULL,
	[DatabaseName] [sysname] NOT NULL,
	[ParentObjectId] [bigint] NULL,
	[QueryHash] [binary](8) NOT NULL,
	[QueryText] [nvarchar](max) NOT NULL,
	[QueryType] [tinyint] NOT NULL,
	[IsParametrized] [bit] NOT NULL,
	[PlanGuide] [nvarchar](max) NULL,
	[Status] [tinyint] NOT NULL,
	[CreateDate] [datetime2](7) NOT NULL,
	[LastModifyDate] [datetime2](7) NOT NULL,
	[ProfileCompleteDate] [datetime2](7) NULL,
	[AnalysisCompleteDate] [datetime2](7) NULL,
	[ExperimentPendingDate] [datetime2](7) NULL,
	[ExperimentCompleteDate] [datetime2](7) NULL,
	[DeployedDate] [datetime2](7) NULL,
	[AbandonedDate] [datetime2](7) NULL,
	[Parameters] [nvarchar](max) NULL
)
GO
/****** Object:  UserDefinedTableType [msqta].[TuningSessionType]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE TYPE [msqta].[TuningSessionType] AS TABLE(
	[TuningSessionID] [int] NULL,
	[DatabaseName] [sysname] NOT NULL,
	[Name] [nvarchar](300) NULL,
	[Description] [nvarchar](400) NULL,
	[Status] [tinyint] NOT NULL,
	[CreateDate] [datetime2](7) NOT NULL,
	[LastModifyDate] [datetime2](7) NOT NULL,
	[BaselineEndDate] [datetime2](7) NOT NULL,
	[UpgradeDate] [datetime2](7) NOT NULL,
	[TargetCompatLevel] [int] NOT NULL,
	[WorkloadDurationDays] [int] NOT NULL
)
GO
/****** Object:  UserDefinedFunction [dbo].[fn_GetLastDeviceCallTime]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jeremy Nelson
-- Create date: 1/30/2014
-- Description:	Returns the most recent call time for the requested device
-- ---------------------------------------------
-- Real device test: Select dbo.fn_GetLastDeviceCallTime(69000005, '1/1/1900')
-- Fake device test: Select dbo.fn_GetLastDeviceCallTime(-69000005, '1/1/1900')
-- =============================================
CREATE FUNCTION [dbo].[fn_GetLastDeviceCallTime]
(
	@DeviceID	int,
	@Default	datetime
)
RETURNS datetime
AS
BEGIN
	
	DECLARE @LastCallTime	DATETIME

	SELECT	@LastCallTime = ISNULL(MAX(timestamp), @Default)
	FROM	MTD_LastPositions
	WHERE	DeviceID = @DeviceID

	RETURN @LastCallTime

END

GO
/****** Object:  UserDefinedFunction [dbo].[fn_HexToLong]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

--
--	Create fn_HexToLong
--
CREATE
FUNCTION	[dbo].[fn_HexToLong]
			(
				@Hex		VARCHAR(8),
				@Reverse	BIT
			)
RETURNS		INT
BEGIN

	IF (@Reverse = 1)
	BEGIN
		SET @Hex = Substring(@Hex, 7, 2) + Substring(@Hex, 5, 2) + Substring(@Hex, 3, 2) + Substring(@Hex, 1, 2)
	END

	RETURN CONVERT(INT, CONVERT(VARBINARY(4), @Hex, 2))

END
GO
/****** Object:  UserDefinedFunction [dbo].[fn_TruncateTimeFromDate]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=============================================================================
-- Function Name: fn_TruncateTimeFromDate
-- Description..: Truncates the time from the specified date.
-- Author.......: Phillip R. Hickman
-- Date Created.: 2015-08-12
-------------------------------------------------------------------------------
-- Revisions
--	2015-08-12 - PRH - Initial script created.
--=============================================================================
CREATE FUNCTION [dbo].[fn_TruncateTimeFromDate] 
	(@in_date DATETIME)
RETURNS DATETIME
AS
BEGIN
	RETURN CONVERT(DATETIME, CONVERT(CHAR(8), @in_Date, 112))
END
GO
/****** Object:  UserDefinedFunction [dbo].[Split]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE FUNCTION [dbo].[Split]
	(
		@List nvarchar(2000),
		@SplitOn nvarchar(5)
	)  
	RETURNS @RtnValue table 
	(
		
		Id int identity(1,1),
		Value nvarchar(100)
	) 
	AS  
	BEGIN 
		While (Charindex(@SplitOn,@List)>0)
		Begin

			Insert Into @RtnValue (value)
			Select 
				Value = ltrim(rtrim(Substring(@List,1,Charindex(@SplitOn,@List)-1)))

			Set @List = Substring(@List,Charindex(@SplitOn,@List)+len(@SplitOn),len(@List))
		End

		Insert Into @RtnValue (Value)
		Select Value = ltrim(rtrim(@List))
	
		Return
	END


GO
/****** Object:  Table [dbo].[MTDDebug]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTDDebug](
	[MTDDebugRecID] [bigint] IDENTITY(1,1) NOT NULL,
	[DemographicID] [int] NOT NULL,
	[DeviceID] [int] NOT NULL,
	[MTDCallsRecID] [bigint] NOT NULL,
	[DebugType] [smallint] NULL,
	[STimer] [int] NULL,
	[TimeStamp] [datetime] NULL,
	[StoredTimeStamp] [datetimeoffset](7) NULL,
	[DebugInfo1] [int] NULL,
	[DebugInfo2] [int] NULL,
	[DebugInfo3] [int] NULL,
	[DebugInfo4] [int] NULL,
	[DebugInfo5] [int] NULL,
	[DebugInfo6] [int] NULL,
	[DebugInfo7] [int] NULL,
	[DebugInfo8] [int] NULL,
 CONSTRAINT [PK_MTDDebug] PRIMARY KEY NONCLUSTERED 
(
	[MTDDebugRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PS_Monthly_MTD_01]([StoredTimeStamp])
GO
/****** Object:  Index [IX_MTDDebug_StoredTimeStamp]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [IX_MTDDebug_StoredTimeStamp] ON [dbo].[MTDDebug]
(
	[StoredTimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_Monthly_MTD_01]([StoredTimeStamp])
GO
/****** Object:  View [dbo].[vMTDDebug_ToBeDeleted]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE     VIEW [dbo].[vMTDDebug_ToBeDeleted] AS
SELECT TOP 300000 * 
FROM MTDDebug with (nolock)
WHERE StoredTimeStamp  <= dateadd(month, -6, getdate())
Order By StoredTimeStamp
GO
/****** Object:  Table [dbo].[MTD_Positions]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_Positions](
	[PositionRecID] [numeric](13, 0) IDENTITY(1,1) NOT NULL,
	[DemographicID] [int] NOT NULL,
	[DeviceID] [int] NOT NULL,
	[TimeStamp] [datetime] NOT NULL,
	[Longitude] [float] NOT NULL,
	[Latitude] [float] NOT NULL,
	[Speed] [smallint] NOT NULL,
	[Heading] [smallint] NOT NULL,
	[Elevation] [int] NOT NULL,
	[PDOP] [real] NOT NULL,
	[HDOP] [real] NOT NULL,
	[VDOP] [real] NOT NULL,
	[GPSMode] [tinyint] NOT NULL,
	[SatellitesInView] [tinyint] NOT NULL,
	[SVN] [binary](12) NOT NULL,
	[SNR] [binary](12) NOT NULL,
	[Temperature] [smallint] NOT NULL,
	[BatteryVoltage] [smallint] NOT NULL,
	[PointStatus] [int] NOT NULL,
	[GeoRuleGraceMask] [int] NOT NULL,
	[HWRuleGrace] [int] NOT NULL,
	[RulesInViolation] [tinyint] NOT NULL,
	[StoredTimeStamp] [datetime] NOT NULL,
	[MTDCallsRecID] [bigint] NULL,
	[DeviceStatus] [int] NULL,
	[DeviceStatus2] [int] NULL,
 CONSTRAINT [Orig_PK_MTD_Positions] PRIMARY KEY NONCLUSTERED 
(
	[PositionRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PS_SemiYearly]([TimeStamp])
GO
ALTER TABLE [dbo].[MTD_Positions] SET (LOCK_ESCALATION = AUTO)
GO
/****** Object:  Index [PositionQryIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [PositionQryIDX] ON [dbo].[MTD_Positions]
(
	[DemographicID] ASC,
	[TimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_SemiYearly]([TimeStamp])
GO
/****** Object:  View [dbo].[vMTD_PositionsToBeDeleted]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vMTD_PositionsToBeDeleted] AS
SELECT TOP 300000 * 
FROM MTD_Positions with (nolock)
WHERE TimeStamp< (select ArchiveDate from Archive.dbo.ArchiveConfig)
Order By Timestamp
GO
/****** Object:  Table [dbo].[MTDCalls]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTDCalls](
	[CallRecID] [bigint] IDENTITY(1,1) NOT NULL,
	[DeviceID] [int] NOT NULL,
	[DemoGraphicID] [int] NOT NULL,
	[ANIPhoneNumber] [varchar](16) NULL,
	[IPAddress] [varchar](16) NULL,
	[Originator] [char](3) NOT NULL,
	[SessionSummary] [int] NOT NULL,
	[StartTime] [datetime] NOT NULL,
	[EndTime] [datetime] NOT NULL,
	[ElapsedSeconds] [int] NOT NULL,
	[PointsProcessed] [int] NOT NULL,
	[PointsMtdReportsSent] [int] NOT NULL,
	[InChargerDeviceID] [int] NULL,
	[DatFileName] [varchar](255) NULL,
	[StoredTimeStamp] [datetime] NULL,
	[CallProcessed] [tinyint] NULL,
 CONSTRAINT [PK_MTDCalls] PRIMARY KEY NONCLUSTERED 
(
	[CallRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PS_SemiYearly_MTDCalls]([StartTime])
GO
ALTER TABLE [dbo].[MTDCalls] SET (LOCK_ESCALATION = AUTO)
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [MTDCallsIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [MTDCallsIDX] ON [dbo].[MTDCalls]
(
	[DemoGraphicID] ASC,
	[StartTime] ASC,
	[EndTime] ASC,
	[DeviceID] ASC,
	[Originator] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PS_SemiYearly_MTDCalls]([StartTime])
GO
/****** Object:  View [dbo].[vMtdCallsToBeDeleted]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vMtdCallsToBeDeleted] AS
SELECT * 
FROM MtdCalls with (nolock)
WHERE StartTime <  (select ArchiveDate from Archive.dbo.ArchiveConfig)
GO
/****** Object:  Table [dbo].[MTD_SMSMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_SMSMessages](
	[RecID] [int] IDENTITY(1,1) NOT NULL,
	[DeviceID] [int] NOT NULL,
	[Action] [smallint] NOT NULL,
	[Parameter] [varchar](64) NULL,
	[PhoneNumber] [varchar](16) NOT NULL,
	[Gateway] [varchar](64) NOT NULL,
	[CreateGmt] [datetime] NOT NULL,
	[CreateTime] [datetime] NOT NULL,
	[SendTime] [datetime] NULL,
	[ReplyTime] [datetime] NULL,
	[APN] [varchar](50) NULL,
	[NetworkUserId] [varchar](25) NULL,
	[NetworkPassword] [varchar](25) NULL,
	[SendMethod] [char](1) NULL,
	[EncryptType] [char](1) NULL,
	[MessageType] [char](1) NULL,
	[IPAddress] [varchar](20) NULL,
	[Port] [int] NULL,
	[CSD] [varchar](20) NULL,
	[LL] [varchar](20) NULL,
	[DemographicId] [int] NULL,
	[EmailFormat] [char](1) NULL,
	[SMSMessageServiceHostName] [varchar](100) NULL,
	[SMSMessageServiceFetchDate] [datetime] NULL,
	[SMSMessageServiceBatchId] [uniqueidentifier] NULL,
	[DispatchAttempts] [int] NULL,
	[SendAttempts] [int] NULL,
	[Status] [varchar](100) NULL,
	[StartedSend] [datetime] NULL,
	[CompletedSend] [datetime] NULL,
	[Response] [varchar](max) NULL,
	[ExceptionMessage] [varchar](max) NULL,
	[QueuedDate] [datetime] NULL,
	[ResponseXML] [xml] NULL,
 CONSTRAINT [PK_MTD_SMSMessages] PRIMARY KEY NONCLUSTERED 
(
	[RecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_MTD_SMSMessages_PD]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vw_MTD_SMSMessages_PD]
AS
SELECT   RecID , DeviceID , [Action] , Parameter , PhoneNumber, Gateway, CreateGmt, CreateTime, SendTime, ReplyTime, NetworkUserId, APN, NetworkPassword, SendMethod, EncryptType, MessageType, IPAddress, Port, CSD, LL, DemographicId, EmailFormat, SMSMessageServiceHostName, 
             SMSMessageServiceFetchDate, SMSMessageServiceBatchId, DispatchAttempts, SendAttempts, [Status], StartedSend, CompletedSend, Response, ExceptionMessage, QueuedDate
FROM     dbo.MTD_SMSMessages
GO
/****** Object:  View [ph].[FileGroupDetail]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--Create a view to see partition information by filegroup
CREATE VIEW [ph].[FileGroupDetail]
AS
SELECT  pf.name AS pf_name ,
        ps.name AS partition_scheme_name ,
        p.partition_number ,
        ds.name AS partition_filegroup ,
        pf.type_desc AS pf_type_desc ,
        pf.fanout AS pf_fanout ,
        pf.boundary_value_on_right ,
        OBJECT_NAME(si.object_id) AS object_name ,
        rv.value AS range_value ,
        SUM(CASE WHEN si.index_id IN ( 1, 0 ) THEN p.rows
                    ELSE 0
            END) AS num_rows ,
        SUM(dbps.reserved_page_count) * 8 / 1024. AS reserved_mb_all_indexes ,
        SUM(CASE ISNULL(si.index_id, 0)
                WHEN 0 THEN 0
                ELSE 1
            END) AS num_indexes
FROM    sys.destination_data_spaces AS dds
        JOIN sys.data_spaces AS ds ON dds.data_space_id = ds.data_space_id
        JOIN sys.partition_schemes AS ps ON dds.partition_scheme_id = ps.data_space_id
        JOIN sys.partition_functions AS pf ON ps.function_id = pf.function_id
        LEFT JOIN sys.partition_range_values AS rv ON pf.function_id = rv.function_id
                                                        AND dds.destination_id = CASE pf.boundary_value_on_right
                                                                                    WHEN 0 THEN rv.boundary_id
                                                                                    ELSE rv.boundary_id + 1
                                                                                END
        LEFT JOIN sys.indexes AS si ON dds.partition_scheme_id = si.data_space_id
        LEFT JOIN sys.partitions AS p ON si.object_id = p.object_id
                                            AND si.index_id = p.index_id
                                            AND dds.destination_id = p.partition_number
        LEFT JOIN sys.dm_db_partition_stats AS dbps ON p.object_id = dbps.object_id
                                                        AND p.partition_id = dbps.partition_id
GROUP BY ds.name ,
        p.partition_number ,
        pf.name ,
        pf.type_desc ,
        pf.fanout ,
        pf.boundary_value_on_right ,
        ps.name ,
        si.object_id ,
        rv.value;
GO
/****** Object:  View [ph].[ObjectDetail]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--Create a view to see partition information by object
CREATE VIEW [ph].[ObjectDetail]	
AS
SELECT  SCHEMA_NAME(so.schema_id) AS schema_name ,
        OBJECT_NAME(p.object_id) AS object_name ,
        p.partition_number ,
        p.data_compression_desc ,
        dbps.row_count ,
        dbps.reserved_page_count * 8 / 1024. AS reserved_mb ,
        si.index_id ,
        CASE WHEN si.index_id = 0 THEN '(heap!)'
                ELSE si.name
        END AS index_name ,
        si.is_unique ,
        si.data_space_id ,
        mappedto.name AS mapped_to_name ,
        mappedto.type_desc AS mapped_to_type_desc ,
        partitionds.name AS partition_filegroup ,
        pf.name AS pf_name ,
        pf.type_desc AS pf_type_desc ,
        pf.fanout AS pf_fanout ,
        pf.boundary_value_on_right ,
        ps.name AS partition_scheme_name ,
        rv.value AS range_value
FROM    sys.partitions p
JOIN    sys.objects so
        ON p.object_id = so.object_id
            AND so.is_ms_shipped = 0
LEFT JOIN sys.dm_db_partition_stats AS dbps
        ON p.object_id = dbps.object_id
            AND p.partition_id = dbps.partition_id
JOIN    sys.indexes si
        ON p.object_id = si.object_id
            AND p.index_id = si.index_id
LEFT JOIN sys.data_spaces mappedto
        ON si.data_space_id = mappedto.data_space_id
LEFT JOIN sys.destination_data_spaces dds
        ON si.data_space_id = dds.partition_scheme_id
            AND p.partition_number = dds.destination_id
LEFT JOIN sys.data_spaces partitionds
        ON dds.data_space_id = partitionds.data_space_id
LEFT JOIN sys.partition_schemes AS ps
        ON dds.partition_scheme_id = ps.data_space_id
LEFT JOIN sys.partition_functions AS pf
        ON ps.function_id = pf.function_id
LEFT JOIN sys.partition_range_values AS rv
        ON pf.function_id = rv.function_id
            AND dds.destination_id = CASE pf.boundary_value_on_right
                                        WHEN 0 THEN rv.boundary_id
                                        ELSE rv.boundary_id + 1
                                    END
GO
/****** Object:  Table [Association].[Stops]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Association].[Stops](
	[StopId] [bigint] IDENTITY(1,1) NOT NULL,
	[StopGeography] [geography] NULL,
	[DemographicId] [int] NULL,
	[Latitude] [float] NULL,
	[Longitude] [float] NULL,
	[TIMESTAMP] [datetimeoffset](7) NULL,
	[EndTimeStamp] [datetimeoffset](7) NOT NULL,
	[StopStatus] [int] NULL,
	[PositionRecId] [bigint] NULL,
	[DistanceInFeet] [float] NULL,
	[TimeInMinutes] [float] NULL,
 CONSTRAINT [PK_StopID] PRIMARY KEY CLUSTERED 
(
	[StopId] ASC,
	[EndTimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_Monthly_MTD_01]([EndTimeStamp])
) ON [PS_Monthly_MTD_01]([EndTimeStamp])
GO
ALTER TABLE [Association].[Stops] SET (LOCK_ESCALATION = AUTO)
GO
/****** Object:  Table [dbo].[actionlogs_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[actionlogs_DEL](
	[Column 0] [varchar](50) NULL,
	[Column 1] [varchar](50) NULL,
	[Column 2] [varchar](50) NULL,
	[Column 3] [varchar](50) NULL,
	[Column 4] [varchar](50) NULL,
	[Column 5] [varchar](50) NULL,
	[Column 6] [varchar](50) NULL,
	[Column 7] [varchar](50) NULL,
	[Column 8] [varchar](50) NULL,
	[Column 9] [varchar](50) NULL,
	[Column 10] [varchar](50) NULL,
	[Column 11] [varchar](50) NULL,
	[Column 12] [varchar](50) NULL,
	[Column 13] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AGtest]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AGtest](
	[id] [nchar](10) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AutomatedCallBackDevices]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AutomatedCallBackDevices](
	[DeviceId] [int] NOT NULL,
	[DemographicId] [int] NULL,
	[DeviceType] [varchar](40) NULL,
	[SMSMessageId] [bigint] NULL,
PRIMARY KEY CLUSTERED 
(
	[DeviceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BaseUnitLocations]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BaseUnitLocations](
	[BaseUnitLocationId] [bigint] IDENTITY(1,1) NOT NULL,
	[CallRecId] [bigint] NOT NULL,
	[TimeStampUTC] [datetime] NULL,
	[GPSLocationStatus] [smallint] NULL,
	[Latitude] [float] NULL,
	[Longitude] [float] NULL,
	[HDOP] [float] NULL,
	[Altitude] [float] NULL,
	[Fix] [tinyint] NULL,
	[Heading] [float] NULL,
	[SpeedMph] [float] NULL,
	[GPSSatellites] [tinyint] NULL,
	[GLONASSSatellites] [tinyint] NULL,
PRIMARY KEY CLUSTERED 
(
	[BaseUnitLocationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CallCurrentProvider]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CallCurrentProvider](
	[CallCurrentProviderId] [bigint] IDENTITY(1,1) NOT NULL,
	[CallRecId] [bigint] NULL,
	[CurrentProvider] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[CallCurrentProviderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CenturionCalls]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CenturionCalls](
	[CallRecID] [bigint] IDENTITY(1,1) NOT NULL,
	[LogConversationID] [int] NOT NULL,
	[LogSignOffID] [int] NOT NULL,
	[LogSignOnID] [int] NOT NULL,
	[DeviceID] [int] NOT NULL,
	[LogConversationRaisedDateTime] [datetime] NOT NULL,
	[SignOnRaisedDateTime] [datetime] NOT NULL,
	[SignOffRaisedDateTime] [datetime] NOT NULL,
	[SignOnLocalDateTime] [datetime] NOT NULL,
	[ProcessName] [varchar](256) NOT NULL,
	[ModemTypeDescription] [varchar](64) NOT NULL,
	[FirstPhaseTime] [int] NOT NULL,
	[ConversationTime] [int] NOT NULL,
	[MessagesSentCount] [int] NOT NULL,
	[MsnFailCount] [int] NOT NULL,
	[TimeoutCount] [int] NOT NULL,
	[PercentSuccess] [int] NOT NULL,
	[TxData] [int] NOT NULL,
	[RxData] [int] NOT NULL,
	[SIMSerialNumber] [varchar](36) NULL,
	[MainboardSoftwareVersion] [int] NOT NULL,
	[HardwareVersion] [smallint] NOT NULL,
	[DeviceType] [varchar](50) NULL,
	[SerialNumber] [int] NOT NULL,
	[DemographicID] [int] NOT NULL,
	[PTMDeviceID] [int] NOT NULL,
 CONSTRAINT [PK_CenturionCalls] PRIMARY KEY CLUSTERED 
(
	[CallRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DCCCalls]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DCCCalls](
	[DCCCallId] [bigint] IDENTITY(1,1) NOT NULL,
	[DeviceId] [int] NOT NULL,
	[DCCServer] [varchar](40) NULL,
	[CallerId] [varchar](40) NULL,
	[CallTime] [int] NULL,
	[CallType] [char](1) NULL,
	[Data] [varchar](max) NULL,
	[FirmwareVersion] [varchar](40) NULL,
	[Processed] [bit] NULL,
	[Failed] [bit] NULL,
	[ErrorMessage] [varchar](40) NULL,
	[ModifiedTimestamp] [datetime] NULL,
	[StoredTimestamp] [datetime] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[DCCCallId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DCCCallsEggFiles]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DCCCallsEggFiles](
	[DCCCallsEggFileId] [bigint] IDENTITY(1,1) NOT NULL,
	[DCCCallId] [bigint] NOT NULL,
	[EggFileName] [varchar](100) NOT NULL,
	[FileCreatedDate] [datetime] NOT NULL,
	[LoadInfoProcessedDate] [datetime] NULL,
	[MTDCallRecId] [bigint] NULL,
	[Processed] [bit] NOT NULL,
	[Failed] [bit] NOT NULL,
	[ErrorMessage] [varchar](50) NULL,
 CONSTRAINT [PK_DCCCallsEggFiles] PRIMARY KEY CLUSTERED 
(
	[DCCCallsEggFileId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DCCUnusedEvent]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DCCUnusedEvent](
	[DCCUnusedEventID] [int] IDENTITY(1,1) NOT NULL,
	[DemographicID] [int] NULL,
	[DeviceID] [int] NULL,
	[EMSEventTypeID] [smallint] NOT NULL,
	[EventTimestamp] [datetime] NOT NULL,
	[Parameter] [varchar](25) NULL,
	[Status] [smallint] NULL,
	[EMSEventLogID] [int] NULL,
	[MTDCallRecID] [bigint] NULL,
	[StoredTimestamp] [datetime] NOT NULL,
 CONSTRAINT [PK_DCCUnusedEvent] PRIMARY KEY CLUSTERED 
(
	[DCCUnusedEventID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DeviceCallsLastAttempt]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DeviceCallsLastAttempt](
	[CallRecID] [bigint] NOT NULL,
	[DeviceID] [int] NOT NULL,
	[DemoGraphicID] [int] NOT NULL,
	[PhoneNumber] [char](15) NOT NULL,
	[IPAddress] [char](15) NOT NULL,
	[Originator] [char](3) NOT NULL,
	[SessionSummary] [int] NOT NULL,
	[StartTime] [datetime] NOT NULL,
	[EndTime] [datetime] NOT NULL,
	[ElapsedSeconds] [int] NOT NULL,
	[PointsProcessed] [smallint] NULL,
	[PointsDeviceReportsSent] [smallint] NULL,
	[InChargerDeviceID] [int] NOT NULL,
	[DeviceCallsLastAttemptId] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_DeviceCallsLastAttempt] PRIMARY KEY CLUSTERED 
(
	[DeviceCallsLastAttemptId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DeviceCallsLastNormal]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DeviceCallsLastNormal](
	[CallRecID] [bigint] NOT NULL,
	[DeviceID] [int] NOT NULL,
	[DemoGraphicID] [int] NOT NULL,
	[PhoneNumber] [char](15) NOT NULL,
	[IPAddress] [char](15) NOT NULL,
	[Originator] [char](3) NOT NULL,
	[SessionSummary] [int] NOT NULL,
	[StartTime] [datetime] NOT NULL,
	[EndTime] [datetime] NOT NULL,
	[ElapsedSeconds] [int] NOT NULL,
	[PointsProcessed] [smallint] NULL,
	[PointsDeviceReportsSent] [smallint] NULL,
	[InChargerDeviceID] [int] NOT NULL,
	[AlarmTimeStamp] [datetime] NULL,
	[AlarmStatus] [char](1) NULL,
	[IsLastPointReverseGeocoded] [bit] NOT NULL,
	[ReverseGeocodedPositionRecID] [numeric](18, 0) NULL,
	[ReverseGeocodedAddress] [varchar](50) NULL,
	[ReverseGeocodedCity] [varchar](50) NULL,
	[ReverseGeocodedState] [char](2) NULL,
	[ReverseGeocodedZip] [varchar](9) NULL,
	[UTCStartTime] [datetime] NULL,
	[DeviceCallsLastNormalId] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_DeviceCallsLastNormal] PRIMARY KEY NONCLUSTERED 
(
	[DeviceCallsLastNormalId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [IDX_C_DeviceCallsLastNormal_DeviceIdDemoId]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE CLUSTERED INDEX [IDX_C_DeviceCallsLastNormal_DeviceIdDemoId] ON [dbo].[DeviceCallsLastNormal]
(
	[DeviceID] ASC,
	[DemoGraphicID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DuplicatePositions]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DuplicatePositions](
	[DuplicatePositionId] [bigint] IDENTITY(1,1) NOT NULL,
	[DeviceId] [int] NOT NULL,
	[DemographicId] [int] NOT NULL,
	[PositionTimeStamp] [datetime] NOT NULL,
	[CRC] [bigint] NOT NULL,
	[CallRecId] [bigint] NOT NULL,
	[PointDataEgglet] [varbinary](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Index [CI_DuplicatePositions_DuplicatePositionId]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE CLUSTERED INDEX [CI_DuplicatePositions_DuplicatePositionId] ON [dbo].[DuplicatePositions]
(
	[DuplicatePositionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Events]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Events](
	[EventID] [bigint] IDENTITY(1,1) NOT NULL,
	[DeviceID] [int] NOT NULL,
	[HardwareTypeRecID] [int] NOT NULL,
	[DemographicID] [int] NOT NULL,
	[MTDCallsRecId] [bigint] NULL,
	[Timestamp] [datetime] NOT NULL,
	[HWRuleBitIndex] [int] NOT NULL,
	[StoredTimestamp] [datetime] NOT NULL,
 CONSTRAINT [PK__Events__7944C8708B18322E] PRIMARY KEY CLUSTERED 
(
	[EventID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[InvalidRulesInAlarm]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[InvalidRulesInAlarm](
	[RulesInAlarmRecID] [bigint] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[RulesInAlarmRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[KamiStore]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KamiStore](
	[RecID] [int] IDENTITY(1,1) NOT NULL,
	[DeviceID] [int] NULL,
	[DemographicID] [int] NULL,
	[VoltageBL] [int] NULL,
	[VoltageK] [int] NULL,
	[Voltagediff] [int] NULL,
	[BatteryLowSet] [datetime] NULL,
	[Kamikaze] [datetime] NULL,
	[Minutes] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LacCidLocationsLog]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LacCidLocationsLog](
	[LacCidLocationsLogId] [bigint] IDENTITY(1,1) NOT NULL,
	[ExecutionStart] [datetime] NOT NULL,
	[LacCidsRows] [bigint] NULL,
	[SampleDataLacCidsRows] [bigint] NULL,
	[LacCidLocationsUpdates] [bigint] NULL,
	[LacCidLocationsInserts] [bigint] NULL,
	[ExecutionEnd] [datetime] NULL,
	[SequenceId] [bigint] NULL,
	[Step] [varchar](255) NULL,
 CONSTRAINT [PK_LacCidLocationsLog] PRIMARY KEY CLUSTERED 
(
	[LacCidLocationsLogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LacCidLocationsTraceLog]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LacCidLocationsTraceLog](
	[LacCidLocationsTraceLogId] [bigint] IDENTITY(1,1) NOT NULL,
	[LacCidLocationsLogId] [bigint] NOT NULL,
	[SequenceId] [bigint] NOT NULL,
	[Step] [varchar](255) NULL,
	[ExecutionStart] [datetime] NOT NULL,
	[ExecutionEnd] [datetime] NULL,
 CONSTRAINT [PK_LacCidLocationsTraceLog] PRIMARY KEY CLUSTERED 
(
	[LacCidLocationsTraceLogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LacCids]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LacCids](
	[LacCidRecID] [int] IDENTITY(1,1) NOT NULL,
	[DeviceID] [int] NOT NULL,
	[DemographicID] [int] NOT NULL,
	[TimeStamp] [datetime] NOT NULL,
	[StoredTimeStamp] [datetime] NOT NULL,
	[Longitude] [float] NOT NULL,
	[Latitude] [float] NOT NULL,
	[LAC] [int] NOT NULL,
	[CID] [int] NOT NULL,
	[CellRSSI] [smallint] NOT NULL,
	[CDPDAvailable] [char](1) NULL,
	[CellType] [tinyint] NULL,
	[NID] [int] NULL,
	[MTDDebugRecID] [bigint] NULL,
 CONSTRAINT [PK_LacCids] PRIMARY KEY NONCLUSTERED 
(
	[LacCidRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [IX_LacCids]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [IX_LacCids] ON [dbo].[LacCids]
(
	[LAC] ASC,
	[CID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LastCallCurrentProvider]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LastCallCurrentProvider](
	[LastCallCurrentProviderId] [bigint] IDENTITY(1,1) NOT NULL,
	[CallRecId] [bigint] NULL,
	[DemographicId] [int] NULL,
	[DeviceId] [int] NULL,
	[CurrentProvider] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[LastCallCurrentProviderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LastEvent]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LastEvent](
	[DeviceID] [int] NOT NULL,
	[DemographicID] [int] NOT NULL,
	[HardwareTypeRecID] [int] NOT NULL,
	[HWRuleBitIndex] [int] NOT NULL,
	[EventID] [bigint] NOT NULL,
	[Timestamp] [datetime] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[DeviceID] ASC,
	[DemographicID] ASC,
	[HardwareTypeRecID] ASC,
	[HWRuleBitIndex] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LBS_Positions]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LBS_Positions](
	[LBSPositionRecID] [int] IDENTITY(1,1) NOT NULL,
	[DemographicID] [int] NOT NULL,
	[DeviceID] [int] NOT NULL,
	[TimeStamp] [datetime] NOT NULL,
	[Longitude] [float] NOT NULL,
	[Latitude] [float] NOT NULL,
	[LAC] [int] NOT NULL,
	[CID] [int] NOT NULL,
	[StoredTimeStamp] [datetime] NOT NULL,
	[MTDCallsRecID] [bigint] NOT NULL,
	[DeviceStatus] [int] NOT NULL,
 CONSTRAINT [PK_LBS_Positions] PRIMARY KEY NONCLUSTERED 
(
	[LBSPositionRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MissingPoints]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MissingPoints](
	[PositionRecID] [varchar](255) NOT NULL,
	[DemographicID] [varchar](255) NULL,
	[DeviceID] [varchar](255) NULL,
	[TimeStamp] [varchar](255) NULL,
	[Longitude] [varchar](255) NULL,
	[Latitude] [varchar](255) NULL,
	[Speed] [varchar](255) NULL,
	[Heading] [varchar](255) NULL,
	[Elevation] [varchar](255) NULL,
	[PDOP] [varchar](255) NULL,
	[HDOP] [varchar](255) NULL,
	[VDOP] [varchar](255) NULL,
	[GPSMode] [varchar](255) NULL,
	[SatellitesInView] [varchar](255) NULL,
	[SVN] [varchar](255) NULL,
	[SNR] [varchar](255) NULL,
	[Temperature] [varchar](255) NULL,
	[BatteryVoltage] [varchar](255) NULL,
	[PointStatus] [varchar](255) NULL,
	[GeoRuleGraceMask] [varchar](255) NULL,
	[HWRuleGrace] [varchar](255) NULL,
	[RulesInViolation] [varchar](255) NULL,
	[StoredTimeStamp] [varchar](255) NULL,
	[MTDCallsRecID] [varchar](255) NULL,
	[DeviceStatus] [varchar](255) NULL,
 CONSTRAINT [PK_MissingPoints] PRIMARY KEY CLUSTERED 
(
	[PositionRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTD_ActionLog]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_ActionLog](
	[ActionLogID] [int] IDENTITY(1,1) NOT NULL,
	[AlarmRecID] [numeric](13, 0) NULL,
	[ContactDemoID] [int] NULL,
	[ActionID] [int] NULL,
	[ActionToTake] [int] NULL,
	[ActionPhoneNumber] [varchar](80) NULL,
	[MessageSent] [varchar](255) NULL,
	[ActionStartTime] [datetime] NULL,
	[ActionEndTime] [datetime] NULL,
	[Status] [char](1) NULL,
	[SDCActionStartTime] [datetime] NULL,
	[ActionMsgRecID] [int] NULL,
	[ViolationType] [int] NULL,
	[RuleID] [int] NULL,
 CONSTRAINT [PK_MTD_ActionLog] PRIMARY KEY NONCLUSTERED 
(
	[ActionLogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PS_SemiYearly_MTD_ActionLog]([ActionStartTime])
GO
ALTER TABLE [dbo].[MTD_ActionLog] SET (LOCK_ESCALATION = AUTO)
GO
/****** Object:  Table [dbo].[MTD_Alarms]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_Alarms](
	[AlarmRecID] [numeric](13, 0) IDENTITY(1,1) NOT NULL,
	[DemographicID] [int] NOT NULL,
	[TimeStamp] [datetime] NOT NULL,
	[PointStatus] [int] NOT NULL,
	[RuleID] [int] NOT NULL,
	[Processed] [char](1) NULL,
	[DeviceID] [int] NOT NULL,
	[StoredTimeStamp] [datetime] NULL,
	[HWRule] [int] NULL,
	[RuleStatus] [smallint] NULL,
	[MTDCallsRecID] [bigint] NULL,
	[OneTimeSchedId] [int] NULL,
	[DeviceStatus] [int] NULL,
	[ActionStatus] [int] NULL,
	[SuspendTimestamp] [datetime] NULL,
	[ZoneRecID] [int] NULL,
	[AlcoholTestID] [int] NULL,
	[HwRuleBitIndex] [int] NULL,
	[AlcoholPictureMatchHistoryID] [int] NULL,
	[DeviceStatus2] [int] NULL,
	[RenotificationTimestamp] [datetime] NULL,
	[RenotificationCount] [int] NULL,
	[AlarmType] [tinyint] NOT NULL,
	[EventRecID] [int] NULL,
 CONSTRAINT [	PK_MTD_Alarms] PRIMARY KEY NONCLUSTERED 
(
	[AlarmRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PS_SemiYearly_MTD_Alarms_1]([TimeStamp])
GO
ALTER TABLE [dbo].[MTD_Alarms] SET (LOCK_ESCALATION = AUTO)
GO
/****** Object:  Index [IX_MTD_Alarms_CreateGmt]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [IX_MTD_Alarms_CreateGmt] ON [dbo].[MTD_Alarms]
(
	[TimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_SemiYearly_MTD_Alarms_1]([TimeStamp])
GO
/****** Object:  Table [dbo].[MTD_Debug_RecId]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_Debug_RecId](
	[MtdDebugRecID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTD_EMailMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_EMailMessages](
	[EmailRecID] [int] IDENTITY(1,1) NOT NULL,
	[Status] [varchar](80) NULL,
	[OffenderDemoID] [int] NULL,
	[ContactDemoID] [int] NULL,
	[RuleID] [int] NULL,
	[TimeOfViolation] [datetime] NULL,
	[DateCreated] [datetime] NULL,
	[DateSent] [datetime] NULL,
	[ContactName] [varchar](40) NULL,
	[ContactPhone] [varchar](20) NULL,
	[ContactAgencyName] [varchar](40) NULL,
	[ContactEmailAddress] [varchar](100) NULL,
	[OffenderName] [varchar](40) NULL,
	[OffenderPhone] [varchar](20) NULL,
	[OffenderAddress] [varchar](40) NULL,
	[OffenderCity] [varchar](25) NULL,
	[OffenderState] [char](2) NULL,
	[OffenderZip] [varchar](10) NULL,
	[RuleName] [varchar](50) NULL,
	[RuleAddress] [varchar](40) NULL,
	[RuleCity] [varchar](25) NULL,
	[RuleState] [char](2) NULL,
	[RuleZip] [varchar](10) NULL,
	[ModifiedStatus] [varchar](30) NULL,
	[SendAttempts] [int] NULL,
	[AssignedPO] [varchar](40) NULL,
	[RuleStatus] [int] NULL,
	[ReplyKey] [varchar](15) NULL,
	[MessageId] [varchar](100) NULL,
	[ID1Label] [varchar](25) NULL,
	[ID1Data] [varchar](25) NULL,
	[ID2Label] [varchar](25) NULL,
	[ID2Data] [varchar](25) NULL,
	[AssignedPoPhone] [varchar](10) NULL,
	[AssignedPoFax] [varchar](10) NULL,
	[AssignedPoEMail] [varchar](75) NULL,
	[AcknowledgeID] [char](10) NULL,
	[AcknowledgeTime] [datetime] NULL,
	[AcknowledgeAttempts] [tinyint] NULL,
	[ContactType] [char](1) NULL,
	[AcknowledgeStatus] [char](1) NULL,
	[AlarmRecId] [numeric](13, 0) NULL,
	[FirstSendAttemptTimestamp] [datetime] NULL,
	[ActionType] [int] NULL,
	[NotificationOptions] [int] NULL,
	[EscalationUtcTimestamp] [datetime] NULL,
	[DevicePhoneNumber] [varchar](20) NULL,
	[ZoneRecID] [int] NULL,
	[ZoneName] [varchar](50) NULL,
	[AlcoholTestID] [int] NULL,
	[PictureMatchHistoryID] [int] NULL,
	[DetailLinkURL] [varchar](255) NULL,
	[OffenderCell] [varchar](20) NULL,
	[DevicePhoneNumber2] [varchar](20) NULL,
 CONSTRAINT [PK_MTD_EMailMessages] PRIMARY KEY NONCLUSTERED 
(
	[EmailRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PS_SemiYearly_MTD_EMailMessages]([DateCreated])
GO
ALTER TABLE [dbo].[MTD_EMailMessages] SET (LOCK_ESCALATION = AUTO)
GO
/****** Object:  Index [IX_MTD_EMailMessages_DateCreated]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [IX_MTD_EMailMessages_DateCreated] ON [dbo].[MTD_EMailMessages]
(
	[DateCreated] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_SemiYearly_MTD_EMailMessages]([DateCreated])
GO
/****** Object:  Table [dbo].[MTD_EMailMessages_Test]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_EMailMessages_Test](
	[EmailRecID] [int] IDENTITY(1,1) NOT NULL,
	[Status] [varchar](80) NULL,
	[OffenderDemoID] [int] NULL,
	[ContactDemoID] [int] NULL,
	[RuleID] [int] NULL,
	[TimeOfViolation] [datetime] NULL,
	[DateCreated] [datetime] NULL,
	[DateSent] [datetime] NULL,
	[ContactName] [varchar](40) NULL,
	[ContactPhone] [varchar](20) NULL,
	[ContactAgencyName] [varchar](40) NULL,
	[ContactEmailAddress] [varchar](100) NULL,
	[OffenderName] [varchar](40) NULL,
	[OffenderPhone] [varchar](20) NULL,
	[OffenderAddress] [varchar](40) NULL,
	[OffenderCity] [varchar](25) NULL,
	[OffenderState] [char](2) NULL,
	[OffenderZip] [varchar](10) NULL,
	[RuleName] [varchar](50) NULL,
	[RuleAddress] [varchar](40) NULL,
	[RuleCity] [varchar](25) NULL,
	[RuleState] [char](2) NULL,
	[RuleZip] [varchar](10) NULL,
	[ModifiedStatus] [varchar](30) NULL,
	[SendAttempts] [int] NULL,
	[AssignedPO] [varchar](40) NULL,
	[RuleStatus] [int] NULL,
	[ReplyKey] [varchar](15) NULL,
	[MessageId] [varchar](100) NULL,
	[ID1Label] [varchar](25) NULL,
	[ID1Data] [varchar](25) NULL,
	[ID2Label] [varchar](25) NULL,
	[ID2Data] [varchar](25) NULL,
	[AssignedPoPhone] [varchar](10) NULL,
	[AssignedPoFax] [varchar](10) NULL,
	[AssignedPoEMail] [varchar](75) NULL,
	[AcknowledgeID] [char](10) NULL,
	[AcknowledgeTime] [datetime] NULL,
	[AcknowledgeAttempts] [tinyint] NULL,
	[ContactType] [char](1) NULL,
	[AcknowledgeStatus] [char](1) NULL,
	[AlarmRecId] [numeric](13, 0) NULL,
	[FirstSendAttemptTimestamp] [datetime] NULL,
	[ActionType] [int] NULL,
	[NotificationOptions] [int] NULL,
	[EscalationUtcTimestamp] [datetime] NULL,
	[DevicePhoneNumber] [varchar](20) NULL,
	[ZoneRecID] [int] NULL,
	[ZoneName] [varchar](50) NULL,
	[AlcoholTestID] [int] NULL,
	[PictureMatchHistoryID] [int] NULL,
	[DetailLinkURL] [varchar](255) NULL,
	[OffenderCell] [varchar](20) NULL,
	[DevicePhoneNumber2] [varchar](20) NULL,
 CONSTRAINT [PK_MTD_EMailMessages_Test] PRIMARY KEY NONCLUSTERED 
(
	[EmailRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTD_FaxMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_FaxMessages](
	[FaxRecID] [int] IDENTITY(1,1) NOT NULL,
	[Status] [varchar](80) NULL,
	[OffenderDemoID] [int] NULL,
	[ContactDemoID] [int] NULL,
	[RuleID] [int] NULL,
	[TimeOfViolation] [datetime] NULL,
	[DateCreated] [datetime] NULL,
	[DateSent] [datetime] NULL,
	[ContactName] [varchar](40) NULL,
	[ContactPhone] [varchar](20) NULL,
	[ContactAgencyName] [varchar](40) NULL,
	[ContactFaxNumber] [varchar](15) NULL,
	[OffenderName] [varchar](40) NULL,
	[OffenderPhone] [varchar](20) NULL,
	[OffenderAddress] [varchar](40) NULL,
	[OffenderCity] [varchar](25) NULL,
	[OffenderState] [char](2) NULL,
	[OffenderZip] [varchar](10) NULL,
	[RuleName] [varchar](50) NULL,
	[RuleAddress] [varchar](40) NULL,
	[RuleCity] [varchar](25) NULL,
	[RuleState] [char](2) NULL,
	[RuleZip] [varchar](10) NULL,
	[FaxManRecID] [int] NULL,
	[FaxManPageNum] [int] NULL,
	[ModifiedStatus] [varchar](30) NULL,
	[AssignedPO] [varchar](40) NULL,
	[SendAttempts] [int] NULL,
	[RuleStatus] [int] NULL,
	[ID1Label] [varchar](25) NULL,
	[ID1Data] [varchar](25) NULL,
	[ID2Label] [varchar](25) NULL,
	[ID2Data] [varchar](25) NULL,
	[AssignedPoPhone] [varchar](10) NULL,
	[AssignedPoFax] [varchar](10) NULL,
	[AssignedPoEMail] [varchar](50) NULL,
	[AlarmRecId] [numeric](13, 0) NULL,
	[FirstSendAttemptTimestamp] [datetime] NULL,
	[NotificationOptions] [int] NULL,
	[ZoneRecID] [int] NULL,
	[ZoneName] [varchar](50) NULL,
	[AlcoholTestID] [int] NULL,
	[PictureMatchHistoryID] [int] NULL,
 CONSTRAINT [PK_MTD_FaxMessages_temp4] PRIMARY KEY NONCLUSTERED 
(
	[FaxRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTD_FaxMessages_temp2]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_FaxMessages_temp2](
	[FaxRecID] [int] IDENTITY(1,1) NOT NULL,
	[Status] [varchar](80) NULL,
	[OffenderDemoID] [int] NULL,
	[ContactDemoID] [int] NULL,
	[RuleID] [int] NULL,
	[TimeOfViolation] [datetime] NULL,
	[DateCreated] [datetime] NULL,
	[DateSent] [datetime] NULL,
	[ContactName] [varchar](40) NULL,
	[ContactPhone] [varchar](20) NULL,
	[ContactAgencyName] [varchar](40) NULL,
	[ContactFaxNumber] [varchar](15) NULL,
	[OffenderName] [varchar](40) NULL,
	[OffenderPhone] [varchar](20) NULL,
	[OffenderAddress] [varchar](40) NULL,
	[OffenderCity] [varchar](25) NULL,
	[OffenderState] [char](2) NULL,
	[OffenderZip] [varchar](10) NULL,
	[RuleName] [varchar](50) NULL,
	[RuleAddress] [varchar](40) NULL,
	[RuleCity] [varchar](25) NULL,
	[RuleState] [char](2) NULL,
	[RuleZip] [varchar](10) NULL,
	[FaxManRecID] [int] NULL,
	[FaxManPageNum] [int] NULL,
	[ModifiedStatus] [varchar](30) NULL,
	[AssignedPO] [varchar](40) NULL,
	[SendAttempts] [int] NULL,
	[RuleStatus] [int] NULL,
	[ID1Label] [varchar](25) NULL,
	[ID1Data] [varchar](25) NULL,
	[ID2Label] [varchar](25) NULL,
	[ID2Data] [varchar](25) NULL,
	[AssignedPoPhone] [varchar](10) NULL,
	[AssignedPoFax] [varchar](10) NULL,
	[AssignedPoEMail] [varchar](50) NULL,
	[AlarmRecId] [numeric](13, 0) NULL,
	[FirstSendAttemptTimestamp] [datetime] NULL,
	[NotificationOptions] [int] NULL,
	[ZoneRecID] [int] NULL,
	[ZoneName] [varchar](50) NULL,
	[AlcoholTestID] [int] NULL,
	[PictureMatchHistoryID] [int] NULL,
 CONSTRAINT [PK_MTD_FaxMessages_temp3] PRIMARY KEY NONCLUSTERED 
(
	[FaxRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTD_FuturePoints]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_FuturePoints](
	[PositionRecID] [numeric](13, 0) IDENTITY(1,1) NOT NULL,
	[DemographicID] [int] NOT NULL,
	[DeviceID] [int] NOT NULL,
	[TimeStamp] [datetime] NOT NULL,
	[Longitude] [float] NOT NULL,
	[Latitude] [float] NOT NULL,
	[Speed] [smallint] NOT NULL,
	[Heading] [smallint] NOT NULL,
	[Elevation] [int] NOT NULL,
	[PDOP] [real] NOT NULL,
	[HDOP] [real] NOT NULL,
	[VDOP] [real] NOT NULL,
	[GPSMode] [tinyint] NOT NULL,
	[SatellitesInView] [tinyint] NOT NULL,
	[SVN] [binary](12) NOT NULL,
	[SNR] [binary](12) NOT NULL,
	[Temperature] [smallint] NOT NULL,
	[BatteryVoltage] [smallint] NOT NULL,
	[PointStatus] [int] NOT NULL,
	[GeoRuleGraceMask] [int] NOT NULL,
	[HWRuleGrace] [int] NOT NULL,
	[RulesInViolation] [tinyint] NOT NULL,
	[StoredTimeStamp] [datetime] NOT NULL,
	[MTDCallsRecID] [bigint] NULL,
	[DeviceStatus] [int] NULL,
 CONSTRAINT [PK_MTD_FuturePoints] PRIMARY KEY CLUSTERED 
(
	[PositionRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTD_FuturePositionTimestamps_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_FuturePositionTimestamps_DEL](
	[PositionRecID] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTD_LastPositions]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_LastPositions](
	[PositionRecID] [numeric](13, 0) NOT NULL,
	[DemographicID] [int] NOT NULL,
	[DeviceID] [int] NOT NULL,
	[DeviceType] [int] NOT NULL,
	[ReportedSystemType] [int] NOT NULL,
	[TimeStamp] [datetime] NOT NULL,
 CONSTRAINT [PK_MTD_LastPositions2] PRIMARY KEY CLUSTERED 
(
	[DemographicID] ASC,
	[DeviceType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTD_MessageResponses]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_MessageResponses](
	[RecID] [int] IDENTITY(1,1) NOT NULL,
	[DeviceID] [int] NOT NULL,
	[DemographicID] [int] NOT NULL,
	[MessageRecID] [int] NULL,
	[RuleID] [int] NULL,
	[ResponseButton] [tinyint] NOT NULL,
	[DisplayTime] [datetime] NOT NULL,
	[AckTime] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_MTD_MessageResponses_DemographicID_AckTime]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [IX_MTD_MessageResponses_DemographicID_AckTime] ON [dbo].[MTD_MessageResponses]
(
	[DemographicID] ASC,
	[AckTime] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTD_Messages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_Messages](
	[MessageRecID] [int] IDENTITY(1,1) NOT NULL,
	[DemographicID] [int] NOT NULL,
	[DeviceID] [int] NOT NULL,
	[MessageText] [varchar](170) NOT NULL,
	[Button1] [varchar](30) NULL,
	[Button2] [varchar](30) NULL,
	[Button3] [varchar](30) NULL,
	[Button4] [varchar](30) NULL,
	[DateCreated] [datetime] NOT NULL,
	[UserRecID] [int] NOT NULL,
	[DeliveryUtcTime] [datetime] NULL,
	[ActualDeliveryUtcTime] [datetime] NULL,
	[AcknowledgeUtcTime] [datetime] NULL,
	[DisplayTime] [datetime] NULL,
	[KeyPressed] [tinyint] NULL,
 CONSTRAINT [PK_MTD_Messages] PRIMARY KEY NONCLUSTERED 
(
	[MessageRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [IX_MTD_Messages_DemographicId_AcknowledgeUTCTime]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [IX_MTD_Messages_DemographicId_AcknowledgeUTCTime] ON [dbo].[MTD_Messages]
(
	[DemographicID] ASC,
	[AcknowledgeUtcTime] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTD_PagerMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_PagerMessages](
	[PagerMessageRecID] [int] IDENTITY(1,1) NOT NULL,
	[PagerRecID] [int] NOT NULL,
	[Message] [varchar](255) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateSent] [datetime] NULL,
	[OffenderDemoID] [int] NULL,
	[ContactDemoID] [int] NULL,
	[RuleID] [int] NULL,
	[ModifiedStatus] [varchar](30) NULL,
	[Status] [varchar](80) NULL,
	[TimeOfViolation] [datetime] NULL,
	[SendAttempts] [int] NULL,
	[AcknowledgeID] [char](10) NULL,
	[AcknowledgeTime] [datetime] NULL,
	[AcknowledgeAttempts] [tinyint] NULL,
	[ContactType] [char](1) NULL,
	[AcknowledgeStatus] [char](1) NULL,
	[RuleName] [varchar](50) NULL,
	[ContactName] [varchar](40) NULL,
	[OffenderName] [varchar](50) NULL,
	[RuleStatus] [int] NULL,
	[AlarmRecId] [numeric](13, 0) NULL,
	[FirstSendAttemptTimestamp] [datetime] NULL,
	[NotificationOptions] [int] NULL,
	[EscalationUtcTimestamp] [datetime] NULL,
	[ZoneRecID] [int] NULL,
	[ZoneName] [varchar](50) NULL,
 CONSTRAINT [PK_MTD_PagerMessages] PRIMARY KEY NONCLUSTERED 
(
	[PagerMessageRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[MTD_PagerMessages] SET (LOCK_ESCALATION = AUTO)
GO
/****** Object:  Table [dbo].[MTD_PositionCounts]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_PositionCounts](
	[MTD_PositionCountsRecID] [int] IDENTITY(1,1) NOT NULL,
	[OffenderID] [int] NOT NULL,
	[PositionDate] [datetime] NOT NULL,
	[PositionCount] [int] NOT NULL,
 CONSTRAINT [PK_MTD_PositionCountsRecID] PRIMARY KEY NONCLUSTERED 
(
	[MTD_PositionCountsRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [IX_MTD_PositionCounts_OffenderID_PositionDate]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [IX_MTD_PositionCounts_OffenderID_PositionDate] ON [dbo].[MTD_PositionCounts]
(
	[OffenderID] ASC,
	[PositionDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTD_Positions_Temp]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_Positions_Temp](
	[PositionRecID] [numeric](13, 0) IDENTITY(1,1) NOT NULL,
	[DemographicID] [int] NOT NULL,
	[DeviceID] [int] NOT NULL,
	[TimeStamp] [datetime] NOT NULL,
	[Longitude] [float] NOT NULL,
	[Latitude] [float] NOT NULL,
	[Speed] [smallint] NOT NULL,
	[Heading] [smallint] NOT NULL,
	[Elevation] [int] NOT NULL,
	[PDOP] [real] NOT NULL,
	[HDOP] [real] NOT NULL,
	[VDOP] [real] NOT NULL,
	[GPSMode] [tinyint] NOT NULL,
	[SatellitesInView] [tinyint] NOT NULL,
	[SVN] [binary](12) NOT NULL,
	[SNR] [binary](12) NOT NULL,
	[Temperature] [smallint] NOT NULL,
	[BatteryVoltage] [smallint] NOT NULL,
	[PointStatus] [int] NOT NULL,
	[GeoRuleGraceMask] [int] NOT NULL,
	[HWRuleGrace] [int] NOT NULL,
	[RulesInViolation] [tinyint] NOT NULL,
	[StoredTimeStamp] [datetime] NOT NULL,
	[MTDCallsRecID] [bigint] NULL,
	[DeviceStatus] [int] NULL,
	[DeviceStatus2] [int] NULL,
 CONSTRAINT [PK_MTD_Positions] PRIMARY KEY NONCLUSTERED 
(
	[PositionRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PS_SemiYearly_MTD_Positions]([TimeStamp])
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] SET (LOCK_ESCALATION = AUTO)
GO
/****** Object:  Index [PositionQryIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [PositionQryIDX] ON [dbo].[MTD_Positions_Temp]
(
	[TimeStamp] ASC,
	[DemographicID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_SemiYearly_MTD_Positions]([TimeStamp])
GO
/****** Object:  Table [dbo].[MTD_PositionsMissed]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_PositionsMissed](
	[PositionRecID] [varchar](255) NOT NULL,
	[DemographicID] [varchar](255) NULL,
	[DeviceID] [varchar](255) NULL,
	[TimeStamp] [varchar](255) NULL,
	[Longitude] [varchar](255) NULL,
	[Latitude] [varchar](255) NULL,
	[Speed] [varchar](255) NULL,
	[Heading] [varchar](255) NULL,
	[Elevation] [varchar](255) NULL,
	[PDOP] [varchar](255) NULL,
	[HDOP] [varchar](255) NULL,
	[VDOP] [varchar](255) NULL,
	[GPSMode] [varchar](255) NULL,
	[SatellitesInView] [varchar](255) NULL,
	[SVN] [varchar](255) NULL,
	[SNR] [varchar](255) NULL,
	[Temperature] [varchar](255) NULL,
	[BatteryVoltage] [varchar](255) NULL,
	[PointStatus] [varchar](255) NULL,
	[GeoRuleGraceMask] [varchar](255) NULL,
	[HWRuleGrace] [varchar](255) NULL,
	[RulesInViolation] [varchar](255) NULL,
	[StoredTimeStamp] [varchar](255) NULL,
	[MTDCallsRecID] [varchar](255) NULL,
	[DeviceStatus] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTD_RulesInAlarm_RecId]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_RulesInAlarm_RecId](
	[RulesInAlarmRecID] [bigint] NOT NULL,
 CONSTRAINT [PK_MTD_RulesInAlarm_RecId] PRIMARY KEY CLUSTERED 
(
	[RulesInAlarmRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTD_VoiceMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTD_VoiceMessages](
	[VoiceCallRecID] [int] IDENTITY(1,1) NOT NULL,
	[Status] [varchar](80) NULL,
	[OffenderDemoID] [int] NULL,
	[ContactDemoID] [int] NULL,
	[RuleID] [int] NULL,
	[TimeOfViolation] [datetime] NULL,
	[DateCreated] [datetime] NULL,
	[DateSent] [datetime] NULL,
	[ContactName] [varchar](40) NULL,
	[ContactPhone] [varchar](20) NULL,
	[ContactAgencyName] [varchar](40) NULL,
	[ContactEmailAddress] [varchar](100) NULL,
	[OffenderName] [varchar](40) NULL,
	[OffenderPhone] [varchar](20) NULL,
	[OffenderAddress] [varchar](40) NULL,
	[OffenderCity] [varchar](25) NULL,
	[OffenderState] [char](2) NULL,
	[OffenderZip] [varchar](10) NULL,
	[RuleName] [varchar](50) NULL,
	[RuleAddress] [varchar](40) NULL,
	[RuleCity] [varchar](25) NULL,
	[RuleState] [char](2) NULL,
	[RuleZip] [varchar](10) NULL,
	[SdcOperator] [varchar](40) NULL,
	[Successful] [char](1) NULL,
	[ModifiedStatus] [varchar](30) NULL,
	[SendAttempts] [int] NULL,
	[RuleStatus] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [OffenderTimeIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [OffenderTimeIDX] ON [dbo].[MTD_VoiceMessages]
(
	[OffenderDemoID] ASC,
	[TimeOfViolation] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTDActions]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTDActions](
	[MtdActionID] [int] IDENTITY(1,1) NOT NULL,
	[DeviceID] [int] NOT NULL,
	[Action] [varchar](20) NOT NULL,
	[ActionInProgress] [char](1) NOT NULL,
	[Priority] [char](1) NOT NULL,
	[TableRecordID] [int] NOT NULL,
	[CompletedByUserRecID] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateCompleted] [datetime] NULL,
	[DemographicID] [int] NOT NULL,
	[IPAddress] [varchar](15) NOT NULL,
	[CommandNumber] [int] NOT NULL,
	[CommandParam] [varchar](272) NOT NULL,
	[LastContactMethod] [char](1) NOT NULL,
	[SoftwareType] [tinyint] NOT NULL,
 CONSTRAINT [PK_MTDActions] PRIMARY KEY NONCLUSTERED 
(
	[MtdActionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MTDCallsExtension]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTDCallsExtension](
	[CallRecId] [bigint] NOT NULL,
	[DuplicatePositions] [int] NULL,
	[SourceApplication] [varchar](50) NULL,
	[SourceApplicationVersion] [varchar](40) NULL,
	[SourceApplicationHost] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [CIDX_MTDCallsExtension_PrimaryKey]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE CLUSTERED INDEX [CIDX_MTDCallsExtension_PrimaryKey] ON [dbo].[MTDCallsExtension]
(
	[CallRecId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OffenderEventAlarms]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OffenderEventAlarms](
	[OffenderEventAlarmID] [int] IDENTITY(1,1) NOT NULL,
	[DemographicID] [int] NOT NULL,
	[Timestamp] [datetime] NOT NULL,
	[UtcTimestamp] [datetime] NOT NULL,
	[StoredTimestamp] [datetime] NOT NULL,
	[UtcStoredTimestamp] [datetime] NOT NULL,
	[RuleID] [int] NOT NULL,
	[OffenderEventTypeID] [int] NOT NULL,
	[OffenderEventID] [int] NOT NULL,
 CONSTRAINT [PK_OffenderEventAlarms] PRIMARY KEY CLUSTERED 
(
	[OffenderEventAlarmID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OffenderEventNotificationContacts]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OffenderEventNotificationContacts](
	[OffenderEventNotificationContactID] [int] IDENTITY(1,1) NOT NULL,
	[OffenderEventID] [int] NOT NULL,
	[ContactDemographicID] [int] NOT NULL,
	[SendEmail] [bit] NOT NULL,
	[SendText] [bit] NOT NULL,
	[PushNotification] [char](1) NULL,
 CONSTRAINT [PK_OffenderEventNotificationContacts] PRIMARY KEY CLUSTERED 
(
	[OffenderEventNotificationContactID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OffenderPositionsReviewed]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OffenderPositionsReviewed](
	[OffenderPositionsReviewedRecID] [bigint] IDENTITY(1,1) NOT NULL,
	[OffenderID] [int] NOT NULL,
	[PositionRecID] [numeric](13, 0) NOT NULL,
	[UserRecID] [int] NOT NULL,
	[ReviewedDate] [datetime] NOT NULL,
	[AppID] [int] NULL,
	[PositionDate] [datetime] NULL,
	[DeviceType] [int] NOT NULL,
 CONSTRAINT [Orig_PK_OffenderPositionsReviewed] PRIMARY KEY NONCLUSTERED 
(
	[OffenderPositionsReviewedRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PS_SemiYearly]([PositionDate])
GO
ALTER TABLE [dbo].[OffenderPositionsReviewed] SET (LOCK_ESCALATION = AUTO)
GO
/****** Object:  Index [IX_OffenderPositionsReviewed_PositionDate]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [IX_OffenderPositionsReviewed_PositionDate] ON [dbo].[OffenderPositionsReviewed]
(
	[PositionDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PS_SemiYearly]([PositionDate])
GO
/****** Object:  Table [dbo].[OffenderPositionsReviewed_Temp]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OffenderPositionsReviewed_Temp](
	[OffenderPositionsReviewedRecID] [bigint] IDENTITY(1,1) NOT NULL,
	[OffenderID] [int] NOT NULL,
	[PositionRecID] [numeric](13, 0) NOT NULL,
	[UserRecID] [int] NOT NULL,
	[ReviewedDate] [datetime] NOT NULL,
	[AppID] [int] NULL,
	[PositionDate] [datetime] NULL,
	[DeviceType] [int] NOT NULL,
 CONSTRAINT [PK_OffenderPositionsReviewed] PRIMARY KEY NONCLUSTERED 
(
	[OffenderPositionsReviewedRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PS_SemiYearly_OffenderPositionsReviewed]([PositionDate])
GO
ALTER TABLE [dbo].[OffenderPositionsReviewed_Temp] SET (LOCK_ESCALATION = AUTO)
GO
/****** Object:  Index [IX_OffenderPositionsReviewed_PositionDate]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [IX_OffenderPositionsReviewed_PositionDate] ON [dbo].[OffenderPositionsReviewed_Temp]
(
	[PositionDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PS_SemiYearly_OffenderPositionsReviewed]([PositionDate])
GO
/****** Object:  Table [dbo].[OffenderPositionsReviewedCounts]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OffenderPositionsReviewedCounts](
	[OffenderPositionsReviewedCountsRecID] [int] IDENTITY(1,1) NOT NULL,
	[OffenderID] [int] NOT NULL,
	[PositionDate] [datetime] NOT NULL,
	[UserRecID] [int] NOT NULL,
	[ReviewedCount] [int] NOT NULL,
	[AppID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[OffenderPositionsReviewedCountsRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Only_PositionsRecID]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Only_PositionsRecID](
	[PositionRecID] [numeric](13, 0) NOT NULL,
 CONSTRAINT [PK_Only_PositionsRecID] PRIMARY KEY CLUSTERED 
(
	[PositionRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PositionKeys]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PositionKeys](
	[PositionKeyId] [bigint] IDENTITY(1,1) NOT NULL,
	[DeviceId] [int] NOT NULL,
	[DemographicId] [int] NOT NULL,
	[PositionTimeStamp] [datetime] NOT NULL,
	[CRC] [bigint] NOT NULL,
	[CallRecId] [bigint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Index [CIDX_PositionKeys_LookupIndex]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE CLUSTERED INDEX [CIDX_PositionKeys_LookupIndex] ON [dbo].[PositionKeys]
(
	[DeviceId] ASC,
	[DemographicId] ASC,
	[PositionTimeStamp] ASC,
	[CRC] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RemoteEventIDs]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RemoteEventIDs](
	[PositionRecID] [bigint] NOT NULL,
	[RemoteEventID] [varchar](50) NOT NULL,
 CONSTRAINT [PK_RemoteEventIDs] PRIMARY KEY NONCLUSTERED 
(
	[PositionRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_RemoteEventIDs]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [IX_RemoteEventIDs] ON [dbo].[RemoteEventIDs]
(
	[PositionRecID] ASC,
	[RemoteEventID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RIAParams]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RIAParams](
	[RIAParamsRecID] [int] IDENTITY(1,1) NOT NULL,
	[RulesInAlarmRecID] [bigint] NOT NULL,
	[ExtraTx] [int] NULL,
	[ParameterTypeLookupValue] [int] NULL,
	[ParameterValue] [varchar](50) NULL,
	[PositionTimestamp] [datetime] NULL,
 CONSTRAINT [PK_RIAParams] PRIMARY KEY NONCLUSTERED 
(
	[RIAParamsRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [IX_RIAPARAMS_RIARecID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [IX_RIAPARAMS_RIARecID] ON [dbo].[RIAParams]
(
	[RulesInAlarmRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RulesInAlarm]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RulesInAlarm](
	[RulesInAlarmRecID] [bigint] IDENTITY(1,1) NOT NULL,
	[PositionRecID] [numeric](13, 0) NOT NULL,
	[RuleID] [int] NOT NULL,
	[InGrace] [char](1) NOT NULL,
	[HWRule] [int] NULL,
	[RuleStatus] [smallint] NULL,
	[OneTimeSchedId] [int] NULL,
	[ZoneRecID] [int] NULL,
	[HwRuleBitIndex] [int] NULL,
 CONSTRAINT [PK_RulesInAlarm] PRIMARY KEY NONCLUSTERED 
(
	[RulesInAlarmRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [SixMon_04]
) ON [SixMon_04]
GO
/****** Object:  Index [PositionRecID_IDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [PositionRecID_IDX] ON [dbo].[RulesInAlarm]
(
	[PositionRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [SixMon_04]
GO
/****** Object:  Table [dbo].[SMSCarrierMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SMSCarrierMessages](
	[RecID] [int] IDENTITY(1,1) NOT NULL,
	[DeviceID] [int] NOT NULL,
	[Parameter] [varchar](64) NULL,
	[PhoneNumber] [varchar](16) NOT NULL,
	[RequestId] [varchar](100) NULL,
	[DateTimeUTC] [datetime] NULL,
	[Status] [varchar](20) NULL,
	[Message] [varchar](100) NULL,
	[MTD_SMSMessagesRecID] [int] NULL,
	[CallbackIntervalSeconds] [int] NULL,
 CONSTRAINT [PK_SMSCarrierMessages] PRIMARY KEY NONCLUSTERED 
(
	[RecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TMobileTowers]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TMobileTowers](
	[Region] [varchar](50) NULL,
	[SiteID] [varchar](50) NULL,
	[Longitude] [float] NULL,
	[Latitude] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VCommDeviceCalls]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VCommDeviceCalls](
	[RecID] [int] IDENTITY(1,1) NOT NULL,
	[DeviceID] [int] NOT NULL,
	[DemographicID] [int] NOT NULL,
	[CompletedByUserRecID] [int] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateCompleted] [datetime] NULL,
	[DevicePhoneNumber] [varchar](20) NOT NULL,
	[DeviceIPAddress] [varchar](20) NOT NULL,
	[DevicePort] [int] NOT NULL,
	[ContactMethod] [char](1) NOT NULL,
	[ContactAttempts] [tinyint] NOT NULL,
	[LastAttemptTime] [datetime] NOT NULL,
 CONSTRAINT [PK_VCommDeviceCalls] PRIMARY KEY CLUSTERED 
(
	[RecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VCommList]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VCommList](
	[IPAddress] [varchar](15) NOT NULL,
	[ServerName] [varchar](max) NULL,
	[CommSite] [varchar](max) NULL,
	[CommType] [varchar](max) NULL,
	[CommNumber] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[IPAddress] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VCommLoadInfoStats]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VCommLoadInfoStats](
	[VCommLoadinfoStatsRecID] [int] IDENTITY(1,1) NOT NULL,
	[ServerIP] [varchar](18) NOT NULL,
	[ServerName] [varchar](50) NOT NULL,
	[ApplicationName] [varchar](50) NOT NULL,
	[Files] [int] NOT NULL,
	[Points] [int] NOT NULL,
	[Threads] [int] NOT NULL,
	[Errors] [int] NOT NULL,
	[DebugPoints] [int] NOT NULL,
	[Queued] [int] NOT NULL,
	[Egglets] [int] NULL,
	[UTCStartTime] [datetime] NOT NULL,
	[UTCTimeStamp] [datetime] NOT NULL,
	[Retries] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IDX_VCommLoadInfoStats2]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE CLUSTERED INDEX [IDX_VCommLoadInfoStats2] ON [dbo].[VCommLoadInfoStats]
(
	[UTCTimeStamp] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[version_info]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[version_info](
	[Key] [int] IDENTITY(1,1) NOT NULL,
	[ProductVersion] [varchar](50) NOT NULL,
	[SchemaVersion] [varchar](25) NOT NULL,
	[SubSystem] [varchar](50) NOT NULL,
	[User] [varchar](512) NOT NULL,
	[InstallDate] [datetime] NOT NULL,
	[BuildDate] [datetime] NOT NULL,
	[Description] [varchar](512) NOT NULL,
	[UtilityInfo] [varchar](512) NOT NULL,
 CONSTRAINT [PK_version_info] PRIMARY KEY CLUSTERED 
(
	[Key] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_version_info] UNIQUE NONCLUSTERED 
(
	[SchemaVersion] ASC,
	[SubSystem] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [msqta].[ExecutionStat]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [msqta].[ExecutionStat](
	[StatID] [bigint] IDENTITY(1,1) NOT NULL,
	[GroupID] [bigint] NOT NULL,
	[StatType] [tinyint] NOT NULL,
	[IsProfiled] [bit] NOT NULL,
	[ExecutionCount] [bigint] NOT NULL,
	[Showplan] [nvarchar](max) NULL,
	[Stats] [nvarchar](max) NOT NULL,
 CONSTRAINT [PkExecutionStat_StatID] PRIMARY KEY CLUSTERED 
(
	[StatID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [msqta].[MetaData]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [msqta].[MetaData](
	[Property] [nvarchar](50) NOT NULL,
	[Value] [nvarchar](max) NOT NULL,
UNIQUE NONCLUSTERED 
(
	[Property] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [msqta].[QueryOptionGroup]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [msqta].[QueryOptionGroup](
	[GroupID] [bigint] IDENTITY(1,1) NOT NULL,
	[TuningQueryID] [bigint] NOT NULL,
	[QueryOptions] [nvarchar](max) NOT NULL,
	[IsVerified] [bit] NOT NULL,
	[IsDeployed] [bit] NOT NULL,
	[ValidationCompleteDate] [datetime2](7) NULL,
 CONSTRAINT [PkQueryOptionGroup_GroupID] PRIMARY KEY CLUSTERED 
(
	[GroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [msqta].[TuningQuery]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [msqta].[TuningQuery](
	[TuningQueryID] [bigint] IDENTITY(1,1) NOT NULL,
	[QueryID] [bigint] NOT NULL,
	[DatabaseID] [int] NOT NULL,
	[ParentObjectId] [bigint] NULL,
	[QueryHash] [binary](8) NOT NULL,
	[QueryText] [nvarchar](max) NOT NULL,
	[QueryType] [tinyint] NOT NULL,
	[IsParametrized] [bit] NOT NULL,
	[PlanGuide] [nvarchar](max) NULL,
	[Status] [tinyint] NOT NULL,
	[CreateDate] [datetime2](7) NOT NULL,
	[LastModifyDate] [datetime2](7) NOT NULL,
	[ProfileCompleteDate] [datetime2](7) NULL,
	[AnalysisCompleteDate] [datetime2](7) NULL,
	[ExperimentPendingDate] [datetime2](7) NULL,
	[ExperimentCompleteDate] [datetime2](7) NULL,
	[DeployedDate] [datetime2](7) NULL,
	[AbandonedDate] [datetime2](7) NULL,
	[Parameters] [nvarchar](max) NULL,
 CONSTRAINT [PkTuningQuery_TuningQueryID] PRIMARY KEY CLUSTERED 
(
	[TuningQueryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [msqta].[TuningSession]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [msqta].[TuningSession](
	[TuningSessionID] [int] IDENTITY(1,1) NOT NULL,
	[DatabaseID] [int] NOT NULL,
	[Name] [nvarchar](300) NULL,
	[Description] [nvarchar](400) NULL,
	[Status] [tinyint] NOT NULL,
	[CreateDate] [datetime2](7) NOT NULL,
	[LastModifyDate] [datetime2](7) NOT NULL,
	[BaselineEndDate] [datetime2](7) NOT NULL,
	[UpgradeDate] [datetime2](7) NOT NULL,
	[TargetCompatLevel] [int] NOT NULL,
	[WorkloadDurationDays] [int] NOT NULL,
 CONSTRAINT [PkTuningSession_TuningSessionID] PRIMARY KEY CLUSTERED 
(
	[TuningSessionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [msqta].[TuningSession_TuningQuery]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [msqta].[TuningSession_TuningQuery](
	[TuningSessionID] [int] NOT NULL,
	[TuningQueryID] [bigint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Index [ix_cluster_stops]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [ix_cluster_stops] ON [Association].[Stops]
(
	[DemographicId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_Monthly_MTD_01]([EndTimeStamp])
GO
/****** Object:  Index [ix_Demo_Distance_Time_incl]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [ix_Demo_Distance_Time_incl] ON [Association].[Stops]
(
	[DemographicId] ASC,
	[DistanceInFeet] ASC,
	[TimeInMinutes] ASC
)
INCLUDE([StopId],[StopGeography],[Latitude],[Longitude],[TIMESTAMP],[EndTimeStamp],[StopStatus],[PositionRecId]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_Monthly_MTD_01]([EndTimeStamp])
GO
/****** Object:  Index [ix_Demo_Distance_Time_status_incl]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [ix_Demo_Distance_Time_status_incl] ON [Association].[Stops]
(
	[DemographicId] ASC,
	[DistanceInFeet] ASC,
	[TimeInMinutes] ASC,
	[TIMESTAMP] ASC,
	[EndTimeStamp] ASC,
	[StopStatus] ASC
)
INCLUDE([StopId],[StopGeography],[Latitude],[Longitude],[PositionRecId]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_Monthly_MTD_01]([EndTimeStamp])
GO
/****** Object:  Index [ix_Endtimestamp]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [ix_Endtimestamp] ON [Association].[Stops]
(
	[EndTimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_Monthly_MTD_01]([EndTimeStamp])
GO
/****** Object:  Index [ix_stops_by_demo_and_status]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [ix_stops_by_demo_and_status] ON [Association].[Stops]
(
	[DemographicId] ASC,
	[DistanceInFeet] ASC,
	[TimeInMinutes] ASC
)
INCLUDE([TIMESTAMP]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_Monthly_MTD_01]([EndTimeStamp])
GO
/****** Object:  Index [ix_stops_by_demo_and_time]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [ix_stops_by_demo_and_time] ON [Association].[Stops]
(
	[DemographicId] ASC,
	[TIMESTAMP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_Monthly_MTD_01]([EndTimeStamp])
GO
/****** Object:  Index [IDX_BaseUnitLocations_CallRecId]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IDX_BaseUnitLocations_CallRecId] ON [dbo].[BaseUnitLocations]
(
	[CallRecId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_CallCurrentProvider_CallRecId]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IDX_CallCurrentProvider_CallRecId] ON [dbo].[CallCurrentProvider]
(
	[CallRecId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CenturionCalls_DemographicID ]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_CenturionCalls_DemographicID ] ON [dbo].[CenturionCalls]
(
	[DemographicID] ASC
)
INCLUDE([SignOnLocalDateTime]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CenturionCalls_LogSignOffID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_CenturionCalls_LogSignOffID] ON [dbo].[CenturionCalls]
(
	[LogSignOffID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_DCCCalls_DCCServer]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_DCCCalls_DCCServer] ON [dbo].[DCCCalls]
(
	[DCCServer] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_DCCCalls_DeviceID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_DCCCalls_DeviceID] ON [dbo].[DCCCalls]
(
	[DeviceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_DCCCalls_StoredTimestamp]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_DCCCalls_StoredTimestamp] ON [dbo].[DCCCalls]
(
	[StoredTimestamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ProcessedFailed]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_ProcessedFailed] ON [dbo].[DCCCallsEggFiles]
(
	[Processed] ASC,
	[Failed] ASC
)
INCLUDE([DCCCallId]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [DemoDeviceID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [DemoDeviceID] ON [dbo].[DeviceCallsLastAttempt]
(
	[DemoGraphicID] ASC,
	[DeviceID] ASC
)
INCLUDE([CallRecID],[SessionSummary],[EndTime]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_DeviceCallsLastAttempt_DemoIDDeviceID_I]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_DeviceCallsLastAttempt_DemoIDDeviceID_I] ON [dbo].[DeviceCallsLastAttempt]
(
	[DemoGraphicID] ASC,
	[DeviceID] ASC
)
INCLUDE([CallRecID],[EndTime],[SessionSummary]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_DeviceCallsLastNormal_CallTecIdDeviceIdDemoIdStartTimeEndTimeAlarmTimestamp]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_DeviceCallsLastNormal_CallTecIdDeviceIdDemoIdStartTimeEndTimeAlarmTimestamp] ON [dbo].[DeviceCallsLastNormal]
(
	[CallRecID] ASC,
	[DeviceID] ASC,
	[DemoGraphicID] ASC,
	[StartTime] ASC,
	[EndTime] ASC,
	[AlarmTimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_DeviceCallsLastNormal_DemoIDDeviceID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_DeviceCallsLastNormal_DemoIDDeviceID] ON [dbo].[DeviceCallsLastNormal]
(
	[DemoGraphicID] ASC,
	[DeviceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_DeviceCallsLastNormal_UTCStartTime]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_DeviceCallsLastNormal_UTCStartTime] ON [dbo].[DeviceCallsLastNormal]
(
	[UTCStartTime] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_DeviceCallsLastNormal]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_DeviceCallsLastNormal] ON [dbo].[DeviceCallsLastNormal]
(
	[DemoGraphicID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_DeviceCallsLastNormal_IsLastPointReverseGeocoded]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_DeviceCallsLastNormal_IsLastPointReverseGeocoded] ON [dbo].[DeviceCallsLastNormal]
(
	[AlarmStatus] ASC,
	[IsLastPointReverseGeocoded] ASC
)
INCLUDE([CallRecID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_DeviceCallsLastNormal_ReverseGeocodedPositionRecID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_DeviceCallsLastNormal_ReverseGeocodedPositionRecID] ON [dbo].[DeviceCallsLastNormal]
(
	[ReverseGeocodedPositionRecID] ASC
)
INCLUDE([CallRecID],[ReverseGeocodedAddress],[ReverseGeocodedCity],[ReverseGeocodedState],[ReverseGeocodedZip]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_DuplicatePositions_LookupIndex]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_DuplicatePositions_LookupIndex] ON [dbo].[DuplicatePositions]
(
	[DeviceId] ASC,
	[DemographicId] ASC,
	[CallRecId] ASC,
	[PositionTimeStamp] ASC,
	[CRC] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_DuplicatePositions_TimeStampIndex]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_DuplicatePositions_TimeStampIndex] ON [dbo].[DuplicatePositions]
(
	[PositionTimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_LacCids_AnalysisIndex]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_LacCids_AnalysisIndex] ON [dbo].[LacCids]
(
	[CellType] ASC,
	[LAC] ASC,
	[CID] ASC,
	[NID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX__LAC_CID_CDPDAvailable]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX__LAC_CID_CDPDAvailable] ON [dbo].[LacCids]
(
	[LAC] ASC,
	[CID] ASC,
	[CDPDAvailable] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_LastCallCurrentProvider_CallRecId]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IDX_LastCallCurrentProvider_CallRecId] ON [dbo].[LastCallCurrentProvider]
(
	[CallRecId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_LastCallCurrentProvider_DemographicIdDeviceId]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IDX_LastCallCurrentProvider_DemographicIdDeviceId] ON [dbo].[LastCallCurrentProvider]
(
	[DemographicId] ASC,
	[DeviceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_LBS_Positions_DEmoIDTimeStamp]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_LBS_Positions_DEmoIDTimeStamp] ON [dbo].[LBS_Positions]
(
	[DemographicID] ASC,
	[TimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [AlarmProcessedIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [AlarmProcessedIDX] ON [dbo].[MTD_Alarms]
(
	[Processed] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
/****** Object:  Index [AlarmQryIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [AlarmQryIDX] ON [dbo].[MTD_Alarms]
(
	[AlarmRecID] ASC,
	[DemographicID] ASC,
	[TimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [AlarmTimeStampIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [AlarmTimeStampIDX] ON [dbo].[MTD_Alarms]
(
	[TimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_MTD_Alarms_DemoId_Processed_TS_AlarmRecId_DeviceId_StoredTS]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [idx_MTD_Alarms_DemoId_Processed_TS_AlarmRecId_DeviceId_StoredTS] ON [dbo].[MTD_Alarms]
(
	[DemographicID] ASC,
	[Processed] ASC,
	[TimeStamp] ASC,
	[AlarmRecID] ASC,
	[DeviceID] ASC,
	[StoredTimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [MTD_Alarms_RuleID_EventRecID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [MTD_Alarms_RuleID_EventRecID] ON [dbo].[MTD_Alarms]
(
	[RuleID] ASC,
	[EventRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [StatusIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [StatusIDX] ON [dbo].[MTD_EMailMessages]
(
	[Status] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
/****** Object:  Index [ContactTimeOfViolationIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [ContactTimeOfViolationIDX] ON [dbo].[MTD_FaxMessages]
(
	[ContactDemoID] ASC,
	[TimeOfViolation] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
/****** Object:  Index [Date_rule_Fax_OffContinfo]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [Date_rule_Fax_OffContinfo] ON [dbo].[MTD_FaxMessages]
(
	[DateSent] ASC,
	[RuleID] ASC,
	[FaxManRecID] ASC,
	[OffenderDemoID] ASC,
	[ContactDemoID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [FaxStatusIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [FaxStatusIDX] ON [dbo].[MTD_FaxMessages]
(
	[Status] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
/****** Object:  Index [IDX_MTD_FaxMessages_ContactDemoIdDateCreated]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_MTD_FaxMessages_ContactDemoIdDateCreated] ON [dbo].[MTD_FaxMessages]
(
	[ContactDemoID] ASC,
	[DateCreated] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_MTD_FaxMessages_TimeStamp]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_MTD_FaxMessages_TimeStamp] ON [dbo].[MTD_FaxMessages]
(
	[DateCreated] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [OffenderTimeIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [OffenderTimeIDX] ON [dbo].[MTD_FaxMessages]
(
	[OffenderDemoID] ASC,
	[TimeOfViolation] ASC,
	[DateCreated] ASC,
	[DateSent] ASC,
	[FirstSendAttemptTimestamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [ContactTimeOfViolationIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [ContactTimeOfViolationIDX] ON [dbo].[MTD_FaxMessages_temp2]
(
	[ContactDemoID] ASC,
	[TimeOfViolation] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
/****** Object:  Index [Date_rule_Fax_OffContinfo]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [Date_rule_Fax_OffContinfo] ON [dbo].[MTD_FaxMessages_temp2]
(
	[DateSent] ASC,
	[RuleID] ASC,
	[FaxManRecID] ASC,
	[OffenderDemoID] ASC,
	[ContactDemoID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [FaxStatusIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [FaxStatusIDX] ON [dbo].[MTD_FaxMessages_temp2]
(
	[Status] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
/****** Object:  Index [IDX_MTD_FaxMessages_ContactDemoIdDateCreated]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_MTD_FaxMessages_ContactDemoIdDateCreated] ON [dbo].[MTD_FaxMessages_temp2]
(
	[ContactDemoID] ASC,
	[DateCreated] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_MTD_FaxMessages_TimeStamp]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_MTD_FaxMessages_TimeStamp] ON [dbo].[MTD_FaxMessages_temp2]
(
	[DateCreated] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [OffenderTimeIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [OffenderTimeIDX] ON [dbo].[MTD_FaxMessages_temp2]
(
	[OffenderDemoID] ASC,
	[TimeOfViolation] ASC,
	[DateCreated] ASC,
	[DateSent] ASC,
	[FirstSendAttemptTimestamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_LastPositions_DemoIDDeviceID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_LastPositions_DemoIDDeviceID] ON [dbo].[MTD_LastPositions]
(
	[DemographicID] ASC,
	[DeviceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_LastPositions_PositionRecID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_LastPositions_PositionRecID] ON [dbo].[MTD_LastPositions]
(
	[PositionRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_MTD_DemoDisplayTimeDeviceIDRuleID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_MTD_DemoDisplayTimeDeviceIDRuleID] ON [dbo].[MTD_MessageResponses]
(
	[DemographicID] ASC,
	[DisplayTime] ASC,
	[DeviceID] ASC,
	[RuleID] ASC
)
INCLUDE([AckTime]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [PK_MTD_MessageResponses_RecID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [PK_MTD_MessageResponses_RecID] ON [dbo].[MTD_MessageResponses]
(
	[RecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [PK_MTD_Messages_MessageRecId]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [PK_MTD_Messages_MessageRecId] ON [dbo].[MTD_Messages]
(
	[MessageRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [AcknowledgeIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [AcknowledgeIDX] ON [dbo].[MTD_PagerMessages]
(
	[AcknowledgeStatus] ASC,
	[DateSent] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [ContactTimeIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [ContactTimeIDX] ON [dbo].[MTD_PagerMessages]
(
	[ContactDemoID] ASC,
	[DateCreated] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [ContactTimeOfViolationIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [ContactTimeOfViolationIDX] ON [dbo].[MTD_PagerMessages]
(
	[ContactDemoID] ASC,
	[TimeOfViolation] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [Date_rule_Pager_OffContinfo]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [Date_rule_Pager_OffContinfo] ON [dbo].[MTD_PagerMessages]
(
	[DateSent] ASC,
	[RuleID] ASC,
	[PagerMessageRecID] ASC,
	[OffenderDemoID] ASC,
	[ContactDemoID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [DateSentIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [DateSentIDX] ON [dbo].[MTD_PagerMessages]
(
	[DateSent] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_MTD_PagerMessages_OffDemoId_Status_DC_PMRecId_ContDemoId_TOV]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [idx_MTD_PagerMessages_OffDemoId_Status_DC_PMRecId_ContDemoId_TOV] ON [dbo].[MTD_PagerMessages]
(
	[OffenderDemoID] ASC,
	[Status] ASC,
	[DateCreated] ASC,
	[PagerMessageRecID] ASC,
	[ContactDemoID] ASC,
	[TimeOfViolation] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_PageMessages_AlarmRecID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_PageMessages_AlarmRecID] ON [dbo].[MTD_PagerMessages]
(
	[AlarmRecId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_PagerMessages_EscalationUtcTimestamp]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_PagerMessages_EscalationUtcTimestamp] ON [dbo].[MTD_PagerMessages]
(
	[EscalationUtcTimestamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_MTD_PagerMessages_DateCreated]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_MTD_PagerMessages_DateCreated] ON [dbo].[MTD_PagerMessages]
(
	[DateCreated] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_SemiYearly]([DateCreated])
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_PagerMessages_AcknowledgeID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_PagerMessages_AcknowledgeID] ON [dbo].[MTD_PagerMessages]
(
	[AcknowledgeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [OffenderTimeIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [OffenderTimeIDX] ON [dbo].[MTD_PagerMessages]
(
	[OffenderDemoID] ASC,
	[TimeOfViolation] ASC,
	[DateCreated] ASC,
	[DateSent] ASC,
	[FirstSendAttemptTimestamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_SemiYearly]([DateCreated])
GO
/****** Object:  Index [PagerMessagesIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [PagerMessagesIDX] ON [dbo].[MTD_PagerMessages]
(
	[PagerMessageRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [StatusIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [StatusIDX] ON [dbo].[MTD_PagerMessages]
(
	[Status] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_MTD_Positions_TimeStamp]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_MTD_Positions_TimeStamp] ON [dbo].[MTD_Positions]
(
	[TimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PS_SemiYearly]([TimeStamp])
GO
/****** Object:  Index [IDX_MTD_SMSMessages_CreateTime_SendTime]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_MTD_SMSMessages_CreateTime_SendTime] ON [dbo].[MTD_SMSMessages]
(
	[CreateTime] ASC,
	[SendTime] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_MTD_SMSMessages_DemographicId_CreateTime]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [idx_MTD_SMSMessages_DemographicId_CreateTime] ON [dbo].[MTD_SMSMessages]
(
	[DemographicId] ASC,
	[CreateTime] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_MTD_SMSMessages_SendDTS]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_MTD_SMSMessages_SendDTS] ON [dbo].[MTD_SMSMessages]
(
	[StartedSend] ASC,
	[CompletedSend] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
GO
/****** Object:  Index [IDX_MTD_SMSMessages_SMSMessageServiceBatchId]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_MTD_SMSMessages_SMSMessageServiceBatchId] ON [dbo].[MTD_SMSMessages]
(
	[SMSMessageServiceBatchId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
GO
/****** Object:  Index [IDX_MTD_SMSMessages_SMSMessageServiceFetchDate]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_MTD_SMSMessages_SMSMessageServiceFetchDate] ON [dbo].[MTD_SMSMessages]
(
	[SMSMessageServiceFetchDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_MTD_SMSMessages_SMSMessageServiceHostName]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_MTD_SMSMessages_SMSMessageServiceHostName] ON [dbo].[MTD_SMSMessages]
(
	[SMSMessageServiceHostName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_MTD_SMSMessages_Status]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_MTD_SMSMessages_Status] ON [dbo].[MTD_SMSMessages]
(
	[Status] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
GO
/****** Object:  Index [idx_SMSMessages_DeviceId_ReplyTime]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [idx_SMSMessages_DeviceId_ReplyTime] ON [dbo].[MTD_SMSMessages]
(
	[DeviceID] ASC,
	[ReplyTime] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_MTD_SMSMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_MTD_SMSMessages] ON [dbo].[MTD_SMSMessages]
(
	[SendTime] ASC,
	[ReplyTime] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_ReplyTime_SMeth_CSend]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_ReplyTime_SMeth_CSend] ON [dbo].[MTD_SMSMessages]
(
	[ReplyTime] ASC,
	[SendMethod] ASC,
	[CompletedSend] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [VoiceCallRecIDX]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [VoiceCallRecIDX] ON [dbo].[MTD_VoiceMessages]
(
	[VoiceCallRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_MTDActions_Action_CommandNumber_ActionInProgress]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [idx_MTDActions_Action_CommandNumber_ActionInProgress] ON [dbo].[MTDActions]
(
	[Action] ASC,
	[CommandNumber] ASC,
	[ActionInProgress] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_MTDActions_Action_CommandNumber_ActionInProgress_DeviceId]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [idx_MTDActions_Action_CommandNumber_ActionInProgress_DeviceId] ON [dbo].[MTDActions]
(
	[Action] ASC,
	[CommandNumber] ASC,
	[ActionInProgress] ASC,
	[DeviceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_MTDActions_DateCompleted]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [idx_MTDActions_DateCompleted] ON [dbo].[MTDActions]
(
	[DateCompleted] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_MTDActions_DateCreated]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [idx_MTDActions_DateCreated] ON [dbo].[MTDActions]
(
	[DateCreated] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_MTDActions_DemographicID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_MTDActions_DemographicID] ON [dbo].[MTDActions]
(
	[DemographicID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
/****** Object:  Index [IX_MTDActions_DeviceId]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_MTDActions_DeviceId] ON [dbo].[MTDActions]
(
	[DeviceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
/****** Object:  Index [IX_MTDDebug_DebugType]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_MTDDebug_DebugType] ON [dbo].[MTDDebug]
(
	[DebugType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PS_Monthly_MTD_01]([StoredTimeStamp])
GO
/****** Object:  Index [IX_MTDDebug_DeviceID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_MTDDebug_DeviceID] ON [dbo].[MTDDebug]
(
	[DeviceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PS_Monthly_MTD_01]([StoredTimeStamp])
GO
/****** Object:  Index [IX_MTDDebug_TimeStamp]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_MTDDebug_TimeStamp] ON [dbo].[MTDDebug]
(
	[TimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_Monthly_MTD_01]([StoredTimeStamp])
GO
/****** Object:  Index [IX_OffenderPositionsReviewed_MergeQry]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_OffenderPositionsReviewed_MergeQry] ON [dbo].[OffenderPositionsReviewed]
(
	[OffenderID] ASC,
	[PositionRecID] ASC,
	[UserRecID] ASC,
	[AppID] ASC,
	[DeviceType] ASC,
	[PositionDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_OffenderPositionsReviewed_UserRecID_PositionRecID]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_OffenderPositionsReviewed_UserRecID_PositionRecID] ON [dbo].[OffenderPositionsReviewed]
(
	[UserRecID] ASC,
	[PositionRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_PositionKeys_CallRecId]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_PositionKeys_CallRecId] ON [dbo].[PositionKeys]
(
	[CallRecId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_PositionKeys_TimeStampIndex]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_PositionKeys_TimeStampIndex] ON [dbo].[PositionKeys]
(
	[PositionTimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_RulesInAlarm_HWRule_withIncludes]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [idx_RulesInAlarm_HWRule_withIncludes] ON [dbo].[RulesInAlarm]
(
	[HWRule] ASC
)
INCLUDE([RulesInAlarmRecID],[PositionRecID],[RuleID],[InGrace],[RuleStatus],[OneTimeSchedId]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [SixMon_04]
GO
/****** Object:  Index [IX_RulesInAlarm]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_RulesInAlarm] ON [dbo].[RulesInAlarm]
(
	[RuleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [SixMon_04]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_PhoneNumber_Request_DateTimeUTC]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IX_PhoneNumber_Request_DateTimeUTC] ON [dbo].[SMSCarrierMessages]
(
	[PhoneNumber] ASC,
	[RequestId] ASC,
	[DateTimeUTC] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_VCommDeviceCalls]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_VCommDeviceCalls] ON [dbo].[VCommDeviceCalls]
(
	[DeviceID] ASC,
	[DateCreated] ASC,
	[DateCompleted] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_VCommLoadInfoStats1]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE NONCLUSTERED INDEX [IDX_VCommLoadInfoStats1] ON [dbo].[VCommLoadInfoStats]
(
	[ServerName] ASC,
	[UTCTimeStamp] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_Un_TuningSession_DatabaseID_Name]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IDX_Un_TuningSession_DatabaseID_Name] ON [msqta].[TuningSession]
(
	[DatabaseID] ASC,
	[Name] ASC
)
WHERE ([Name] IS NOT NULL)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[DCCCalls] ADD  DEFAULT ((0)) FOR [Processed]
GO
ALTER TABLE [dbo].[DCCCalls] ADD  DEFAULT ((0)) FOR [Failed]
GO
ALTER TABLE [dbo].[DCCCalls] ADD  DEFAULT (getdate()) FOR [StoredTimestamp]
GO
ALTER TABLE [dbo].[DCCCallsEggFiles] ADD  CONSTRAINT [DF_DCCCallsEggFiles_Processed]  DEFAULT ((0)) FOR [Processed]
GO
ALTER TABLE [dbo].[DCCCallsEggFiles] ADD  CONSTRAINT [DF_DCCCallsEggFiles_Failed]  DEFAULT ((0)) FOR [Failed]
GO
ALTER TABLE [dbo].[DCCUnusedEvent] ADD  CONSTRAINT [DF_DCCUnusedEvent_EMSEventTypeID]  DEFAULT ((0)) FOR [EMSEventTypeID]
GO
ALTER TABLE [dbo].[DCCUnusedEvent] ADD  CONSTRAINT [DF_DCCUnusedEvent_EventTypeStamp]  DEFAULT (getdate()) FOR [EventTimestamp]
GO
ALTER TABLE [dbo].[DCCUnusedEvent] ADD  CONSTRAINT [DF_DCCUnusedEvent_StoredTimeStamp]  DEFAULT (getdate()) FOR [StoredTimestamp]
GO
ALTER TABLE [dbo].[DeviceCallsLastAttempt] ADD  CONSTRAINT [DF_DeviceCallsLastAttempt_InChargerDeviceID]  DEFAULT (0) FOR [InChargerDeviceID]
GO
ALTER TABLE [dbo].[DeviceCallsLastNormal] ADD  CONSTRAINT [DF_DeviceCallsLastNormal_InChargerDeviceID]  DEFAULT (0) FOR [InChargerDeviceID]
GO
ALTER TABLE [dbo].[DeviceCallsLastNormal] ADD  CONSTRAINT [DF_DeviceCallsLastNormal_AlarmTimeStamp]  DEFAULT (null) FOR [AlarmTimeStamp]
GO
ALTER TABLE [dbo].[DeviceCallsLastNormal] ADD  DEFAULT ((0)) FOR [IsLastPointReverseGeocoded]
GO
ALTER TABLE [dbo].[Events] ADD  CONSTRAINT [DF__Events__StoredTi__5D80D6A1]  DEFAULT (getdate()) FOR [StoredTimestamp]
GO
ALTER TABLE [dbo].[LacCids] ADD  CONSTRAINT [DF_LBS_Positions_DemographicID]  DEFAULT ((0)) FOR [DemographicID]
GO
ALTER TABLE [dbo].[LacCids] ADD  CONSTRAINT [DF_LBS_Positions_StoredTimeStamp]  DEFAULT (getdate()) FOR [StoredTimeStamp]
GO
ALTER TABLE [dbo].[LacCids] ADD  CONSTRAINT [DF_LacCids_NID]  DEFAULT ((0)) FOR [NID]
GO
ALTER TABLE [dbo].[LBS_Positions] ADD  CONSTRAINT [DF_LBS_Positions_Longitude]  DEFAULT ((0)) FOR [Longitude]
GO
ALTER TABLE [dbo].[LBS_Positions] ADD  CONSTRAINT [DF_LBS_Positions_Latitude]  DEFAULT ((0)) FOR [Latitude]
GO
ALTER TABLE [dbo].[LBS_Positions] ADD  CONSTRAINT [DF_LBS_Positions2_StoredTimeStamp]  DEFAULT (getdate()) FOR [StoredTimeStamp]
GO
ALTER TABLE [dbo].[MTD_Alarms] ADD  CONSTRAINT [	DF_MTD_Alarms_Processed]  DEFAULT ('N') FOR [Processed]
GO
ALTER TABLE [dbo].[MTD_Alarms] ADD  CONSTRAINT [	DF_MTD_Alarms_StoredTimeStamp]  DEFAULT (getdate()) FOR [StoredTimeStamp]
GO
ALTER TABLE [dbo].[MTD_Alarms] ADD  CONSTRAINT [	DF_MTD_Alarms_HWRuleGrace]  DEFAULT ((0)) FOR [HWRule]
GO
ALTER TABLE [dbo].[MTD_Alarms] ADD  CONSTRAINT [	DF_MTD_Alarms_DeviceStatus]  DEFAULT ((0)) FOR [DeviceStatus]
GO
ALTER TABLE [dbo].[MTD_Alarms] ADD  CONSTRAINT [	DF_MTD_Alarms_AlarmType]  DEFAULT ((0)) FOR [AlarmType]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [Longitude]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [Latitude]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [Speed]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [Heading]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [Elevation]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [PDOP]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [HDOP]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [VDOP]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [GPSMode]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [SatellitesInView]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [SVN]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [SNR]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [Temperature]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [BatteryVoltage]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT ((0)) FOR [HWRuleGrace]
GO
ALTER TABLE [dbo].[MTD_FuturePoints] ADD  DEFAULT (getdate()) FOR [StoredTimeStamp]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_Longitude_Orig]  DEFAULT ((0)) FOR [Longitude]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_Latitude_Orig]  DEFAULT ((0)) FOR [Latitude]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_Speed_Orig]  DEFAULT ((0)) FOR [Speed]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_Heading_Orig]  DEFAULT ((0)) FOR [Heading]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_Elevation_Orig]  DEFAULT ((0)) FOR [Elevation]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_PDOP_Orig]  DEFAULT ((0)) FOR [PDOP]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_HDOP_Orig]  DEFAULT ((0)) FOR [HDOP]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_VDOP_Orig]  DEFAULT ((0)) FOR [VDOP]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_GPSMode_Orig]  DEFAULT ((0)) FOR [GPSMode]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_SatellitesInView_Orig]  DEFAULT ((0)) FOR [SatellitesInView]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_SVN_Orig]  DEFAULT ((0)) FOR [SVN]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_SVR_Orig]  DEFAULT ((0)) FOR [SNR]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_Temperature_Orig]  DEFAULT ((0)) FOR [Temperature]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_BatteryVoltage_Orig]  DEFAULT ((0)) FOR [BatteryVoltage]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_HWRuleGraceMask_Orig]  DEFAULT ((0)) FOR [HWRuleGrace]
GO
ALTER TABLE [dbo].[MTD_Positions] ADD  CONSTRAINT [DF_MTD_Positions_StoredTimeStamp_Orig]  DEFAULT (getdate()) FOR [StoredTimeStamp]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_Longitude]  DEFAULT ((0)) FOR [Longitude]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_Latitude]  DEFAULT ((0)) FOR [Latitude]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_Speed]  DEFAULT ((0)) FOR [Speed]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_Heading]  DEFAULT ((0)) FOR [Heading]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_Elevation]  DEFAULT ((0)) FOR [Elevation]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_PDOP]  DEFAULT ((0)) FOR [PDOP]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_HDOP]  DEFAULT ((0)) FOR [HDOP]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_VDOP]  DEFAULT ((0)) FOR [VDOP]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_GPSMode]  DEFAULT ((0)) FOR [GPSMode]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_SatellitesInView]  DEFAULT ((0)) FOR [SatellitesInView]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_SVN]  DEFAULT ((0)) FOR [SVN]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_SVR]  DEFAULT ((0)) FOR [SNR]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_Temperature]  DEFAULT ((0)) FOR [Temperature]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_BatteryVoltage]  DEFAULT ((0)) FOR [BatteryVoltage]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_HWRuleGraceMask]  DEFAULT ((0)) FOR [HWRuleGrace]
GO
ALTER TABLE [dbo].[MTD_Positions_Temp] ADD  CONSTRAINT [DF_MTD_Positions_StoredTimeStamp]  DEFAULT (getdate()) FOR [StoredTimeStamp]
GO
ALTER TABLE [dbo].[MTD_SMSMessages] ADD  CONSTRAINT [DF_MTD_SMSMessages_Action]  DEFAULT (1) FOR [Action]
GO
ALTER TABLE [dbo].[MTD_SMSMessages] ADD  CONSTRAINT [DF_MTD_SMSMessages_CreateTime]  DEFAULT (getdate()) FOR [CreateTime]
GO
ALTER TABLE [dbo].[MTD_SMSMessages] ADD  CONSTRAINT [DF_MTD_SMSMessages_SendMethod_1]  DEFAULT ('E') FOR [SendMethod]
GO
ALTER TABLE [dbo].[MTD_SMSMessages] ADD  CONSTRAINT [DF_MTD_SMSMessages_EmailFormat]  DEFAULT ('N') FOR [EmailFormat]
GO
ALTER TABLE [dbo].[MTD_SMSMessages] ADD  DEFAULT (NULL) FOR [ResponseXML]
GO
ALTER TABLE [dbo].[MTDActions] ADD  CONSTRAINT [DF_MTDActions_ActionInProgress]  DEFAULT ('N') FOR [ActionInProgress]
GO
ALTER TABLE [dbo].[MTDActions] ADD  CONSTRAINT [DF_MTDActions_Priority]  DEFAULT ('2') FOR [Priority]
GO
ALTER TABLE [dbo].[MTDActions] ADD  CONSTRAINT [DF_MTDActions_TableRecordID]  DEFAULT (0) FOR [TableRecordID]
GO
ALTER TABLE [dbo].[MTDActions] ADD  CONSTRAINT [DF_MTDActions_CompletedByUserRecID]  DEFAULT (0) FOR [CompletedByUserRecID]
GO
ALTER TABLE [dbo].[MTDActions] ADD  CONSTRAINT [DF_MTDActions_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[MTDActions] ADD  CONSTRAINT [DF_MTDActions_DemographicID]  DEFAULT (0) FOR [DemographicID]
GO
ALTER TABLE [dbo].[MTDActions] ADD  CONSTRAINT [DF_MTDActions_IPAddress]  DEFAULT ('1.1.1.1') FOR [IPAddress]
GO
ALTER TABLE [dbo].[MTDActions] ADD  CONSTRAINT [DF_MTDActions_CommandNumber]  DEFAULT (0) FOR [CommandNumber]
GO
ALTER TABLE [dbo].[MTDActions] ADD  CONSTRAINT [DF_MTDActions_CommandParam]  DEFAULT ('') FOR [CommandParam]
GO
ALTER TABLE [dbo].[MTDActions] ADD  CONSTRAINT [DF_MTDActions_LastContactMethod]  DEFAULT ('M') FOR [LastContactMethod]
GO
ALTER TABLE [dbo].[MTDActions] ADD  CONSTRAINT [DF_MTDActions_SoftwareType]  DEFAULT (0) FOR [SoftwareType]
GO
ALTER TABLE [dbo].[MTDCalls] ADD  CONSTRAINT [DF_MTDCalls_PointsProcessed]  DEFAULT ((0)) FOR [PointsProcessed]
GO
ALTER TABLE [dbo].[MTDCalls] ADD  CONSTRAINT [DF_MTDCalls_PointsMtdReportsSent]  DEFAULT ((0)) FOR [PointsMtdReportsSent]
GO
ALTER TABLE [dbo].[MTDCallsExtension] ADD  DEFAULT ((0)) FOR [DuplicatePositions]
GO
ALTER TABLE [dbo].[MTDCallsExtension] ADD  DEFAULT ('') FOR [SourceApplication]
GO
ALTER TABLE [dbo].[MTDCallsExtension] ADD  DEFAULT ('') FOR [SourceApplicationVersion]
GO
ALTER TABLE [dbo].[MTDCallsExtension] ADD  DEFAULT ('') FOR [SourceApplicationHost]
GO
ALTER TABLE [dbo].[MTDDebug] ADD  CONSTRAINT [DF_MTDDebug_StoredTimestamp]  DEFAULT (getdate()) FOR [StoredTimeStamp]
GO
ALTER TABLE [dbo].[MTDDebug] ADD  CONSTRAINT [DF_MTDDebug_Debuginfo1]  DEFAULT ((0)) FOR [DebugInfo1]
GO
ALTER TABLE [dbo].[MTDDebug] ADD  CONSTRAINT [DF_MTDDebug_Debuginfo2]  DEFAULT ((0)) FOR [DebugInfo2]
GO
ALTER TABLE [dbo].[MTDDebug] ADD  CONSTRAINT [DF_MTDDebug_Debuginfo3]  DEFAULT ((0)) FOR [DebugInfo3]
GO
ALTER TABLE [dbo].[MTDDebug] ADD  CONSTRAINT [DF_MTDDebug_Debuginfo4]  DEFAULT ((0)) FOR [DebugInfo4]
GO
ALTER TABLE [dbo].[MTDDebug] ADD  CONSTRAINT [DF_MTDDebug_Debuginfo5]  DEFAULT ((0)) FOR [DebugInfo5]
GO
ALTER TABLE [dbo].[MTDDebug] ADD  CONSTRAINT [DF_MTDDebug_Debuginfo6]  DEFAULT ((0)) FOR [DebugInfo6]
GO
ALTER TABLE [dbo].[MTDDebug] ADD  CONSTRAINT [DF_MTDDebug_Debuginfo7]  DEFAULT ((0)) FOR [DebugInfo7]
GO
ALTER TABLE [dbo].[MTDDebug] ADD  CONSTRAINT [DF_MTDDebug_Debuginfo8]  DEFAULT ((0)) FOR [DebugInfo8]
GO
ALTER TABLE [dbo].[OffenderEventAlarms] ADD  CONSTRAINT [DF_OffenderEventAlarms_StoredTimestamp]  DEFAULT (getdate()) FOR [StoredTimestamp]
GO
ALTER TABLE [dbo].[OffenderEventAlarms] ADD  CONSTRAINT [DF_OffenderEventAlarms_UtcStoredTimestamp]  DEFAULT (getutcdate()) FOR [UtcStoredTimestamp]
GO
ALTER TABLE [dbo].[OffenderEventNotificationContacts] ADD  CONSTRAINT [DF_OffenderEventNotificationContacts_SendEmail]  DEFAULT ((0)) FOR [SendEmail]
GO
ALTER TABLE [dbo].[OffenderEventNotificationContacts] ADD  CONSTRAINT [DF_OffenderEventNotificationContacts_SendText]  DEFAULT ((0)) FOR [SendText]
GO
ALTER TABLE [dbo].[VCommDeviceCalls] ADD  CONSTRAINT [DF_VCommDeviceCalls_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[VCommDeviceCalls] ADD  CONSTRAINT [DF_VCommDeviceCalls_DevicePhoneNumber]  DEFAULT ('') FOR [DevicePhoneNumber]
GO
ALTER TABLE [dbo].[VCommDeviceCalls] ADD  CONSTRAINT [DF_VCommDeviceCalls_DeviceIPAddress]  DEFAULT ('') FOR [DeviceIPAddress]
GO
ALTER TABLE [dbo].[VCommDeviceCalls] ADD  CONSTRAINT [DF_VCommDeviceCalls_DevicePort]  DEFAULT (0) FOR [DevicePort]
GO
ALTER TABLE [dbo].[VCommDeviceCalls] ADD  CONSTRAINT [DF_VCommDeviceCalls_ContactAttempts]  DEFAULT (0) FOR [ContactAttempts]
GO
ALTER TABLE [dbo].[VCommDeviceCalls] ADD  CONSTRAINT [DF_VCommDeviceCalls_LastAttemptTime]  DEFAULT (dateadd(hour,(-1),getdate())) FOR [LastAttemptTime]
GO
ALTER TABLE [dbo].[VCommLoadInfoStats] ADD  CONSTRAINT [DF_VCommLIStats_Retries]  DEFAULT ((0)) FOR [Retries]
GO
ALTER TABLE [dbo].[CallCurrentProvider]  WITH CHECK ADD FOREIGN KEY([CallRecId])
REFERENCES [dbo].[MTDCalls] ([CallRecID])
GO
ALTER TABLE [dbo].[DCCCallsEggFiles]  WITH CHECK ADD  CONSTRAINT [FK_DCCCallsEggFiles_DCCCalls] FOREIGN KEY([DCCCallId])
REFERENCES [dbo].[DCCCalls] ([DCCCallId])
GO
ALTER TABLE [dbo].[DCCCallsEggFiles] CHECK CONSTRAINT [FK_DCCCallsEggFiles_DCCCalls]
GO
ALTER TABLE [dbo].[LastCallCurrentProvider]  WITH CHECK ADD FOREIGN KEY([CallRecId])
REFERENCES [dbo].[MTDCalls] ([CallRecID])
GO
ALTER TABLE [msqta].[ExecutionStat]  WITH CHECK ADD  CONSTRAINT [FkExecutionStat_GroupID] FOREIGN KEY([GroupID])
REFERENCES [msqta].[QueryOptionGroup] ([GroupID])
ON DELETE CASCADE
GO
ALTER TABLE [msqta].[ExecutionStat] CHECK CONSTRAINT [FkExecutionStat_GroupID]
GO
ALTER TABLE [msqta].[QueryOptionGroup]  WITH CHECK ADD  CONSTRAINT [FkQueryOptionGroup_TuningQueryID] FOREIGN KEY([TuningQueryID])
REFERENCES [msqta].[TuningQuery] ([TuningQueryID])
ON DELETE CASCADE
GO
ALTER TABLE [msqta].[QueryOptionGroup] CHECK CONSTRAINT [FkQueryOptionGroup_TuningQueryID]
GO
ALTER TABLE [msqta].[TuningSession_TuningQuery]  WITH CHECK ADD  CONSTRAINT [FkTuningSession_TuningQuery_TuningQueryID] FOREIGN KEY([TuningQueryID])
REFERENCES [msqta].[TuningQuery] ([TuningQueryID])
ON DELETE CASCADE
GO
ALTER TABLE [msqta].[TuningSession_TuningQuery] CHECK CONSTRAINT [FkTuningSession_TuningQuery_TuningQueryID]
GO
ALTER TABLE [msqta].[TuningSession_TuningQuery]  WITH CHECK ADD  CONSTRAINT [FkTuningSession_TuningQuery_TuningSessionID] FOREIGN KEY([TuningSessionID])
REFERENCES [msqta].[TuningSession] ([TuningSessionID])
ON DELETE CASCADE
GO
ALTER TABLE [msqta].[TuningSession_TuningQuery] CHECK CONSTRAINT [FkTuningSession_TuningQuery_TuningSessionID]
GO
/****** Object:  StoredProcedure [dbo].[ar_MTD_01_Positions_DeleteByPositionRecId_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ar_MTD_01_Positions_DeleteByPositionRecId_DEL]
@PositionRecId int
AS
DELETE FROM MTD_Positions
WHERE PositionRecId=@PositionRecId
RETURN 

GO
/****** Object:  StoredProcedure [dbo].[ar_MTD_01_Positions_GetXByDate_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ar_MTD_01_Positions_GetXByDate_DEL]
@RowCount int,
@Date datetime
AS
Set Rowcount @RowCount
SELECT PositionRecId
FROM MTD_Positions
WHERE TimeStamp < @Date AND StoredTimeStamp < @Date
ORDER BY TimeStamp
RETURN 

GO
/****** Object:  StoredProcedure [dbo].[arch_purge_MTD_ActionLog]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Elena Roe
-- Create date: 01-13-2015
-- Description:	Purges MTD_ActionLog table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_MTD_ActionLog] AS
	
BEGIN

declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig])

declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 1 

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
RecordsPurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'MTD_ActionLog' and ArchiveDate = @DeleteDate

SET NOCOUNT ON;

--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 5000 

    --Print 'Delay for 5 seconds'
    WAITFOR DELAY '00:00:5'

    --Print 'Deleting'
    
    DELETE
    FROM MTD_ActionLog WITH (ROWLOCK)
    WHERE SDCActionStartTime < @DeleteDate
		
	set @ROWCOUNT = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWCOUNT		
	WHERE TableName = 'MTD_ActionLog' and ArchiveDate = @DeleteDate

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'MTD_ActionLog' and ArchiveDate = @DeleteDate

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'MTD_ActionLog' and ArchiveDate = @DeleteDate


--Print 'Done!'

    
END



GO
/****** Object:  StoredProcedure [dbo].[arch_purge_MTD_Alarms]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		Elena Roe
-- Create date: 01-13-2015
-- Description:	Purges MTD_Alarms table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_MTD_Alarms] AS
	
BEGIN

declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig])

declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 1 

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
RecordsPurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'MTD_Alarms' and ArchiveDate = @DeleteDate

SET NOCOUNT ON;

--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 5000 

    --Print 'Delay for 3 seconds'
    WAITFOR DELAY '00:00:3'

    --Print 'Deleting'
    
    DELETE
    FROM MTD_Alarms WITH (ROWLOCK)
    WHERE TimeStamp < @DeleteDate
		
	set @ROWCOUNT = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWCOUNT
	WHERE TableName = 'MTD_Alarms' and ArchiveDate = @DeleteDate		

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'MTD_Alarms' and ArchiveDate = @DeleteDate


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'MTD_Alarms' and ArchiveDate = @DeleteDate


--Print 'Done!'

    
END





GO
/****** Object:  StoredProcedure [dbo].[arch_purge_MTD_EMailMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Elena Roe
-- Create date: 01-28-2015
-- Description:	Purges MTD_EMailMessages table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_MTD_EMailMessages] AS
	
BEGIN

SET NOCOUNT ON;

CREATE TABLE #MyTempTable
(
   MyPKColumn int NOT NULL,
   PRIMARY KEY CLUSTERED
   (
       MyPKColumn
   )
)

declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig])

declare @morerows int
set @morerows = 1

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
RecordsPurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'MTD_EMailMessages' and ArchiveDate = @DeleteDate

while @morerows = 1
 begin
 set rowcount 0

INSERT INTO #MyTempTable
SELECT top 100000 EmailRecID --change to 5000 and create clustered index
FROM MTD_EmailMessages  WITH (NOLOCK)
where DateCreated < @DeleteDate


declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 1 

--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 5000 

    --Print 'Delay for 3 seconds'
    WAITFOR DELAY '00:00:3'

    --Print 'Deleting'
    
     Delete D WITH (ROWLOCK)  --Use PageLock
     from #MyTempTable AS T
     JOIN MTD_EmailMessages AS D
     ON D.EmailRecId  = T.MyPKColumn

		
	set @ROWCOUNT = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWCOUNT
	WHERE TableName = 'MTD_EMailMessages' and ArchiveDate = @DeleteDate		

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end --end of go_on while loop

truncate table #MyTempTable

  if not exists (select top 1 EmailRecId
  FROM MTD_EmailMessages  WITH (NOLOCK)
  where DateCreated < @DeleteDate)

  set @morerows = 0
end --end of morerows while loop
drop table #MyTempTable


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'MTD_EMailMessages' and ArchiveDate = @DeleteDate


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'MTD_EMailMessages' and ArchiveDate = @DeleteDate


    
END


GO
/****** Object:  StoredProcedure [dbo].[arch_purge_MTD_FaxMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Elena Roe
-- Create date: 02-03-2015
-- Description:	Purges MTD_FaxMessages table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_MTD_FaxMessages] AS
	
BEGIN

declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig])

declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 1 

SET NOCOUNT ON;

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
RecordsPurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'MTD_FaxMessages' and ArchiveDate = @DeleteDate


--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 5000 

    --Print 'Delay for 5 seconds'
    WAITFOR DELAY '00:00:5'

    --Print 'Deleting'
    
    DELETE
    FROM MTD_FaxMessages WITH (ROWLOCK)
    WHERE DateCreated < @DeleteDate
		
	set @ROWCOUNT = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWCOUNT
	WHERE TableName = 'MTD_FaxMessages' and ArchiveDate = @DeleteDate		
		

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'MTD_FaxMessages' and ArchiveDate = @DeleteDate

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'MTD_FaxMessages' and ArchiveDate = @DeleteDate


--Print 'Done!'

    
END



GO
/****** Object:  StoredProcedure [dbo].[arch_purge_MTD_PagerMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Elena Roe
-- Create date: 02-03-2015
-- Description:	Purges MTD_PagerMessages table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_MTD_PagerMessages] AS
	
BEGIN

declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig])

declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 1 

SET NOCOUNT ON;

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
RecordsPurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'MTD_PagerMessages' and ArchiveDate = @DeleteDate


--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 5000 

    --Print 'Delay for 5 seconds'
    WAITFOR DELAY '00:00:5'

    --Print 'Deleting'
    
    DELETE
    FROM MTD_PagerMessages WITH (ROWLOCK)
    WHERE DateCreated < @DeleteDate
		
	set @ROWCOUNT = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWCOUNT
	WHERE TableName = 'MTD_PagerMessages' and ArchiveDate = @DeleteDate		

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'MTD_PagerMessages' and ArchiveDate = @DeleteDate

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'MTD_PagerMessages' and ArchiveDate = @DeleteDate


--Print 'Done!'

    
END




GO
/****** Object:  StoredProcedure [dbo].[arch_purge_MTD_Positions]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO













-- =============================================
-- Author:		Elena Roe
-- Create date: 02-07-2015
-- Description:	Purges MTD_Positions table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_MTD_Positions] AS
	
BEGIN

SET NOCOUNT ON;

CREATE TABLE #MyTempTable
(
   MyPKColumn numeric(13,0) NOT NULL,
   PRIMARY KEY CLUSTERED
   (
       MyPKColumn
   )
)


declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig] with (NOLOCK))

declare @morerows int
set @morerows = 1

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
Recordspurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate

while @morerows = 1
 begin
 set rowcount 0

INSERT INTO #MyTempTable
SELECT TOP 100000 Archive.dbo.Only_PositionsRecID.PositionRecID
FROM Archive.dbo.Only_PositionsRecID with (NOLOCK) INNER JOIN MTD_Positions with (NOLOCK)
ON Archive.dbo.Only_PositionsRecID.PositionRecID = MTD_Positions.PositionRecID
OPTION (MAXDOP  1)

declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 0 

--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 50000 

    --Print 'Delay for 4 seconds'
    WAITFOR DELAY '00:00:4'
	--'00:00:2'
    --Print 'Deleting'
    
   Delete D WITH (ROWLOCK)
	from #MyTempTable AS T
     JOIN MTD_Positions AS D
         ON D.PositionRecId = T.MyPKColumn

	 		
	set @ROWCOUNT = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWCOUNT
	WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate		

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end --end of go_on while loop

truncate table #MyTempTable

  
    If not exists (SELECT TOP 1 Archive.dbo.Only_PositionsRecID.PositionRecID
		FROM Archive.dbo.Only_PositionsRecID with (NOLOCK) INNER JOIN MTD_Positions with (NOLOCK)
        ON Archive.dbo.Only_PositionsRecID.PositionRecID = MTD_Positions.PositionRecID)
		set @morerows = 0
 
end --end of morerows while loop
drop table #MyTempTable


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate


    
END




GO
/****** Object:  StoredProcedure [dbo].[arch_purge_MTD_Positions_BAK]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO













-- =============================================
-- Author:		Elena Roe
-- Create date: 02-07-2015
-- Description:	Purges MTD_Positions table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_MTD_Positions_BAK] AS
	
BEGIN

SET NOCOUNT ON;

CREATE TABLE #MyTempTable
(
   MyPKColumn numeric(13,0) NOT NULL,
   PRIMARY KEY CLUSTERED
   (
       MyPKColumn
   )
)


declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig] with (NOLOCK))

declare @morerows int
set @morerows = 1

--UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
--set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
--Recordspurged = ISNULL(RecordsPurged, 0)
--WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate

while @morerows = 1
 begin
 set rowcount 0

INSERT INTO #MyTempTable
SELECT TOP 100000 Archive.dbo.Only_PositionsRecID.PositionRecID
FROM Archive.dbo.Only_PositionsRecID with (NOLOCK) INNER JOIN MTD_Positions with (NOLOCK)
ON Archive.dbo.Only_PositionsRecID.PositionRecID = MTD_Positions.PositionRecID
OPTION (MAXDOP  1)

declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 0 

--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 5000 

    --Print 'Delay for 4 seconds'
    WAITFOR DELAY '00:00:4'

    --Print 'Deleting'
    
   Delete D WITH (ROWLOCK)
	from #MyTempTable AS T
     JOIN MTD_Positions AS D
         ON D.PositionRecId = T.MyPKColumn

	 		
	set @ROWCOUNT = @@ROWCOUNT 

	--UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	--set RecordsPurged = RecordsPurged + @ROWCOUNT
	--WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate		

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end --end of go_on while loop

truncate table #MyTempTable

  
    If not exists (SELECT TOP 1 Archive.dbo.Only_PositionsRecID.PositionRecID
		FROM Archive.dbo.Only_PositionsRecID with (NOLOCK) INNER JOIN MTD_Positions with (NOLOCK)
        ON Archive.dbo.Only_PositionsRecID.PositionRecID = MTD_Positions.PositionRecID)
		set @morerows = 0
 
end --end of morerows while loop
drop table #MyTempTable


--UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
--set PurgeEndDate = getdate()
--WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate


--UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
--SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
--WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate


    
END




GO
/****** Object:  StoredProcedure [dbo].[arch_purge_MTD_Positionsv2]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO













-- =============================================
-- Author:		Elena Roe
-- Create date: 02-07-2015
-- Description:	Purges MTD_Positions table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_MTD_Positionsv2] AS
	
BEGIN

SET NOCOUNT ON;

DECLARE @MyTable TABLE (MyPKColumn int)


--CREATE TABLE #MyTempTable
--(
--   MyPKColumn numeric(13,0) NOT NULL,
--   PRIMARY KEY CLUSTERED
--   (
--       MyPKColumn
--   )
--)


declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig] with (NOLOCK))

declare @morerows int
set @morerows = 1

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
Recordspurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate

while @morerows = 1
 begin
 set rowcount 0

INSERT INTO @MyTable
SELECT TOP 100000 Archive.dbo.Only_PositionsRecID.PositionRecID
FROM Archive.dbo.Only_PositionsRecID with (NOLOCK) INNER JOIN MTD_Positions with (NOLOCK)
ON Archive.dbo.Only_PositionsRecID.PositionRecID = MTD_Positions.PositionRecID
OPTION (MAXDOP  1)

declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 0 

--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 5000 

    --Print 'Delay for 4 seconds'
    WAITFOR DELAY '00:00:4'

    --Print 'Deleting'
    
   Delete D WITH (ROWLOCK)
	from @MyTable AS T
     JOIN MTD_Positions AS D
         ON D.PositionRecId = T.MyPKColumn

	 		
	set @ROWCOUNT = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWCOUNT
	WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate		

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end --end of go_on while loop

--truncate table @MyTable

  
    If not exists (SELECT TOP 1 Archive.dbo.Only_PositionsRecID.PositionRecID
		FROM Archive.dbo.Only_PositionsRecID with (NOLOCK) INNER JOIN MTD_Positions with (NOLOCK)
        ON Archive.dbo.Only_PositionsRecID.PositionRecID = MTD_Positions.PositionRecID)
		set @morerows = 0
 
end --end of morerows while loop
--drop table @MyTable


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate


    
END




GO
/****** Object:  StoredProcedure [dbo].[arch_purge_MTD_Positionsv3]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		Elena Roe
-- Create date: 02-04-2015
-- Description:	Purges MTDDebug table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_MTD_Positionsv3] AS
	
BEGIN

SET NOCOUNT ON;

--CREATE TABLE #MyTempTable
--(
--   MyPKColumn bigint NOT NULL,
--   PRIMARY KEY CLUSTERED
--   (
--       MyPKColumn
--   )
--)


--declare @maxrecID   bigint

declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig])

declare @ROWS int 
set @ROWS = 1 

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
RecordsPurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate

while (@ROWS > 0) 
begin 




--declare @go_on int 
--set @go_on = 1 

--declare @ROWCOUNT int 
--set @ROWCOUNT = 1 

--Print 'Begin Delete'

--while @go_on = 1 
--begin 
--    set rowcount 5000 

    --Print 'Delay for 5 seconds'
    WAITFOR DELAY '00:00:5'

    --Print 'Deleting'
    
    Delete Top(10000) [dbo].[vMTD_PositionsToBeDeleted]  --WITH (ROWLOCK) --Use PageLock
    WHERE [Timestamp] < @DeleteDate

	 		
	set @ROWS = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWS
	WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate		

    if (@ROWS<1) 
    --set @go_on = 0 
    set @ROWS = 0 
end --end of go_on while loop

--truncate table #MyTempTable

  
--	If not exists (SELECT TOP 1 PositionRecID
--		FROM dbo.vMTD_Positions_ToBeDeleted)

--  set @morerows = 0
--end --end of morerows while loop
--drop table #MyTempTable


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'MTD_Positions' and ArchiveDate = @DeleteDate


    
END




GO
/****** Object:  StoredProcedure [dbo].[arch_purge_MTDCalls]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		Elena Roe
-- Create date: 01-28-2015
-- Description:	Purges MTDCalls table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_MTDCalls] AS
	
BEGIN

SET NOCOUNT ON;

CREATE TABLE #MyTempTable
(
   MyPKColumn bigint NOT NULL,
   PRIMARY KEY CLUSTERED
   (
       MyPKColumn
   )
)

declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig])

declare @morerows int
set @morerows = 1

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
RecordsPurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'MTDCalls' and ArchiveDate = @DeleteDate

while @morerows = 1
 begin
 set rowcount 0

INSERT INTO #MyTempTable
SELECT top 300000 CallRecID --change to 5000 and create clustered index
FROM MTDCalls  WITH (NOLOCK)
where StartTime < @DeleteDate


declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 1 

--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 5000 

    --Print 'Delay for 5 seconds'
    WAITFOR DELAY '00:00:5'

    --Print 'Deleting'
    
     Delete D WITH (ROWLOCK)  --Use PageLock
     from #MyTempTable AS T
     JOIN MTDCalls AS D
     ON D.CallRecId  = T.MyPKColumn

		
	set @ROWCOUNT = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWCOUNT
	WHERE TableName = 'MTDCalls' and ArchiveDate = @DeleteDate		

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end --end of go_on while loop

truncate table #MyTempTable

  if not exists (select top 1 CallRecId
  FROM MTDCalls  WITH (NOLOCK)
  where StartTIme < @DeleteDate)

  set @morerows = 0
end --end of morerows while loop
drop table #MyTempTable


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'MTDCalls' and ArchiveDate = @DeleteDate


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'MTDCalls' and ArchiveDate = @DeleteDate


    
END



GO
/****** Object:  StoredProcedure [dbo].[arch_purge_MTDCallsv2]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		Elena Roe
-- Create date: 01-28-2015
-- Description:	Purges MTDCalls table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_MTDCallsv2] AS
	
BEGIN

SET NOCOUNT ON;

--CREATE TABLE #MyTempTable
--(
--   MyPKColumn bigint NOT NULL,
--   PRIMARY KEY CLUSTERED
--   (
--       MyPKColumn
--   )
--)

declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig])

declare @ROWS int 
set @ROWS = 1 

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
RecordsPurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'MTDCalls' and ArchiveDate = @DeleteDate

while (@ROWS > 0) 
begin 

--INSERT INTO #MyTempTable
--SELECT top 300000 CallRecID --change to 5000 and create clustered index
--FROM MTDCalls  WITH (NOLOCK)
--where StartTime < @DeleteDate


--declare @go_on int 
--set @go_on = 1 

--declare @ROWCOUNT int 
--set @ROWCOUNT = 1 

----Print 'Begin Delete'

--while @go_on = 1 
--begin 
--    set rowcount 5000 

    --Print 'Delay for 5 seconds'
    WAITFOR DELAY '00:00:5'

    --Print 'Deleting'
    
     Delete TOP(10000)[dbo].[vMTDCallsToBeDeleted] 
	 Where StartTime < @DeleteDate
		
	set @ROWS = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWS
	WHERE TableName = 'MTDCalls' and ArchiveDate = @DeleteDate		

    if (@ROWS<1) 
    --set @go_on = 0 
    set @ROWS = 0 
end --end of go_on while loop

--truncate table #MyTempTable

--  if not exists (select top 1 CallRecId
--  FROM MTDCalls  WITH (NOLOCK)
--  where StartTIme < @DeleteDate)

--  set @morerows = 0
--end --end of morerows while loop
----drop table #MyTempTable


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'MTDCalls' and ArchiveDate = @DeleteDate


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'MTDCalls' and ArchiveDate = @DeleteDate


    
END



GO
/****** Object:  StoredProcedure [dbo].[arch_purge_MTDDebug]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		Elena Roe
-- Create date: 02-04-2015
-- Description:	Purges MTDDebug table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_MTDDebug] AS
	
BEGIN

SET NOCOUNT ON;

CREATE TABLE #MyTempTable
(
   MyPKColumn bigint NOT NULL,
   PRIMARY KEY CLUSTERED
   (
       MyPKColumn
   )
)


--declare @maxrecID   bigint

declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig])

declare @morerows int
set @morerows = 1

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
RecordsPurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'MTDDebug' and ArchiveDate = @DeleteDate

while @morerows = 1
 begin
 set rowcount 0

INSERT INTO #MyTempTable
SELECT TOP 300000 Archive.dbo.MTD_Debug_RecId.MtdDebugRecId
FROM Archive.dbo.MTD_Debug_RecId INNER JOIN mtddebug with (nolock)
ON Archive.dbo.MTD_Debug_RecId.mtddebugrecid = mtddebug.mtddebugrecid


declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 1 

--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 5000 

    --Print 'Delay for 5 seconds'
    WAITFOR DELAY '00:00:5'

    --Print 'Deleting'
    
    Delete D WITH (ROWLOCK) --Use PageLock
    from #MyTempTable AS T
    JOIN MTDDebug AS D
    ON D.MtdDebugRecID = T.MyPKColumn

	 		
	set @ROWCOUNT = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWCOUNT
	WHERE TableName = 'MTDDebug' and ArchiveDate = @DeleteDate		

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end --end of go_on while loop

truncate table #MyTempTable

  
	If not exists (SELECT TOP 1 Archive.dbo.MTD_Debug_RecId.MtdDebugRecId
		FROM Archive.dbo.MTD_Debug_RecId INNER JOIN mtddebug with (nolock)
        ON Archive.dbo.MTD_Debug_RecId.mtddebugrecid = mtddebug.mtddebugrecid)

  set @morerows = 0
end --end of morerows while loop
drop table #MyTempTable


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'MTDDebug' and ArchiveDate = @DeleteDate


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'MTDDebug' and ArchiveDate = @DeleteDate


    
END




GO
/****** Object:  StoredProcedure [dbo].[arch_purge_MTDDebugv2]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		Elena Roe
-- Create date: 02-04-2015
-- Description:	Purges MTDDebug table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_MTDDebugv2] AS
	
BEGIN

SET NOCOUNT ON;

declare  @MyTempTable TABLE
(
   MyPKColumn bigint NOT NULL,
   PRIMARY KEY CLUSTERED
   (
       MyPKColumn
   )
)

--CREATE TABLE #MyTempTable
--(
--   MyPKColumn bigint NOT NULL,
--   PRIMARY KEY CLUSTERED
--   (
--       MyPKColumn
--   )
--)


--declare @maxrecID   bigint

declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig])

declare @morerows int
set @morerows = 1

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
RecordsPurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'MTDDebug' and ArchiveDate = @DeleteDate

while @morerows = 1
 begin
 set rowcount 0

INSERT INTO @MyTempTable
SELECT TOP 10000 Archive.dbo.MTD_Debug_RecId.MtdDebugRecId
FROM Archive.dbo.MTD_Debug_RecId INNER JOIN mtddebug with (nolock)
ON Archive.dbo.MTD_Debug_RecId.mtddebugrecid = mtddebug.mtddebugrecid


declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 1 

--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 5000 

    --Print 'Delay for 5 seconds'
    WAITFOR DELAY '00:00:5'

    --Print 'Deleting'
    
    Delete D WITH (ROWLOCK) --Use PageLock
    from @MyTempTable AS T
    JOIN MTDDebug AS D
    ON D.MtdDebugRecID = T.MyPKColumn

	 		
	set @ROWCOUNT = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWCOUNT
	WHERE TableName = 'MTDDebug' and ArchiveDate = @DeleteDate		

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end --end of go_on while loop

--truncate table #MyTempTable

  
	If not exists (SELECT TOP 1 Archive.dbo.MTD_Debug_RecId.MtdDebugRecId
		FROM Archive.dbo.MTD_Debug_RecId INNER JOIN mtddebug with (nolock)
        ON Archive.dbo.MTD_Debug_RecId.mtddebugrecid = mtddebug.mtddebugrecid)

  set @morerows = 0
end --end of morerows while loop
--drop table #MyTempTable


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'MTDDebug' and ArchiveDate = @DeleteDate


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'MTDDebug' and ArchiveDate = @DeleteDate


    
END




GO
/****** Object:  StoredProcedure [dbo].[arch_purge_MTDDebugV3]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		Elena Roe
-- Create date: 02-04-2015
-- Description:	Purges MTDDebug table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_MTDDebugV3] AS
	
BEGIN

SET NOCOUNT ON;





declare @ROWS int 
set @ROWS = 1 



while (@ROWS > 0) 
begin 


    --Print 'Delay for 5 seconds'
    WAITFOR DELAY '00:00:5'

    --Print 'Deleting'
    
    Delete Top (100000)dbo.vMTDDebug_ToBeDeleted --WITH (ROWLOCK) --Use PageLock
    --WHERE [Timestamp] < @DeleteDate

	 		
	set @ROWS = @@ROWCOUNT 

	

    if (@ROWS<1) 
    --set @go_on = 0 
    set @ROWS = 0 
end --end of go_on while loop




    
END




GO
/****** Object:  StoredProcedure [dbo].[arch_purge_OffenderPositionsReviewed]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO













-- =============================================
-- Author:		Uche Okoye
-- Create date: 01-24-2019
-- Description:	Purges OffenderPositionsReviewed table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_OffenderPositionsReviewed] AS
	
BEGIN

SET NOCOUNT ON;

--CREATE TABLE #MyTempTable
--(
--   MyPKColumn bigint NOT NULL,
--   PRIMARY KEY CLUSTERED
--   (
--       MyPKColumn
--   )
--)

declare  @MyTempTable TABLE
(
   MyPKColumn bigint NOT NULL,
   PRIMARY KEY CLUSTERED
   (
       MyPKColumn
   )
)


declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig] with (NOLOCK))

declare @morerows int
set @morerows = 1

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
Recordspurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'OffenderPositionsReviewed' and ArchiveDate = @DeleteDate

while @morerows = 1
 begin
 set rowcount 0

INSERT INTO @MyTempTable
SELECT TOP 100000 Archive.dbo.Only_OffenderPositionsReviewedRecID.OffenderPositionsReviewedRecID
FROM Archive.dbo.Only_OffenderPositionsReviewedRecID with (NOLOCK) INNER JOIN OffenderPositionsReviewed with (NOLOCK)
ON Archive.dbo.Only_OffenderPositionsReviewedRecID.OffenderPositionsReviewedRecID = OffenderPositionsReviewed.OffenderPositionsReviewedRecID
--OPTION (MAXDOP  1)
OPTION (MERGE JOIN)

declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 0 

--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 50000 

    --Print 'Delay for 4 seconds'
    WAITFOR DELAY '00:00:2'

    --Print 'Deleting'
    
   Delete D WITH (ROWLOCK)
	from @MyTempTable AS T
     JOIN OffenderPositionsReviewed AS D
         ON D.OffenderPositionsReviewedRecID = T.MyPKColumn

	 		
	set @ROWCOUNT = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWCOUNT
	WHERE TableName = 'OffenderPositionsReviewed' and ArchiveDate = @DeleteDate		

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end --end of go_on while loop

--truncate table #MyTempTable

  
    If not exists (SELECT TOP 1 Archive.dbo.Only_OffenderPositionsReviewedRecID.OffenderPositionsReviewedRecID
		FROM Archive.dbo.Only_OffenderPositionsReviewedRecID with (NOLOCK) INNER JOIN OffenderPositionsReviewed with (NOLOCK)
        ON Archive.dbo.Only_OffenderPositionsReviewedRecID.OffenderPositionsReviewedRecID = OffenderPositionsReviewed.OffenderPositionsReviewedRecID)
		set @morerows = 0
 
end --end of morerows while loop
--drop table #MyTempTable


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'OffenderPositionsReviewed' and ArchiveDate = @DeleteDate


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'OffenderPositionsReviewed' and ArchiveDate = @DeleteDate


    
END




GO
/****** Object:  StoredProcedure [dbo].[arch_purge_RulesInAlarm]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- =============================================
-- Author:		Elena Roe
-- Create date: 02-05-2015
-- Description:	Purges RulesInAlarm table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_RulesInAlarm] AS
	
BEGIN

SET NOCOUNT ON;

CREATE TABLE #MyTempTable
(
   MyPKColumn bigint NOT NULL,
   PRIMARY KEY CLUSTERED
   (
       MyPKColumn
   )
)


declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig])

declare @morerows int
set @morerows = 1

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
RecordsPurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'RulesInAlarm' and ArchiveDate = @DeleteDate

while @morerows = 1
 begin
 set rowcount 0

INSERT INTO #MyTempTable
SELECT TOP 50000 Archive.dbo.MTD_RulesInAlarm_RecId.RulesInAlarmRecID
FROM Archive.dbo.MTD_RulesInAlarm_RecId INNER JOIN RulesInAlarm with (nolock)
ON Archive.dbo.MTD_RulesInAlarm_RecId.RulesInAlarmRecID = RulesInAlarm.RulesInAlarmRecID


declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 0 

--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 5000 

    --Print 'Delay for 5 seconds'
    WAITFOR DELAY '00:00:5'

    --Print 'Deleting'
    
    Delete D WITH (ROWLOCK) --Use PageLock
    from #MyTempTable AS T
    JOIN RulesInAlarm AS D
    ON D.RulesInAlarmRecID = T.MyPKColumn

	 		
	set @ROWCOUNT = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWCOUNT
	WHERE TableName = 'RulesInAlarm' and ArchiveDate = @DeleteDate		

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end --end of go_on while loop

truncate table #MyTempTable

  
    if not exists(SELECT TOP 1 Archive.dbo.MTD_RulesInAlarm_RecId.RulesInAlarmRecID
        FROM Archive.dbo.MTD_RulesInAlarm_RecId INNER JOIN RulesInAlarm with (nolock)
        ON Archive.dbo.MTD_RulesInAlarm_RecId.RulesInAlarmRecID = RulesInAlarm.RulesInAlarmRecID)
        set @morerows = 0
 
end --end of morerows while loop
drop table #MyTempTable


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'RulesInAlarm' and ArchiveDate = @DeleteDate


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'RulesInAlarm' and ArchiveDate = @DeleteDate


    
END






GO
/****** Object:  StoredProcedure [dbo].[arch_purge_RulesInAlarmV2]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








-- =============================================
-- Author:		Elena Roe
-- Create date: 02-05-2015
-- Description:	Purges RulesInAlarm table
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_RulesInAlarmV2] AS
	
BEGIN

SET NOCOUNT ON;

declare  @MyTempTable TABLE
(
   MyPKColumn bigint NOT NULL,
   PRIMARY KEY CLUSTERED
   (
       MyPKColumn
   )
)


declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig])

declare @morerows int
set @morerows = 1

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
RecordsPurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'RulesInAlarm' and ArchiveDate = @DeleteDate

while @morerows = 1
 begin
 set rowcount 0

INSERT INTO @MyTempTable
SELECT TOP 50000 Archive.dbo.MTD_RulesInAlarm_RecId.RulesInAlarmRecID
FROM Archive.dbo.MTD_RulesInAlarm_RecId INNER JOIN RulesInAlarm with (nolock)
ON Archive.dbo.MTD_RulesInAlarm_RecId.RulesInAlarmRecID = RulesInAlarm.RulesInAlarmRecID
OPTION (MERGE JOIN)



declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 0 

--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 5000 

    --Print 'Delay for 5 seconds'
    WAITFOR DELAY '00:00:5'

    --Print 'Deleting'
    
    Delete D WITH (ROWLOCK) --Use PageLock
    from @MyTempTable AS T
    JOIN RulesInAlarm AS D
    ON D.RulesInAlarmRecID = T.MyPKColumn

	 		
	set @ROWCOUNT = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWCOUNT
	WHERE TableName = 'RulesInAlarm' and ArchiveDate = @DeleteDate		

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end --end of go_on while loop

--truncate table @MyTempTable

  
    if not exists(SELECT TOP 1 Archive.dbo.MTD_RulesInAlarm_RecId.RulesInAlarmRecID
        FROM Archive.dbo.MTD_RulesInAlarm_RecId INNER JOIN RulesInAlarm with (nolock)
        ON Archive.dbo.MTD_RulesInAlarm_RecId.RulesInAlarmRecID = RulesInAlarm.RulesInAlarmRecID)
        set @morerows = 0
 
end --end of morerows while loop
--drop table @MyTempTable


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'RulesInAlarm' and ArchiveDate = @DeleteDate


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'RulesInAlarm' and ArchiveDate = @DeleteDate

OPTION (KEEPFIXED PLAN)

--OPTION (MAXDOP 1)
    
END






GO
/****** Object:  StoredProcedure [dbo].[arch_purge_TempPositionsRecID]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO














-- =============================================
-- Author:		Mike M
-- Create date: 11-21-2016
-- Description:	Purges MTD_Positions that were perviously purged prior to the Int to Big Int on the production table
--				but were accidently imported into the holding table that replaced the production table, prior to the swap
-- =============================================
CREATE PROCEDURE [dbo].[arch_purge_TempPositionsRecID] AS
	
BEGIN

SET NOCOUNT ON;

CREATE TABLE #MyTempTable
(
   MyPKColumn numeric(13,0) NOT NULL,
   PRIMARY KEY CLUSTERED
   (
       MyPKColumn
   )
)


declare @DeleteDate datetime
set @DeleteDate = (select ArchiveDate from [Archive].[dbo].[ArchiveConfig] with (NOLOCK))

declare @morerows int
set @morerows = 1

UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeStartDate = ISNULL(PurgeStartDate, getdate()),
Recordspurged = ISNULL(RecordsPurged, 0)
WHERE TableName = 'TempPositionsRecID' and ArchiveDate = @DeleteDate

while @morerows = 1
 begin
 set rowcount 0

INSERT INTO #MyTempTable
SELECT TOP 100000 Archive.dbo.TempPositionsRecID.PositionRecID
FROM Archive.dbo.TempPositionsRecID with (NOLOCK) INNER JOIN MTD_Positions with (NOLOCK)
ON Archive.dbo.TempPositionsRecID.PositionRecID = MTD_Positions.PositionRecID
OPTION (MAXDOP  1)

declare @go_on int 
set @go_on = 1 

declare @ROWCOUNT int 
set @ROWCOUNT = 0 

--Print 'Begin Delete'

while @go_on = 1 
begin 
    set rowcount 5000 

    --Print 'Delay for 4 seconds'
    WAITFOR DELAY '00:00:4'

    --Print 'Deleting'
    
   Delete D WITH (ROWLOCK)
	from #MyTempTable AS T
     JOIN MTD_Positions AS D
         ON D.PositionRecId = T.MyPKColumn

	 		
	set @ROWCOUNT = @@ROWCOUNT 

	UPDATE Archive.dbo.MTD_01_ArchivePurgeHistory
	set RecordsPurged = RecordsPurged + @ROWCOUNT
	WHERE TableName = 'TempPositionsRecID' and ArchiveDate = @DeleteDate		

    if (@rowcount<1) 
    set @go_on = 0 
    set rowcount 0 
end --end of go_on while loop

truncate table #MyTempTable

  
    If not exists (SELECT TOP 1 Archive.dbo.TempPositionsRecID.PositionRecID
		FROM Archive.dbo.TempPositionsRecID with (NOLOCK) INNER JOIN MTD_Positions with (NOLOCK)
        ON Archive.dbo.TempPositionsRecID.PositionRecID = MTD_Positions.PositionRecID)
		set @morerows = 0
 
end --end of morerows while loop
drop table #MyTempTable


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
set PurgeEndDate = getdate()
WHERE TableName = 'TempPositionsRecID' and ArchiveDate = @DeleteDate


UPDATE [Archive].[dbo].[MTD_01_ArchivePurgeHistory]
SET PurgeDuration =  DATEDIFF(s, PurgeStartDate, PurgeEndDate)
WHERE TableName = 'TempPositionsRecID' and ArchiveDate = @DeleteDate


    
END





GO
/****** Object:  StoredProcedure [dbo].[AutomatedFirmwareReset]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*
===============================================================================
SQL Job Script: Automated Device Reset Actions
===============================================================================
Created: 01/09/2023
Author: Scott Cupstid
-------------------------------------------------------------------------------
This script is designed to automate device reset actions for devices that have
excessive code load attempts for the specified firmware versions.  It will also
reactivate the stalled code load.

NOTE:  There is a variable named @TestMode that enables or disables the actual
insertion of reset ommand actions as well as the reactivation of the stalled
code loads.  If @TestMode = 1, then the actions will be disabled and data will
be returned for review.  If the value is set to 0, the actions will be 
performed and no data will be returned for review.
===============================================================================
History
-------------------------------------------------------------------------------
05/13/25 - (UO) - Converted to sp.
Modification: <date>
Author: <author>
-------------------------------------------------------------------------------
<description>
===============================================================================
*/


/*
These are the settings that will be used to find devices that require a reset and
devices where a reset has completed and the code load can be reactivated.
*/

CREATE PROCEDURE [dbo].[AutomatedFirmwareReset]
AS
BEGIN

DECLARE @UpgradeVersion varchar(50) = '4.5.2.50',
		@PtmUserLogin varchar(40) = 'A3RGHZZ',
		@MaxiumActiveActions int = 300,
		@MaximumAttempts int = 20,
		@UpgradeVersionNumber int = 0,
		@TestMode bit = 0 -- For the reset command INSERT and the code load UPDATE statements to work, set this value to 0

IF (@TestMode = 1)
BEGIN	
	RAISERROR('This script is running in test mode.  NO ACTIONS WILL BE PERFORMED.  Change the @TestMode variable to 0 to create and commit changes to the data.', 10, 1) WITH NOWAIT
END

SET @UpgradeVersionNumber = Protech.dbo.fn_VersionToVersionNumber(@UpgradeVersion)

/*
The following table will contain all code load actions for devices where a code load action was 
setup for the specified firmware version.  The CodeLoadSequence will help identify the latest 
code load action for the device.  The latest code load action for the device is the one with the 
largest MtdActionId value partitioned on the device id value.

It is also important to note that the devices in this list be running a firmware version prior
to the specified firmware version.  In otherwords, the firmware update failed.
*/
DECLARE @Devices TABLE (
	Id int IDENTITY(1,1),
	DeviceId int,
	DemographicId int,
	CodeLoadActionId int,
	Attempts int,
	LastAttempt datetime,
	ActionInProgress char(1)
);

-- The list should contain all attempts for any device
WITH MasterList_CTE (
	DeviceId,
	DemographicId,
	CodeLoadActionId,
	ActionInProgress,
	Attempts,
	LastAttempt,
	CodeLoadSequence
) AS	
(
SELECT 
	sca.DeviceID,
	sca.DemoId,
	sca.MTDActionId,
	cla.ActionInProgress,
	sca.NumberOfTries,
	CASE WHEN sca.LastUploadAttempt = NULL THEN cla.DateCreated ELSE sca.LastUploadAttempt END,
	ROW_NUMBER() OVER (PARTITION BY sca.DeviceId ORDER BY sca.MTDActionId DESC)
FROM
	[Protech].dbo.SendCodesAudit sca (NOLOCK)
	INNER JOIN [MTD_01].dbo.MTDActions cla (NOLOCK)
		ON cla.MtdActionID = sca.MTDActionId
	INNER JOIN [MTD_01].dbo.DeviceCallsLastNormal dcln (NOLOCK)
		ON sca.DeviceID = dcln.DeviceID AND
			sca.DemoId = dcln.DemoGraphicID AND
			dcln.StartTime > DATEADD(HOUR, -1, GETDATE())
	INNER JOIN [Protech].dbo.OffenderDevices od (NOLOCK)
		ON od.DeviceID = sca.DeviceID AND
			od.DemographicID = sca.DemoId AND
			od.AssignmentDate IS NOT NULL AND
			od.ActivationDate IS NOT NULL AND
			od.UnassignmentDate IS NULL AND
			od.DeactivationDate IS NULL
	INNER JOIN [Protech].dbo.DeviceSoftwareVersions dsv (NOLOCK)
		ON dsv.DeviceID = sca.DeviceID
WHERE
	[Protech].dbo.fn_VersionToVersionNumber(dsv.MtdAPP) < @UpgradeVersionNumber AND
	sca.SuccessfulUpload = 0 AND
	Protech.dbo.fn_VersionToVersionNumber(REPLACE(cla.CommandParam,'_','.')) = @UpgradeVersionNumber
)

INSERT INTO @Devices (
	DeviceId,
	DemographicId,
	CodeLoadActionId,
	ActionInProgress,
	Attempts,
	LastAttempt
)
SELECT
	ml.DeviceId,
	ml.DemographicId,
	ml.CodeLoadActionId,
	ml.ActionInProgress,
	ml.Attempts,
	ml.LastAttempt
FROM
	MasterList_CTE ml
WHERE
	ml.CodeLoadSequence = 1 AND
	ml.ActionInProgress = 'Y'
ORDER BY
	ml.Attempts DESC

-- The master list results
IF (@TestMode = 1)
BEGIN
	SELECT
		'Master List' as [DataSet], 
		* 
	FROM 
		@Devices
END

/*
Using the master list, determine which of the devices in the list should get a reset/initialize command.
These devices should not have a reset/initialize command issued after the latest code load attempt and
the number of attempts for the code load action should have reached or exceeded the specified maximum 
number of attempts.
*/
DECLARE @DeviceResetStatus TABLE (
	DeviceId int,
	DemographicId int,
	CodeLoadActionId int,
	ResetActionId int,
	Attempts int
);

WITH ResetCommands_CTE (
	DeviceId,
	ResetActionId,
	ResetSequenceId
)
AS
(
	SELECT 
		rda.DeviceId,
		rda.MtdActionId,
		ROW_NUMBER() OVER (PARTITION BY rda.DeviceId ORDER BY rda.MtdActionID)
	FROM 
		[MTD_01].dbo.MTDActions rda (NOLOCK)
		INNER JOIN @Devices d
			ON	d.DeviceId = rda.DeviceID AND
				d.DemographicId = rda.DemographicID AND
				rda.MtdActionID > d.CodeLoadActionId AND
				rda.CommandNumber = 3
)

INSERT INTO	@DeviceResetStatus (
	DeviceId,
	DemographicId,
	CodeLoadActionId,
	ResetActionId,
	Attempts
)
SELECT
	d.DeviceId,
	d.DemographicId,
	d.CodeLoadActionId,
	rda.ResetActionId,
	d.Attempts
FROM
	@Devices d
	LEFT OUTER JOIN ResetCommands_CTE rda
		ON d.DeviceId = rda.DeviceID AND
			rda.ResetSequenceId = 1 AND
			rda.ResetActionId > d.CodeLoadActionId
WHERE
	d.Attempts >= @MaximumAttempts


/*
Using the reset status table, determine which devices need to be reset.
*/
IF (@TestMode = 1)
BEGIN
	SELECT 
		'Reset Device' as [Action],
		drs.DeviceId,
		drs.DemographicId,
		drs.CodeLoadActionId,
		drs.Attempts
	FROM 
		@DeviceResetStatus drs
	WHERE
		drs.ResetActionId IS NULL
	ORDER BY
		drs.DeviceId
END

-- Generate the reset actions
IF (@TestMode = 0)
BEGIN
	INSERT INTO MTD_01..MTDActions (
		DeviceID, 
		Action,
		ActionInProgress,
		DemographicID,
		CommandNumber,
		CommandParam,  
		SoftwareType
	)
	SELECT 
		drs.DeviceId,
		'COMMAND',
		'N',
		drs.DemographicId,
		3,
		'00000000 000000 ',
		0
	FROM 
		@DeviceResetStatus drs
	WHERE
		drs.ResetActionId IS NULL
END

/*
Using the reset status table, determine which code load actions can be reactivated.
*/
DECLARE @ReactivateCodeLoads TABLE (
	DeviceId int,
	DemographicId int,
	CodeLoadActionId int
)

-- Caclulate the actual number of available active code load actions
SELECT 
	@MaxiumActiveActions = @MaxiumActiveActions - COUNT(*) 
FROM 
	[MTD_01].dbo.MTDActions a (NOLOCK) 
WHERE 
	a.ActionInProgress <> 'Y' AND a.CommandNumber = 14

IF (@MaxiumActiveActions > 0)
BEGIN
	-- Get the code load actions that can be rectivated
	INSERT INTO	@ReactivateCodeLoads (
		DeviceId,
		DemographicId,
		CodeLoadActionId
	)
	SELECT TOP (@MaxiumActiveActions)
		d.DeviceId,
		d.DemographicId,
		d.CodeLoadActionId
	FROM
		@Devices d
		INNER JOIN @DeviceResetStatus drs
			ON d.DeviceId = drs.DeviceID AND
				d.DemographicId = drs.DemographicId
		INNER JOIN [MTD_01].dbo.MTDActions rda (NOLOCK)
			ON rda.MtdActionID = drs.ResetActionId AND
				rda.ActionInProgress = 'Y'
	WHERE
		d.LastAttempt < rda.DateCompleted

	IF (@TestMode = 1)
	BEGIN
		SELECT
			'Reactivate Code Load' as [Action],
			rca.*
		FROM
			@ReactivateCodeLoads rca
	END

	-- Activate the stalled code loads
	IF (@TestMode = 0)
	BEGIN
		UPDATE [Protech].dbo.SendCodesAudit SET
			NumberOfTries = 0
		FROM
			@ReactivateCodeLoads rca
		WHERE
			MtdActionID = rca.CodeLoadActionId

		UPDATE MTDActions SET
			ActionInProgress = 'N',
			DateCompleted = NULL
		FROM
			@ReactivateCodeLoads rca
		WHERE
			MtdActionID = rca.CodeLoadActionId
	END
END
END
GO
/****** Object:  StoredProcedure [dbo].[cacopy_MTDPositions_GetByDate]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[cacopy_MTDPositions_GetByDate]
(
      @StartingDateTime DATETIME
)
AS
BEGIN
      declare @EndingDateTime DATETIME
      set @EndingDateTime = DATEADD(hour, 1, @StartingDateTime)
      SELECT * FROM MTD_Positions WITH (NOLOCK)
      WHERE TimeStamp >= @StartingDateTime AND TimeStamp < @EndingDateTime
      order by TimeStamp
END

GO
/****** Object:  StoredProcedure [dbo].[cacopy_MTDPositions_GetByMaxRecID]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[cacopy_MTDPositions_GetByMaxRecID]
	@MaxRecID		BIGINT,
	@MaxRecCount	INT
AS
	/*
	==============================================================================
	Procedure: [dbo].[cacopy_MTDPositions_GetByMaxRecID]
	==============================================================================
	Developer: S. Cupstid
	Date: 04/14/2020

	Comments
	------------------------------------------------------------------------------
	This procedure retrieves a specified set of positions from the MTD_Positions
	table to be copied to the CrimeTrax database.  This version of the stored
	procedure is designed to filter the retrieved positions to those that have
	been committed to the database for at least 10 minutes.
	==============================================================================
	History
	------------------------------------------------------------------------------
	04/29/2020 - JSC - I modified the stored procedure to try to prevent duplicate
	positions from being retreived from the database.  To do this, a table
	variable is loaded with possible PositionRecId values from the
	ctPositions.dbo.GeoTimePositions table where the PositionRecId is in the range
	of PositionRecIds being retrieved from the MTD_01.dbo.MTD_Positions table.  A
	LEFT OUTER JOIN is made on this tabel variable and only the rows from the
	MTD_01.dbo.MTD_Positions table that do not have a matching PositionRecId in
	ctPositions.dbo.GeoTimePositions table will be included in the resulting row
	set.

	04/30/2020 - JSC - I modified the stored procedure to us CTE (common table
	expression) for the existing PositionRecId values rather than declaring a 
	table variable.
	==============================================================================
	*/
	SET NOCOUNT ON

	DECLARE @SearchDateTimeUTC DATETIME = DATEADD(MINUTE, -10, GETUTCDATE()) AT TIME ZONE 'UTC'
	DECLARE @SearchDateTimeLocal DATETIME = @SearchDateTimeUTC AT TIME ZONE 'UTC' AT TIME ZONE 'US Eastern Standard Time'
	DECLARE @MTD_MASK INT = 33554432, -- 0x02000000
			@DS_LBS_ACTIVE INT = 4096; -- Device Status 0x00001000

	SELECT TOP(@MaxRecCount)
		P.PositionRecID,
		P.DemographicID,
		P.DeviceID,
		P.TimeStamp,
		P.Longitude,
		P.Latitude,
		P.Speed,
		P.Heading,
		P.Elevation,
		P.PDOP,
		P.HDOP,
		P.VDOP,
		P.GPSMode,
		P.SatellitesInView,
		P.Temperature,
		P.BatteryVoltage,
		P.PointStatus,
		P.GeoRuleGraceMask,
		P.HWRuleGrace,
		P.RulesInViolation,
		P.StoredTimeStamp,
		P.MTDCallsRecID,
		P.DeviceStatus,
		D.CustomerID,
		D.TestRecord
	FROM		
		dbo.MTD_Positions P WITH(NOLOCK)
		INNER JOIN Protech.dbo.Demographics D WITH(NOLOCK) 
			ON D.DemographicID = P.DemographicID
				AND P.PositionRecID > @MaxRecID
				AND (p.DeviceID & @MTD_MASK) = @MTD_MASK
				AND (p.DeviceStatus & @DS_LBS_ACTIVE) = 0
				AND p.[TimeStamp] < @SearchDateTimeUTC
				AND p.StoredTimeStamp < @SearchDateTimeLocal
	ORDER BY	
		P.PositionRecID
GO
/****** Object:  StoredProcedure [dbo].[cacopy_MTDPositions_GetByPositionRecID]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- GetByPositionRecID.
CREATE PROCEDURE [dbo].[cacopy_MTDPositions_GetByPositionRecID]
(
	@PositionRecID INT
)
AS
BEGIN
	SELECT * FROM MTD_Positions WITH (NOLOCK) WHERE PositionRecID = @PositionRecID;
END
GO
/****** Object:  StoredProcedure [dbo].[cacopy_MTDPositions_GetMaxRecID]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--
--	Create the actual script.
--
CREATE PROC [dbo].[cacopy_MTDPositions_GetMaxRecID]
AS
BEGIN
	SET NOCOUNT ON
	
	SELECT MAX(PositionRecID) FROM MTD_Positions WITH (NOLOCK)
END
GO
/****** Object:  StoredProcedure [dbo].[cacopy_RulesInAlarm_GetByPositionRecID]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[cacopy_RulesInAlarm_GetByPositionRecID]
	@PositionRecID	BIGINT
AS
BEGIN
	SET NOCOUNT ON

	SELECT	R.RulesInAlarmRecID,
			R.PositionRecID,
			R.RuleID,
			R.InGrace,
			R.HWRule,
			R.RuleStatus,
			R.OneTimeSchedId
	FROM	RulesInAlarm R WITH(NOLOCK)
	WHERE	R.PositionRecID = @PositionRecID
END
GO
/****** Object:  StoredProcedure [dbo].[cds_LastPositionStatus_Select]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--=============================================================================
-- Procedure Name: cds_ScheduledTest_Insert
-- Description...: Last known status for device. CAM only reports battery on alcohol test results.
-- Author........: Jeremy Nelson
-- Date Created..: 2018-09-04
-------------------------------------------------------------------------------
-- Revisions
--	2018-09-04 - FB - Initial procedure created.
--=============================================================================

CREATE PROCEDURE [dbo].[cds_LastPositionStatus_Select]
	@DeviceId int

AS

-- use this if we endup needing last battery level from an acohol test. For now assuming CAM will send battery with tamper as well
--Select top(1) p.DeviceStatus,
--			p.DeviceID,
--			p.DemographicID,
--			p.BatteryVoltage,
--			a.DeviceBattery
--	FROM MTD_LastPositions l (NOLOCK)
--	JOIN Protech..OffenderDevices o (NOLOCK) on l.DemographicID = o.DemographicID and l.DeviceID = o.DeviceID
--	JOIN MTD_Positions p (NOLOCK) on l.PositionRecID = p.PositionRecID
--	LEFT JOIN Alcohol..AlcoholTest a (NOLOCK) on a.DemographicID = o.DemographicID and a.DeviceID = o.DeviceID
--	WHERE l.DeviceID = @DeviceId
--	AND		o.UnassignmentDate IS NULL
--	AND		o.DeactivationDate IS NULL
--	order by a.AlcoholTestID

--using this for now without joining to alcohol test
 	Select p.DeviceStatus,
			p.DeviceID,
			p.DemographicID,
			p.BatteryVoltage
	FROM MTD_LastPositions l (NOLOCK)
	JOIN Protech..OffenderDevices o on l.DemographicID = o.DemographicID and l.DeviceID = o.DeviceID
	JOIN MTD_Positions p on l.PositionRecID = p.PositionRecID
	WHERE l.DeviceID = @DeviceId
	AND		o.UnassignmentDate IS NULL
	AND		o.DeactivationDate IS NULL



GO
/****** Object:  StoredProcedure [dbo].[chg_GetDailyCalls_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE Procedure [dbo].[chg_GetDailyCalls_DEL] @Start SMALLDATETIME
AS
IF( @Start IS NULL )
	RETURN "Invalid Date"
DECLARE @last DATETIME
DECLARE @next DATETIME
DECLARE @hour INT
DECLARE @tmp VARCHAR(128)

SET @Tmp = CAST(DatePart(month, @Start) AS VARCHAR(12)) + "/" + CAST(DatePart(day, @Start) AS VARCHAR(12)) + "/" + CAST(DatePart(year, @Start) AS VARCHAR(12))
	--SELECT @Start=CAST(GetDate() AS VARCHAR) AS SM_DATE_VARCHAR
SET @Start = @Tmp
SET @hour=0
SET @last = @Start			--'6/19/2003 00:00:01'
	--print @last
	--print @Start

Print "CHG Calls for: " + @Tmp + CHAR(13) + "------------------------"
WHILE( @Hour <25)
BEGIN
	SET @next = DateAdd(hour, 1, @last)
	SET @tmp = 'Hour: ' + Right('0' + CAST(@hour AS VARCHAR(10)),2) + ' - ' + 
        	CAST( (SELECT COUNT(callrecid) FROM mtdcalls WITH(NOLOCK INDEX=IX_MtdCalls_StartTime) WHERE StartTime BETWEEN @last AND @next AND DeviceID > 50331640) AS VARCHAR(10))
	SET @hour=@hour+1
	SET @last=@next
	PRINT @Tmp
END
GO
/****** Object:  StoredProcedure [dbo].[cmsvr_MTDPositionRulesInAlarm_Read]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[cmsvr_MTDPositionRulesInAlarm_Read]
	@PositionsRecID int
AS
	SELECT * FROM [dbo].[RulesInAlarm]
	WHERE
		PositionRecID = @PositionsRecID
GO
/****** Object:  StoredProcedure [dbo].[cmsvr_MTDPositions_Insert]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[cmsvr_MTDPositions_Insert]
	@DemographicID int
   ,@DeviceID int
   ,@TimeStamp datetime
   ,@Longitude float
   ,@Latitude float
   ,@Speed smallint
   ,@Heading smallint
   ,@Elevation int
   ,@PDOP real
   ,@HDOP real
   ,@VDOP real
   ,@GPSMode tinyint
   ,@SatellitesInView tinyint
   ,@SVN binary(12)
   ,@SNR binary(12)
   ,@Temperature smallint
   ,@BatteryVoltage smallint
   ,@PointStatus int
   ,@GeoRuleGraceMask int
   ,@HWRuleGrace int
   ,@RulesInViolation tinyint
	,@MTDCallsRecID int
   ,@DeviceStatus int
   ,@DeviceStatus2 int
	,@PositionsRecID int OUTPUT
AS
	SET NOCOUNT ON

	INSERT INTO [dbo].[MTD_Positions]
				  ([DemographicID]
				  ,[DeviceID]
				  ,[TimeStamp]
				  ,[Longitude]
				  ,[Latitude]
				  ,[Speed]
				  ,[Heading]
				  ,[Elevation]
				  ,[PDOP]
				  ,[HDOP]
				  ,[VDOP]
				  ,[GPSMode]
				  ,[SatellitesInView]
				  ,[SVN]
				  ,[SNR]
				  ,[Temperature]
				  ,[BatteryVoltage]
				  ,[PointStatus]
				  ,[GeoRuleGraceMask]
				  ,[HWRuleGrace]
				  ,[RulesInViolation]
				  ,[StoredTimeStamp]
				  ,[MTDCallsRecID]
				  ,[DeviceStatus]
				  ,[DeviceStatus2])
		  VALUES
				  (@DemographicID
				  ,@DeviceID
				  ,@TimeStamp
				  ,@Longitude
				  ,@Latitude
				  ,@Speed
				  ,@Heading
				  ,@Elevation
				  ,@PDOP
				  ,@HDOP
				  ,@VDOP
				  ,@GPSMode
				  ,@SatellitesInView
				  ,@SVN
				  ,@SNR
				  ,@Temperature
				  ,@BatteryVoltage
				  ,@PointStatus
				  ,@GeoRuleGraceMask
				  ,@HWRuleGrace
				  ,@RulesInViolation
				  ,GETDATE()
				  ,@MTDCallsRecID
				  ,@DeviceStatus
				  ,@DeviceStatus2)

	SET @PositionsRecID = SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure [dbo].[cmsvr_MTDPositions_MostRecentPositionRecID]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[cmsvr_MTDPositions_MostRecentPositionRecID]
	@DemographicID int,
	@DeviceID int,
	@PositionRecID bigint OUTPUT
AS
	SET NOCOUNT ON

	SELECT TOP 1 
		@PositionRecID = p.PositionRecID 
	FROM 
		MTD_Positions p (nolock)
	WHERE 
		p.DemographicID = @DemographicID AND 
		p.DeviceID = @DeviceID 
	ORDER BY 
		p.[TimeStamp] DESC
GO
/****** Object:  StoredProcedure [dbo].[cmsvr_MTDPositions_Read]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[cmsvr_MTDPositions_Read]
	@PositionsRecID int
AS
	SET NOCOUNT ON

	SELECT * FROM [dbo].[MTD_Positions] (nolock)
	WHERE
		PositionRecID = @PositionsRecID
GO
/****** Object:  StoredProcedure [dbo].[cmsvr_MTDPositions_Update]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[cmsvr_MTDPositions_Update]
	@PositionsRecID int
	,@DemographicID int
   ,@DeviceID int
   ,@TimeStamp datetime
   ,@Longitude float
   ,@Latitude float
   ,@Speed smallint
   ,@Heading smallint
   ,@Elevation int
   ,@PDOP real
   ,@HDOP real
   ,@VDOP real
   ,@GPSMode tinyint
   ,@SatellitesInView tinyint
   ,@SVN binary(12)
   ,@SNR binary(12)
   ,@Temperature smallint
   ,@BatteryVoltage smallint
   ,@PointStatus int
   ,@GeoRuleGraceMask int
   ,@HWRuleGrace int
   ,@RulesInViolation tinyint
	,@MTDCallsRecID int
   ,@DeviceStatus int
   ,@DeviceStatus2 int
AS
	SET NOCOUNT ON

	UPDATE [dbo].[MTD_Positions] SET
		[DemographicID]			  = @DemographicID
		,[DeviceID]					  = @DeviceID
		,[TimeStamp]				  = @TimeStamp
		,[Longitude]				  = @Longitude
		,[Latitude]					  = @Latitude
		,[Speed]						  = @Speed
		,[Heading]					  = @Heading
		,[Elevation]				  = @Elevation
		,[PDOP]						  = @PDOP
		,[HDOP]						  = @HDOP
		,[VDOP]						  = @VDOP
		,[GPSMode]					  = @GPSMode
		,[SatellitesInView]		  = @SatellitesInView
		,[SVN]						  = @SVN
		,[SNR]						  = @SNR
		,[Temperature]				  = @Temperature
		,[BatteryVoltage]			  = @BatteryVoltage
		,[PointStatus]				  = @PointStatus
		,[GeoRuleGraceMask]		  = @GeoRuleGraceMask
		,[HWRuleGrace]				  = @HWRuleGrace
		,[RulesInViolation]		  = @RulesInViolation
		,[StoredTimeStamp]		  = GETDATE()
		,[MTDCallsRecID]			  = @MTDCallsRecID
		,[DeviceStatus]			  = @DeviceStatus
		,[DeviceStatus2]			  = @DeviceStatus2
	WHERE
		PositionRecID = @PositionsRecID
GO
/****** Object:  StoredProcedure [dbo].[cmsvr_RIAParams_Insert]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[cmsvr_RIAParams_Insert]
	@RulesInAlarmRecID bigint
   ,@ExtraTx int
   ,@ParameterTypeLookupValue int
   ,@ParameterValue varchar(50)
	,@RIAParamsRecID int OUTPUT
AS
	SET NOCOUNT ON

	INSERT INTO [dbo].[RIAParams] (
		[RulesInAlarmRecID]
	  ,[ExtraTx]
	  ,[ParameterTypeLookupValue]
	  ,[ParameterValue]
	) VALUES (
		@RulesInAlarmRecID
		,@ExtraTx
		,@ParameterTypeLookupValue
		,@ParameterValue
	)
	SET @RIAParamsRecID = SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure [dbo].[cmsvr_RIAParams_Read]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[cmsvr_RIAParams_Read]
	@RIAParamsRecID int
AS
	SET NOCOUNT ON

	SELECT 
		* 
	FROM 
		RIAParams	(nolock)
	WHERE 
		RIAParamsRecID = @RIAParamsRecID
GO
/****** Object:  StoredProcedure [dbo].[cmsvr_RIAParams_Update]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[cmsvr_RIAParams_Update]
	@RIAParamsRecID int,
	@RulesInAlarmRecID bigint,
	@ExtraTx int,
	@ParameterTypeLookupValue int,
	@ParameterValue varchar(50)
AS
	SET NOCOUNT ON

	UPDATE [dbo].[RIAParams] SET 
		RulesInAlarmRecID = @RulesInAlarmRecID,
		ExtraTx = @ExtraTx,
		ParameterTypeLookupValue = @ParameterTypeLookupValue,
		ParameterValue = @ParameterValue
	WHERE
		RIAParamsRecID = @RIAParamsRecID;
GO
/****** Object:  StoredProcedure [dbo].[cmsvr_RuleInAlarmRIAParams_Read]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[cmsvr_RuleInAlarmRIAParams_Read]
	@RulesInAlarmRecID int
AS
	SET NOCOUNT ON 

	SELECT * FROM [dbo].[RIAParams] (nolock)
	WHERE
		RulesInAlarmRecID = @RulesInAlarmRecID
GO
/****** Object:  StoredProcedure [dbo].[cmsvr_RulesInAlarm_Insert]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[cmsvr_RulesInAlarm_Insert]
   @PositionRecID numeric(13,0)
   ,@RuleID int
   ,@InGrace char(1)
	,@HWRule int
	,@RuleStatus smallint
	,@OneTimeSchedId int
	,@ZoneRecID bigint
	,@HwRuleBitIndex int
	,@RulesInAlarmRecID bigint OUTPUT
AS
	SET NOCOUNT ON

	INSERT INTO [dbo].[RulesInAlarm] (
		PositionRecID
		,RuleID
		,InGrace
		,HWRule
		,RuleStatus
		,OneTimeSchedId
		,ZoneRecID
		,HwRuleBitIndex
	) VALUES (
		@PositionRecID
		,@RuleID
		,@InGrace
		,@HWRule
		,@RuleStatus
		,@OneTimeSchedId
		,@ZoneRecID
		,@HwRuleBitIndex
	)
	SET @RulesInAlarmRecID = SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure [dbo].[cmsvr_RulesInAlarm_Read]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[cmsvr_RulesInAlarm_Read]
	@RulesInAlarmRecID bigint
AS
	SET NOCOUNT ON
	
	SELECT 
		* 
	FROM 
		RulesInAlarm (nolock)
	WHERE 
		RulesInAlarmRecID = @RulesInAlarmRecID
GO
/****** Object:  StoredProcedure [dbo].[cmsvr_RulesInAlarm_Update]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[cmsvr_RulesInAlarm_Update]
	@RulesInAlarmRecID bigint
   ,@PositionRecID numeric(13,0)
   ,@RuleID int
   ,@InGrace char(1)
	,@HWRule int
	,@RuleStatus smallint
	,@OneTimeSchedId int
	,@ZoneRecID bigint
	,@HwRuleBitIndex int
AS
	SET NOCOUNT ON

	UPDATE [dbo].[RulesInAlarm] SET
		PositionRecID             = @PositionRecID
		,RuleID						  = @RuleID
		,InGrace						  = @InGrace
		,HWRule						  = @HWRule
		,RuleStatus					  = @RuleStatus
		,OneTimeSchedId			  = @OneTimeSchedId
		,ZoneRecID					  = @ZoneRecID
		,HwRuleBitIndex			  = @HwRuleBitIndex
	WHERE
		RulesInAlarmRecID = @RulesInAlarmRecID
GO
/****** Object:  StoredProcedure [dbo].[ct_MTD_Positions_GetByRecIdRowCount_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author, Mat Mathiasen>
-- Create date: <Create Date, 9-18-2006>
-- Description:	<Description, Select x Records Greater than PositionRecID,>
-- =============================================
CREATE PROCEDURE [dbo].[ct_MTD_Positions_GetByRecIdRowCount_DEL]
	-- Add the parameters for the stored procedure here
	@PositionRecId numeric(13,0),
	@RowCount int AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET ROWCOUNT @RowCount

    -- Insert statements for procedure here
	SELECT * FROM MTD_Positions
	WHERE PositionRecId > @PositionRecId
	ORDER BY PositionRecID
END
GO
/****** Object:  StoredProcedure [dbo].[ct_RulesInAlarm_GetByPositionRecId_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author, Mat Mathiasen>
-- Create date: <Create Date, 9-18-2006,>
-- Description:	<Description, Get the RulesInAlarm recored to a MTD_Position Record,>
-- =============================================
CREATE PROCEDURE [dbo].[ct_RulesInAlarm_GetByPositionRecId_DEL]
	-- Add the parameters for the stored procedure here
@PositionRecId numeric(13,0)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT * FROM RulesInAlarm
	WHERE PositionRecId=@PositionRecId
END
GO
/****** Object:  StoredProcedure [dbo].[dbl_InsertMtdCalls_06232005_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[dbl_InsertMtdCalls_06232005_DEL]
	@DeviceID int, @DemographicID int, @ANIPhoneNumber varchar(16), @Originator char(3), @SessionSummary int,
	@StartTime datetime, @EndTime datetime, @ElapsedSeconds int, @PointsProcessed smallint, @PointsMtdReportsSent smallint, @ChgID int=0, @MtdID int=0,
	@RecID int OUTPUT
AS
	SET NOCOUNT ON

	DECLARE @InChargerDeviceID int
	SET @InChargerDeviceID = 0

	BEGIN
		if( @DeviceID < 50330000 )
			SELECT  @InChargerDeviceID = @ChgID
		else
			SELECT  @InChargerDeviceID = @MtdID
	END

	INSERT INTO MtdCalls WITH (ROWLOCK) ( DeviceID, DemographicID, ANIPhoneNumber, IPAddress, Originator, SessionSummary,
    					StartTime, EndTime, ElapsedSeconds, PointsProcessed, PointsMtdReportsSent, InChargerDeviceID )
	VALUES( @DeviceID, @DemographicID, @ANIPhoneNumber, '0.0.0.0', @Originator, @SessionSummary,
			@StartTime, @EndTime, @ElapsedSeconds, @PointsProcessed, @PointsMtdReportsSent, @InChargerDeviceID )


	Select @RecID = @@IDENTITY

/* 07/17/2006 - Carla/Ron - this code is believed to have caused an UTC which was not a UTC but based on a missing InChargerDeviceID */

--	/* Clear any previous InChargerDeviceID from affected devices */
--	UPDATE DeviceCallsLastNormal WITH (ROWLOCK)
--	SET InChargerDeviceID = 0
--	WHERE InChargerDeviceID = @DeviceID
--	AND (DeviceID != @InChargerDeviceID
--	OR @InChargerDeviceID = 0)
--	/* Clear any previous InChargerDeviceID from affected devices */
GO
/****** Object:  StoredProcedure [dbo].[dbl_InsertMtdCalls_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[dbl_InsertMtdCalls_DEL]
		@DeviceID int, @DemographicID int, @ANIPhoneNumber varchar(16), @Originator char(3), @SessionSummary int,
		@StartTime datetime, @EndTime datetime, @ElapsedSeconds int, @PointsProcessed smallint, @PointsMtdReportsSent smallint,
		@RecID int OUTPUT
AS
	SET NOCOUNT ON
--print "@Originator:" + @Originator
--	DECLARE @NewRecID int

	INSERT INTO MtdCalls WITH  (ROWLOCK) ( DeviceID, DemographicID, ANIPhoneNumber, IPAddress, Originator, SessionSummary,
				StartTime, EndTime, ElapsedSeconds, PointsProcessed, PointsMtdReportsSent )
	VALUES( @DeviceID, @DemographicID, @ANIPhoneNumber, "0.0.0.0", @Originator, @SessionSummary,
		@StartTime, @EndTime, @ElapsedSeconds, @PointsProcessed, @PointsMtdReportsSent )

	Select @RecID = @@IDENTITY


GO
/****** Object:  StoredProcedure [dbo].[dbl_InsertMTDDebugPoint_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[dbl_InsertMTDDebugPoint_DEL] 
	@DemographicID int, @DeviceID int, @MtdCallsRecID int,
	@DebugType smallint, @STimer int,
	@TimeStamp DateTime, @StoredTimeStamp DateTime,
	@DebugInfo1 int, @DebugInfo2 int, @DebugInfo3 int, 
	@DebugInfo4 int, @DebugInfo5 int, @DebugInfo6 int, 
	@DebugInfo7 int, @DebugInfo8 int
AS
	SET NOCOUNT ON

	IF( @DebugType = 137 )
	BEGIN
		INSERT INTO LacCids (
			DeviceID, 
			DemographicID, 
			TimeStamp, 
			StoredTimeStamp,
			Longitude,
			Latitude, 
			LAC, 
			CID, 
			CellRSSI
			)
		VALUES (
			@DeviceID, 
			@DemographicID, 
			@TimeStamp, 
			@StoredTimeStamp,
			CAST(@DebugInfo4 / 60000.0 AS FLOAT),
			CAST(@DebugInfo3 / 60000.0 AS FLOAT),
			@DebugInfo1, 
			@DebugInfo2, 
			@DebugInfo5 )
	END

	INSERT INTO MTDDebug WITH  (ROWLOCK) (
		DemographicID, 
		DeviceID, 
		MtdCallsRecID,
		DebugType, 
		STimer,
		TimeStamp, 
		StoredTimeStamp,
		DebugInfo1, 
		DebugInfo2, 
		DebugInfo3, 
		DebugInfo4, 
		DebugInfo5, 
		DebugInfo6, 
		DebugInfo7, 
		DebugInfo8 )
	VALUES (  
		@DemographicID, 
		@DeviceID, 
		@MtdCallsRecID,
		@DebugType, 
		@STimer,
		@TimeStamp, 
		@StoredTimeStamp,
		@DebugInfo1, 
		@DebugInfo2, 
		@DebugInfo3, 
		@DebugInfo4, 
		@DebugInfo5, 
		@DebugInfo6, 
		@DebugInfo7, 
		@DebugInfo8 )






GO
/****** Object:  StoredProcedure [dbo].[dbl_InsertMtdPositions_02192004_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* latest mod 03/09/2004 - rlp - Decrement the RIV count if the Report Violations bits (BIT00) is set *AND* the RIA bit (BIT03) *IS NOT* set */

CREATE PROCEDURE [dbo].[dbl_InsertMtdPositions_02192004_DEL]
	@DemographicID int, @DeviceID int, @TimeStamp DateTime,
	@Longitude float, @Latitude float, @Speed smallint,
	@Heading smallint, @Elevation int, @PDOP real,
	@HDOP real, @VDOP real, @GPSMode tinyint,
	@SatellitesInView tinyint, @SVN binary(12), @SNR binary(12),  
	@Temperature smallint, @BatteryVoltage smallint,
	@PointStatus int, @GeoRuleGraceMask int, 
	@DeviceStatus int,
	@RulesInViolation tinyint,
	@StandardTimeOffset int, @DaylightTimeOffset int, @HardwareType tinyint,
	@MtdCallsRecID int,
	@EMChargingStand int,
	@RuleID_01 int = 0, @RuleStatus_01 smallint = 0, @HWRule_01 int = 0, @GridletID_01 int = 0,
  	@RuleID_02 int = 0, @RuleStatus_02 smallint = 0, @HWRule_02 int = 0, @GridletID_02 int = 0,
  	@RuleID_03 int = 0, @RuleStatus_03 smallint = 0, @HWRule_03 int = 0, @GridletID_03 int = 0,
  	@RuleID_04 int = 0, @RuleStatus_04 smallint = 0, @HWRule_04 int = 0, @GridletID_04 int = 0,	
  	@RuleID_05 int = 0, @RuleStatus_05 smallint = 0, @HWRule_05 int = 0, @GridletID_05 int = 0,
  	@RuleID_06 int = 0, @RuleStatus_06 smallint = 0, @HWRule_06 int = 0, @GridletID_06 int = 0,	
  	@RuleID_07 int = 0, @RuleStatus_07 smallint = 0, @HWRule_07 int = 0, @GridletID_07 int = 0,
  	@RuleID_08 int = 0, @RuleStatus_08 smallint = 0, @HWRule_08 int = 0, @GridletID_08 int = 0,	
  	@RuleID_09 int = 0, @RuleStatus_09 smallint = 0, @HWRule_09 int = 0, @GridletID_09 int = 0,
  	@RuleID_10 int = 0, @RuleStatus_10 smallint = 0, @HWRule_10 int = 0, @GridletID_10 int = 0,	
  	@RuleID_11 int = 0, @RuleStatus_11 smallint = 0, @HWRule_11 int = 0, @GridletID_11 int = 0,
  	@RuleID_12 int = 0, @RuleStatus_12 smallint = 0, @HWRule_12 int = 0, @GridletID_12 int = 0,	
  	@RuleID_13 int = 0, @RuleStatus_13 smallint = 0, @HWRule_13 int = 0, @GridletID_13 int = 0,
  	@RuleID_14 int = 0, @RuleStatus_14 smallint = 0, @HWRule_14 int = 0, @GridletID_14 int = 0,	
  	@RuleID_15 int = 0, @RuleStatus_15 smallint = 0, @HWRule_15 int = 0, @GridletID_15 int = 0,
  	@RuleID_16 int = 0, @RuleStatus_16 smallint = 0, @HWRule_16 int = 0, @GridletID_16 int = 0,	
  	@RuleID_17 int = 0, @RuleStatus_17 smallint = 0, @HWRule_17 int = 0, @GridletID_17 int = 0,
  	@RuleID_18 int = 0, @RuleStatus_18 smallint = 0, @HWRule_18 int = 0, @GridletID_18 int = 0,	
  	@RuleID_19 int = 0, @RuleStatus_19 smallint = 0, @HWRule_19 int = 0, @GridletID_19 int = 0,
  	@RuleID_20 int = 0, @RuleStatus_20 smallint = 0, @HWRule_20 int = 0, @GridletID_20 int = 0
	
AS
	Declare @RecID		numeric(13,0)
	Declare @inAlarm		int
	Declare @lastTimeStamp	DateTime
  	Declare @rivCount		int
	Declare @AdjustedRIV		tinyint
  	Declare @riv			int
  	Declare @rulestat		smallint
  	Declare @HWRule		int
	Declare @GridletID		int
	Declare @BIT04		int
	Declare @BIT05		int
	Declare @BIT20		int
	Declare @BIT21		int

	SET @BIT04 = 16
	SET @BIT05 = 32
	SET @BIT20 = 0x00100000
	SET @BIT21 = 0x00200000

	SET @AdjustedRIV = @RulesInViolation	

	IF ( @RulesInViolation > 0 )
	BEGIN
      		SET @rivCount = 1
      
      		WHILE ( 1=1 )
      		BEGIN
	              	IF( @rivCount = 1 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_01
              		END
	              	ELSE IF( @rivCount = 2 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_02
              		END
	              	ELSE IF( @rivCount = 3 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_03
              		END
	              	ELSE IF( @rivCount = 4 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_04
              		END
	              	ELSE IF( @rivCount = 5 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_05
              		END
	              	ELSE IF( @rivCount = 6 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_06
              		END
	              	ELSE IF( @rivCount = 7 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_07
              		END
	              	ELSE IF( @rivCount = 8 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_08
              		END
	              	ELSE IF( @rivCount = 9 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_09
              		END
	              	ELSE IF( @rivCount = 10 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_10
              		END
	              	ELSE IF( @rivCount = 11 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_11
              		END
	              	ELSE IF( @rivCount = 12 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_12
              		END
	              	ELSE IF( @rivCount = 13 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_13
              		END
	              	ELSE IF( @rivCount = 14 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_14
              		END
	              	ELSE IF( @rivCount = 15 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_15
              		END
	              	ELSE IF( @rivCount = 16 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_16
              		END
	              	ELSE IF( @rivCount = 17 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_17
              		END
	              	ELSE IF( @rivCount = 18 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_18
              		END
	              	ELSE IF( @rivCount = 19 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_19
              		END
	              	ELSE IF( @rivCount = 20 )
			BEGIN
	             		     	SET @rulestat = @RuleStatus_20
              		END

	             		IF ( ( @rulestat & 1 ) = 1  AND ( @rulestat & 4 ) != 4 )
			BEGIN
	                 		/*  decrement @AdjustedRIV  */
				SET @AdjustedRIV = @AdjustedRIV - 1
			END
                 
	    		SET @rivCount = @rivCount + 1
	
			IF ( @rivCount > @RulesInViolation )
			BEGIN
				BREAK
			END
		END
	END


  	/* 03/09/2004 - rlp - using "@AdjustedRIV" for the RulesInViolation value */
	INSERT INTO MTD_Positions (DemographicID, DeviceID, TimeStamp, Longitude, Latitude,
                              Speed, Heading, Elevation, PDOP, HDOP, VDOP, GPSMode,
                              SatellitesInView, SVN, SNR, Temperature, BatteryVoltage,
                              PointStatus, GeoRuleGraceMask, RulesInViolation, MtdCallsRecID,
			      DeviceStatus)
            	VALUES (@DemographicID, @DeviceID, @TimeStamp,
                              @Longitude, @Latitude, @Speed,
                              @Heading, @Elevation, @PDOP,
                              @HDOP, @VDOP, @GPSMode,
                              @SatellitesInView, @SVN,
                              @SNR,  @Temperature, @BatteryVoltage,
                              @PointStatus, @GeoRuleGraceMask, @AdjustedRIV, @MtdCallsRecID, @DeviceStatus)
      
	SELECT @RecID = @@Identity
    		--print "PositionRecID:" + convert( char(13), @RecID )

	/******************************************************************
	  If we have RulesInAlarm, insert a point into MTD_Alarms.  Then,
	  for each RuleInAlarm, insert a row into the RulesInAlarm table
	*******************************************************************/  
  
	IF ( @RulesInViolation > 0 )
	BEGIN
      		SET @rivCount         = 1
      
      		WHILE ( 1=1 )
      		BEGIN
	              	IF( @rivCount = 1 )
			BEGIN
          		     		SET @riv = @RuleID_01
	             		     	SET @rulestat = @RuleStatus_01
             			     	SET @HWRule = @HWRule_01
				SET @GridletID = @GridletID_01
              		END
              
              		ELSE
              		IF( @rivCount = 2 )
	              	BEGIN
				SET @riv = @RuleID_02
                  			SET @rulestat = @RuleStatus_02
                  			SET @HWRule = @HWRule_02
				SET @GridletID = @GridletID_02
	              	END
              
			ELSE
              		IF( @rivCount = 3 )
	              	BEGIN
	             	     		SET @riv = @RuleID_03
				SET @rulestat = @RuleStatus_03
				SET @HWRule = @HWRule_03
				SET @GridletID = @GridletID_03
              		END
              
              		ELSE
              		IF( @rivCount = 4 )
	              	BEGIN
             			     	SET @riv = @RuleID_04
				SET @rulestat = @RuleStatus_04
	                  		SET @HWRule = @HWRule_04
				SET @GridletID = @GridletID_04
	              	END
              
			ELSE
              		IF( @rivCount = 5 )
	              	BEGIN
				SET @riv = @RuleID_05
	                  		SET @rulestat = @RuleStatus_05
				SET @HWRule = @HWRule_05
				SET @GridletID = @GridletID_05
	              	END
              
			ELSE
              		IF( @rivCount = 6 )
	              	BEGIN
				SET @riv = @RuleID_06
				SET @rulestat = @RuleStatus_06
				SET @HWRule = @HWRule_06
				SET @GridletID = @GridletID_06
	              	END
              
			ELSE
              		IF( @rivCount = 7 )
	              	BEGIN
				SET @riv = @RuleID_07
	                  		SET @rulestat = @RuleStatus_07
				SET @HWRule = @HWRule_07
				SET @GridletID = @GridletID_07
	              	END
              
			ELSE
              		IF( @rivCount = 8 )
	              	BEGIN
				SET @riv = @RuleID_08
				SET @rulestat = @RuleStatus_08
				SET @HWRule = @HWRule_08
				SET @GridletID = @GridletID_08
	              	END
              
			ELSE
              		IF( @rivCount = 9 )
			BEGIN
				SET @riv = @RuleID_09
				SET @rulestat = @RuleStatus_09
				SET @HWRule = @HWRule_09
				SET @GridletID = @GridletID_09
	              	END
              
			ELSE
              		IF( @rivCount = 10 )
	              	BEGIN
				SET @riv = @RuleID_10
				SET @rulestat = @RuleStatus_10
				SET @HWRule = @HWRule_10
				SET @GridletID = @GridletID_10
	              	END
              
			ELSE
              		IF( @rivCount = 11 )
			BEGIN
				SET @riv = @RuleID_11
				SET @rulestat = @RuleStatus_11
				SET @HWRule = @HWRule_11
				SET @GridletID = @GridletID_11
			END

			ELSE
			IF( @rivCount = 12 )
			BEGIN
				SET @riv = @RuleID_12
				SET @rulestat = @RuleStatus_12
				SET @HWRule = @HWRule_12
				SET @GridletID = @GridletID_12
	              	END

	              	ELSE
			IF( @rivCount = 13 )
              		BEGIN
				SET @riv = @RuleID_13
				SET @rulestat = @RuleStatus_13
				SET @HWRule = @HWRule_13
				SET @GridletID = @GridletID_13
              		END
	              	ELSE
			IF( @rivCount = 14 )
              		BEGIN
				SET @riv = @RuleID_14
				SET @rulestat = @RuleStatus_14
				SET @HWRule = @HWRule_14
				SET @GridletID = @GridletID_14
              		END
	              	ELSE
			IF( @rivCount = 15 )
			BEGIN
				SET @riv = @RuleID_15
				SET @rulestat = @RuleStatus_15
				SET @HWRule = @HWRule_15
				SET @GridletID = @GridletID_15
	              	END
	              	ELSE
			IF( @rivCount = 16 )
              		BEGIN
				SET @riv = @RuleID_16
				SET @rulestat = @RuleStatus_16
				SET @HWRule = @HWRule_16
				SET @GridletID = @GridletID_16
              		END
			ELSE
			IF( @rivCount = 17 )
              		BEGIN
				SET @riv = @RuleID_17
				SET @rulestat = @RuleStatus_17
				SET @HWRule = @HWRule_17
				SET @GridletID = @GridletID_17
              		END
	              	ELSE
			IF( @rivCount = 18 )
			BEGIN
				SET @riv = @RuleID_18
				SET @rulestat = @RuleStatus_18
				SET @HWRule = @HWRule_18
				SET @GridletID = @GridletID_18
              		END
	              	ELSE
			IF( @rivCount = 19 )
			BEGIN
				SET @riv = @RuleID_19
				SET @rulestat = @RuleStatus_19
				SET @HWRule = @HWRule_19
				SET @GridletID = @GridletID_19
			END
	              	ELSE
			IF( @rivCount = 20 )
			BEGIN
				SET @riv = @RuleID_20
				SET @rulestat = @RuleStatus_20
				SET @HWRule = @HWRule_20
				SET @GridletID = @GridletID_20
			END

			IF( ( @rulestat & 1 ) = 1 )
			BEGIN
				IF( @EMChargingStand != 0 )
				BEGIN
					/*  Need EM Report Position Inseted  */
					INSERT INTO Reporting..Report_EM_Positions ( 
						DemographicID, 
						DeviceID,
						TimeStamp, 
						RuleStatus, 
						RuleID,
						StandardTimeOffset, 
						DaylightTimeOffset, 
						HardwareType,
						CallRecID,
						DeviceStatus,
						HwRule )
					VALUES ( @DemographicID, 
						@DeviceID,
						@TimeStamp, 
						@rulestat, 
						@riv, 
						@StandardTimeOffset, 
						@DaylightTimeOffset,
						@HardwareType,
						@MtdCallsRecID,
						@DeviceStatus,
						@HwRule )
				END
				ELSE
				BEGIN
					/*  Need Report Position Inseted  */
					INSERT INTO Reporting..Report_MTDPositions ( 
						DemographicID, 
						DeviceID,								
						TimeStamp, 
						RuleStatus, 
						RuleID,
						StandardTimeOffset, 
						DaylightTimeOffset, 
						HardwareType,
						MtdCallsRecID,
						OneTimeSchedId,
						DeviceStatus,
						HWRule )
					VALUES ( @DemographicID, 
						@DeviceID,
						@TimeStamp, 
						@rulestat, 
						@riv, 
						@StandardTimeOffset, 
						@DaylightTimeOffset,
						@HardwareType,
						@MtdCallsRecID,
						@GridletID,
						@DeviceStatus,
						@HWRule )
				END
	              	END

			IF ( ( @rulestat & 2 ) = 2 )
	      		BEGIN	
				/*  Insert Alarm Record  */      
				INSERT INTO MTD_Alarms (DemographicID, DeviceID,  TimeStamp,  PointStatus,  RuleID, HWRule, RuleStatus, MtdCallsRecID, OneTimeSchedId, DeviceStatus )
              			VALUES (@DemographicID, @DeviceID, @TimeStamp, @PointStatus, @riv, @HWRule, @rulestat, @MtdCallsRecID, @GridletID, @DeviceStatus )
	      		END
	
	             		IF ( ( @rulestat & 4 ) = 4 )
			BEGIN
	                 		/*  Need RuleInAlarm  Inserted  */
				INSERT INTO RulesInAlarm ( PositionRecID, RuleID, InGrace, HWRule, RuleStatus, OneTimeSchedId )
             		 		VALUES ( @RecID, @riv, 0, @HWRule, @rulestat, @GridletID )
			END
                 
	    		SET @rivCount = @rivCount + 1
	
			IF ( @rivCount > @RulesInViolation )
			BEGIN
				BREAK
			END
      		END
	END
GO
/****** Object:  StoredProcedure [dbo].[dbl_InsertMtdPositions_05232006]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[dbl_InsertMtdPositions_05232006]
	@DemographicID int, @DeviceID int, @TimeStamp DateTime,
	@Longitude float, @Latitude float, @Speed smallint,
	@Heading smallint, @Elevation int, @PDOP real,
	@HDOP real, @VDOP real, @GPSMode tinyint,
	@SatellitesInView tinyint, @SVN binary(12), @SNR binary(12),  
	@Temperature smallint, @BatteryVoltage smallint,
	@PointStatus int, @GeoRuleGraceMask int, 
	@DeviceStatus int,
	@RulesInViolation tinyint,
	@StandardTimeOffset int, @DaylightTimeOffset int, @HardwareType tinyint,
	@MtdCallsRecID int,
	@EMChargingStand int,
	@RecID NUMERIC(13,0) OUTPUT,
	@AdjustedRIV TinyInt OUTPUT,
	@RuleID_01 int = 0, @RuleStatus_01 smallint = 0, @HWRule_01 int = 0, @GridletID_01 int = 0,
  	@RuleID_02 int = 0, @RuleStatus_02 smallint = 0, @HWRule_02 int = 0, @GridletID_02 int = 0,
  	@RuleID_03 int = 0, @RuleStatus_03 smallint = 0, @HWRule_03 int = 0, @GridletID_03 int = 0,
  	@RuleID_04 int = 0, @RuleStatus_04 smallint = 0, @HWRule_04 int = 0, @GridletID_04 int = 0,	
  	@RuleID_05 int = 0, @RuleStatus_05 smallint = 0, @HWRule_05 int = 0, @GridletID_05 int = 0,
  	@RuleID_06 int = 0, @RuleStatus_06 smallint = 0, @HWRule_06 int = 0, @GridletID_06 int = 0,	
  	@RuleID_07 int = 0, @RuleStatus_07 smallint = 0, @HWRule_07 int = 0, @GridletID_07 int = 0,
  	@RuleID_08 int = 0, @RuleStatus_08 smallint = 0, @HWRule_08 int = 0, @GridletID_08 int = 0,	
  	@RuleID_09 int = 0, @RuleStatus_09 smallint = 0, @HWRule_09 int = 0, @GridletID_09 int = 0,
  	@RuleID_10 int = 0, @RuleStatus_10 smallint = 0, @HWRule_10 int = 0, @GridletID_10 int = 0,	
  	@RuleID_11 int = 0, @RuleStatus_11 smallint = 0, @HWRule_11 int = 0, @GridletID_11 int = 0,
  	@RuleID_12 int = 0, @RuleStatus_12 smallint = 0, @HWRule_12 int = 0, @GridletID_12 int = 0,	
  	@RuleID_13 int = 0, @RuleStatus_13 smallint = 0, @HWRule_13 int = 0, @GridletID_13 int = 0,
  	@RuleID_14 int = 0, @RuleStatus_14 smallint = 0, @HWRule_14 int = 0, @GridletID_14 int = 0,	
  	@RuleID_15 int = 0, @RuleStatus_15 smallint = 0, @HWRule_15 int = 0, @GridletID_15 int = 0,
  	@RuleID_16 int = 0, @RuleStatus_16 smallint = 0, @HWRule_16 int = 0, @GridletID_16 int = 0,	
  	@RuleID_17 int = 0, @RuleStatus_17 smallint = 0, @HWRule_17 int = 0, @GridletID_17 int = 0,
  	@RuleID_18 int = 0, @RuleStatus_18 smallint = 0, @HWRule_18 int = 0, @GridletID_18 int = 0,	
  	@RuleID_19 int = 0, @RuleStatus_19 smallint = 0, @HWRule_19 int = 0, @GridletID_19 int = 0,
  	@RuleID_20 int = 0, @RuleStatus_20 smallint = 0, @HWRule_20 int = 0, @GridletID_20 int = 0

AS
	SET NOCOUNT ON
/*
	DECLARE @RuleID_01 int, @RuleStatus_01 smallint , @HWRule_01 int , @GridletID_01 int 
  	DECLARE @RuleID_02 int , @RuleStatus_02 smallint , @HWRule_02 int , @GridletID_02 int 
  	DECLARE @RuleID_03 int , @RuleStatus_03 smallint , @HWRule_03 int , @GridletID_03 int 
  	DECLARE @RuleID_04 int , @RuleStatus_04 smallint , @HWRule_04 int , @GridletID_04 int 	
  	DECLARE @RuleID_05 int , @RuleStatus_05 smallint , @HWRule_05 int , @GridletID_05 int 
  	DECLARE @RuleID_06 int , @RuleStatus_06 smallint , @HWRule_06 int , @GridletID_06 int 	
  	DECLARE @RuleID_07 int , @RuleStatus_07 smallint , @HWRule_07 int , @GridletID_07 int 
  	DECLARE @RuleID_08 int , @RuleStatus_08 smallint , @HWRule_08 int , @GridletID_08 int 	
  	DECLARE @RuleID_09 int , @RuleStatus_09 smallint , @HWRule_09 int , @GridletID_09 int 
  	DECLARE @RuleID_10 int , @RuleStatus_10 smallint , @HWRule_10 int , @GridletID_10 int 	
  	DECLARE @RuleID_11 int , @RuleStatus_11 smallint , @HWRule_11 int , @GridletID_11 int 
  	DECLARE @RuleID_12 int , @RuleStatus_12 smallint , @HWRule_12 int , @GridletID_12 int 	
  	DECLARE @RuleID_13 int , @RuleStatus_13 smallint , @HWRule_13 int , @GridletID_13 int 
  	DECLARE @RuleID_14 int , @RuleStatus_14 smallint , @HWRule_14 int , @GridletID_14 int 	
  	DECLARE @RuleID_15 int , @RuleStatus_15 smallint , @HWRule_15 int , @GridletID_15 int 
  	DECLARE @RuleID_16 int , @RuleStatus_16 smallint , @HWRule_16 int , @GridletID_16 int 	
  	DECLARE @RuleID_17 int , @RuleStatus_17 smallint , @HWRule_17 int , @GridletID_17 int 
  	DECLARE @RuleID_18 int , @RuleStatus_18 smallint , @HWRule_18 int , @GridletID_18 int 	
  	DECLARE @RuleID_19 int , @RuleStatus_19 smallint , @HWRule_19 int , @GridletID_19 int 
  	DECLARE @RuleID_20 int , @RuleStatus_20 smallint , @HWRule_20 int , @GridletID_20 int 
*/

	--DECLARE @RecID numeric(13,0)
	--DECLARE @PosRecID char(9)

	Declare @inAlarm		int
	Declare @lastTimeStamp	DateTime
  	Declare @rivCount		int
--	Declare @AdjustedRIV		tinyint
  	Declare @riv			int
  	Declare @rulestat		smallint
  	Declare @HWRule		int
	Declare @GridletID		int
	Declare @BIT04			int
	Declare @BIT14			int
	Declare @BIT05			int
	Declare @BIT20			int
	Declare @BIT21			int

	SET @BIT04 = 16
	SET @BIT05 = 32
	SET @BIT14 = 16384
	SET @BIT20 = 0x00100000
	SET @BIT21 = 0x00200000

	SET @AdjustedRIV = @RulesInViolation	

	IF( (@DeviceStatus & @BIT14)>0 )	
	BEGIN

		INSERT INTO LBS_Positions (DemographicID, DeviceID, TimeStamp, LAC, CID,
									MtdCallsRecID, DeviceStatus)
            				VALUES (@DemographicID, @DeviceID, @TimeStamp,
									@Latitude, @Longitude, 
									@MtdCallsRecID, @DeviceStatus)
	END
	
	ELSE

	BEGIN

		IF ( @RulesInViolation > 0 )
		BEGIN
      			SET @rivCount = 1
	      
      			WHILE ( 1=1 )
      			BEGIN
	              		IF( @rivCount = 1 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_01
              			END
	              		ELSE IF( @rivCount = 2 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_02
              			END
	              		ELSE IF( @rivCount = 3 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_03
              			END
	              		ELSE IF( @rivCount = 4 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_04
              			END
	              		ELSE IF( @rivCount = 5 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_05
              			END
	              		ELSE IF( @rivCount = 6 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_06
              			END
	              		ELSE IF( @rivCount = 7 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_07
              			END
	              		ELSE IF( @rivCount = 8 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_08
              			END
	              		ELSE IF( @rivCount = 9 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_09
              			END
	              		ELSE IF( @rivCount = 10 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_10
              			END
	              		ELSE IF( @rivCount = 11 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_11
              			END
	              		ELSE IF( @rivCount = 12 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_12
              			END
	              		ELSE IF( @rivCount = 13 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_13
              			END
	              		ELSE IF( @rivCount = 14 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_14
              			END
	              		ELSE IF( @rivCount = 15 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_15
              			END
	              		ELSE IF( @rivCount = 16 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_16
              			END
	              		ELSE IF( @rivCount = 17 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_17
              			END
	              		ELSE IF( @rivCount = 18 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_18
              			END
	              		ELSE IF( @rivCount = 19 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_19
              			END
	              		ELSE IF( @rivCount = 20 )
				BEGIN
	             		     		SET @rulestat = @RuleStatus_20
              			END

	             			IF ( ( @rulestat & 1 ) = 1  AND ( @rulestat & 4 ) != 4 )
				BEGIN
	                 			/*  decrement @AdjustedRIV  */
					SET @AdjustedRIV = @AdjustedRIV - 1
				END
	                 
	    			SET @rivCount = @rivCount + 1
		
				IF ( @rivCount > @RulesInViolation )
				BEGIN
					BREAK
				END
			END
		END


  		/* 03/09/2004 - rlp - using "@AdjustedRIV" for the RulesInViolation value */
		INSERT INTO MTD_Positions WITH (ROWLOCK) (DemographicID, DeviceID, TimeStamp, Longitude, Latitude,
								  Speed, Heading, Elevation, PDOP, HDOP, VDOP, GPSMode,
								  SatellitesInView, SVN, SNR, Temperature, BatteryVoltage,
								  PointStatus, GeoRuleGraceMask, RulesInViolation, MtdCallsRecID,
					  DeviceStatus)
            		VALUES (@DemographicID, @DeviceID, @TimeStamp,
								  @Longitude, @Latitude, @Speed,
								  @Heading, @Elevation, @PDOP,
								  @HDOP, @VDOP, @GPSMode,
								  @SatellitesInView, @SVN,
								  @SNR,  @Temperature, @BatteryVoltage,
								  @PointStatus, @GeoRuleGraceMask, @AdjustedRIV, @MtdCallsRecID, @DeviceStatus)
	      
		SELECT @RecID = @@Identity
				--SELECT @RecID = convert(Numeric(13,0), 999999999999)

		/******************************************************************
		  If we have RulesInAlarm, insert a point into MTD_Alarms.  Then,
		  for each RuleInAlarm, insert a row into the RulesInAlarm table
		*******************************************************************/  
	  
		IF ( @RulesInViolation > 0 )
		BEGIN
      			SET @rivCount         = 1
	      
      			WHILE ( 1=1 )
      			BEGIN
	              		IF( @rivCount = 1 )
				BEGIN
          		     			SET @riv = @RuleID_01
	             		     		SET @rulestat = @RuleStatus_01
             			     		SET @HWRule = @HWRule_01
					SET @GridletID = @GridletID_01
              			END
	              
              			ELSE
              			IF( @rivCount = 2 )
	              		BEGIN
					SET @riv = @RuleID_02
                  				SET @rulestat = @RuleStatus_02
                  				SET @HWRule = @HWRule_02
					SET @GridletID = @GridletID_02
	              		END
	              
				ELSE
              			IF( @rivCount = 3 )
	              		BEGIN
	             	     			SET @riv = @RuleID_03
					SET @rulestat = @RuleStatus_03
					SET @HWRule = @HWRule_03
					SET @GridletID = @GridletID_03
              			END
	              
              			ELSE
              			IF( @rivCount = 4 )
	              		BEGIN
             			     		SET @riv = @RuleID_04
					SET @rulestat = @RuleStatus_04
	                  			SET @HWRule = @HWRule_04
					SET @GridletID = @GridletID_04
	              		END
	              
				ELSE
              			IF( @rivCount = 5 )
	              		BEGIN
					SET @riv = @RuleID_05
	                  			SET @rulestat = @RuleStatus_05
					SET @HWRule = @HWRule_05
					SET @GridletID = @GridletID_05
	              		END
	              
				ELSE
              			IF( @rivCount = 6 )
	              		BEGIN
					SET @riv = @RuleID_06
					SET @rulestat = @RuleStatus_06
					SET @HWRule = @HWRule_06
					SET @GridletID = @GridletID_06
	              		END
	              
				ELSE
              			IF( @rivCount = 7 )
	              		BEGIN
					SET @riv = @RuleID_07
	                  			SET @rulestat = @RuleStatus_07
					SET @HWRule = @HWRule_07
					SET @GridletID = @GridletID_07
	              		END
	              
				ELSE
              			IF( @rivCount = 8 )
	              		BEGIN
					SET @riv = @RuleID_08
					SET @rulestat = @RuleStatus_08
					SET @HWRule = @HWRule_08
					SET @GridletID = @GridletID_08
	              		END
	              
				ELSE
              			IF( @rivCount = 9 )
				BEGIN
					SET @riv = @RuleID_09
					SET @rulestat = @RuleStatus_09
					SET @HWRule = @HWRule_09
					SET @GridletID = @GridletID_09
	              		END
	              
				ELSE
              			IF( @rivCount = 10 )
	              		BEGIN
					SET @riv = @RuleID_10
					SET @rulestat = @RuleStatus_10
					SET @HWRule = @HWRule_10
					SET @GridletID = @GridletID_10
	              		END
	              
				ELSE
              			IF( @rivCount = 11 )
				BEGIN
					SET @riv = @RuleID_11
					SET @rulestat = @RuleStatus_11
					SET @HWRule = @HWRule_11
					SET @GridletID = @GridletID_11
				END

				ELSE
				IF( @rivCount = 12 )
				BEGIN
					SET @riv = @RuleID_12
					SET @rulestat = @RuleStatus_12
					SET @HWRule = @HWRule_12
					SET @GridletID = @GridletID_12
	              		END

	              		ELSE
				IF( @rivCount = 13 )
              			BEGIN
					SET @riv = @RuleID_13
					SET @rulestat = @RuleStatus_13
					SET @HWRule = @HWRule_13
					SET @GridletID = @GridletID_13
              			END
	              		ELSE
				IF( @rivCount = 14 )
              			BEGIN
					SET @riv = @RuleID_14
					SET @rulestat = @RuleStatus_14
					SET @HWRule = @HWRule_14
					SET @GridletID = @GridletID_14
              			END
	              		ELSE
				IF( @rivCount = 15 )
				BEGIN
					SET @riv = @RuleID_15
					SET @rulestat = @RuleStatus_15
					SET @HWRule = @HWRule_15
					SET @GridletID = @GridletID_15
	              		END
	              		ELSE
				IF( @rivCount = 16 )
              			BEGIN
					SET @riv = @RuleID_16
					SET @rulestat = @RuleStatus_16
					SET @HWRule = @HWRule_16
					SET @GridletID = @GridletID_16
              			END
				ELSE
				IF( @rivCount = 17 )
              			BEGIN
					SET @riv = @RuleID_17
					SET @rulestat = @RuleStatus_17
					SET @HWRule = @HWRule_17
					SET @GridletID = @GridletID_17
              			END
	              		ELSE
				IF( @rivCount = 18 )
				BEGIN
					SET @riv = @RuleID_18
					SET @rulestat = @RuleStatus_18
					SET @HWRule = @HWRule_18
					SET @GridletID = @GridletID_18
              			END
	              		ELSE
				IF( @rivCount = 19 )
				BEGIN
					SET @riv = @RuleID_19
					SET @rulestat = @RuleStatus_19
					SET @HWRule = @HWRule_19
					SET @GridletID = @GridletID_19
				END
	              		ELSE
				IF( @rivCount = 20 )
				BEGIN
					SET @riv = @RuleID_20
					SET @rulestat = @RuleStatus_20
					SET @HWRule = @HWRule_20
					SET @GridletID = @GridletID_20
				END

				IF( ( @rulestat & 1 ) = 1 )
				BEGIN
					IF( @EMChargingStand != 0 )
					BEGIN
						/*  Need EM Report Position Inseted  */
						INSERT INTO Reporting..Report_EM_Positions WITH (ROWLOCK) ( 
							DemographicID, 
							DeviceID,
							TimeStamp, 
							RuleStatus, 
							RuleID,
							StandardTimeOffset, 
							DaylightTimeOffset, 
							HardwareType,
							CallRecID,
							DeviceStatus,
							HwRule )
						VALUES ( @DemographicID, 
							@DeviceID,
							@TimeStamp, 
							@rulestat, 
							@riv, 
							@StandardTimeOffset, 
							@DaylightTimeOffset,
							@HardwareType,
							@MtdCallsRecID,
							@DeviceStatus,
							@HwRule )
					END
					ELSE
					BEGIN
						/*  Need Report Position Inseted  */
						INSERT INTO Reporting..Report_MTDPositions  WITH (ROWLOCK) ( 
							DemographicID, 
							DeviceID,
							TimeStamp, 
							RuleStatus, 
							RuleID,
							StandardTimeOffset, 
							DaylightTimeOffset, 
							HardwareType,
							MtdCallsRecID,
							OneTimeSchedId,
							DeviceStatus,
							HwRule )
						VALUES ( @DemographicID, 
							@DeviceID,
							@TimeStamp, 
							@rulestat, 
							@riv, 
							@StandardTimeOffset, 
							@DaylightTimeOffset,
							@HardwareType,
							@MtdCallsRecID,
							@GridletID,
							@DeviceStatus,
							@HwRule )
					END
	              		END

				IF ( ( @rulestat & 2 ) = 2 )
	      			BEGIN	
					/*  Insert Alarm Record  */      
					INSERT INTO MTD_Alarms  WITH (ROWLOCK) (DemographicID, DeviceID,  TimeStamp,  PointStatus,  RuleID, HWRule, RuleStatus, MtdCallsRecID, OneTimeSchedId, DeviceStatus )
              				VALUES (@DemographicID, @DeviceID, @TimeStamp, @PointStatus, @riv, @HWRule, @rulestat, @MtdCallsRecID, @GridletID, @DeviceStatus )
	      			END
		
	             			IF ( ( @rulestat & 4 ) = 4 )
				BEGIN
	                 			/*  Need RuleInAlarm  Inserted  */
					INSERT INTO RulesInAlarm  WITH (ROWLOCK) ( PositionRecID, RuleID, InGrace, HWRule, RuleStatus, OneTimeSchedId )             		 			VALUES ( @RecID, @riv, 0, @HWRule, @rulestat, @GridletID )
				END
	               
	    			SET @rivCount = @rivCount + 1
		
				IF ( @rivCount > @RulesInViolation )
				BEGIN
					BREAK
				END
      			END
		END
	END
GO
/****** Object:  StoredProcedure [dbo].[dbl_InsertMtdPositions_06112003_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[dbl_InsertMtdPositions_06112003_DEL]
	@DemographicID int, @DeviceID int, @TimeStamp DateTime,
	@Longitude float, @Latitude float, @Speed smallint,
	@Heading smallint, @Elevation int, @PDOP real,
	@HDOP real, @VDOP real, @GPSMode tinyint,
	@SatellitesInView tinyint, @SVN binary(12), @SNR binary(12),  
	@Temperature smallint, @BatteryVoltage smallint,
	@PointStatus int, @GeoRuleGraceMask int, 
	@DeviceStatus int,
	@RulesInViolation tinyint,
	@StandardTimeOffset int, @DaylightTimeOffset int, @HardwareType tinyint,
	@MtdCallsRecID int,
	@RuleID_01 int = 0, @RuleStatus_01 smallint = 0, @HWRule_01 int = 0,
  	@RuleID_02 int = 0, @RuleStatus_02 smallint = 0, @HWRule_02 int = 0,
  	@RuleID_03 int = 0, @RuleStatus_03 smallint = 0, @HWRule_03 int = 0,
  	@RuleID_04 int = 0, @RuleStatus_04 smallint = 0, @HWRule_04 int = 0,	
  	@RuleID_05 int = 0, @RuleStatus_05 smallint = 0, @HWRule_05 int = 0,
  	@RuleID_06 int = 0, @RuleStatus_06 smallint = 0, @HWRule_06 int = 0,	
  	@RuleID_07 int = 0, @RuleStatus_07 smallint = 0, @HWRule_07 int = 0,
  	@RuleID_08 int = 0, @RuleStatus_08 smallint = 0, @HWRule_08 int = 0,	
  	@RuleID_09 int = 0, @RuleStatus_09 smallint = 0, @HWRule_09 int = 0,
  	@RuleID_10 int = 0, @RuleStatus_10 smallint = 0, @HWRule_10 int = 0,	
  	@RuleID_11 int = 0, @RuleStatus_11 smallint = 0, @HWRule_11 int = 0,
  	@RuleID_12 int = 0, @RuleStatus_12 smallint = 0, @HWRule_12 int = 0,	
  	@RuleID_13 int = 0, @RuleStatus_13 smallint = 0, @HWRule_13 int = 0,
  	@RuleID_14 int = 0, @RuleStatus_14 smallint = 0, @HWRule_14 int = 0,	
  	@RuleID_15 int = 0, @RuleStatus_15 smallint = 0, @HWRule_15 int = 0,
  	@RuleID_16 int = 0, @RuleStatus_16 smallint = 0, @HWRule_16 int = 0,	
  	@RuleID_17 int = 0, @RuleStatus_17 smallint = 0, @HWRule_17 int = 0,
  	@RuleID_18 int = 0, @RuleStatus_18 smallint = 0, @HWRule_18 int = 0,	
  	@RuleID_19 int = 0, @RuleStatus_19 smallint = 0, @HWRule_19 int = 0,
  	@RuleID_20 int = 0, @RuleStatus_20 smallint = 0, @HWRule_20 int = 0
	
AS
	Declare @RecID              	numeric(13,0)
	Declare @inAlarm            	int
	Declare @lastTimeStamp      	DateTime
  	Declare @rivCount	        int
  	Declare @riv                	int
  	Declare @rulestat           	smallint
  	Declare @HWRule             	int
  
	INSERT INTO MTD_Positions (DemographicID, DeviceID, TimeStamp, Longitude, Latitude,
                              Speed, Heading, Elevation, PDOP, HDOP, VDOP, GPSMode,
                              SatellitesInView, SVN, SNR, Temperature, BatteryVoltage,
                              PointStatus, GeoRuleGraceMask, RulesInViolation, MtdCallsRecID,
			      DeviceStatus)
            	VALUES (@DemographicID, @DeviceID, @TimeStamp,
                              @Longitude, @Latitude, @Speed,
                              @Heading, @Elevation, @PDOP,
                              @HDOP, @VDOP, @GPSMode,
                              @SatellitesInView, @SVN,
                              @SNR,  @Temperature, @BatteryVoltage,
                              @PointStatus, @GeoRuleGraceMask, @RulesInViolation, @MtdCallsRecID, @DeviceStatus)
      
	SELECT @RecID = @@Identity
    		--print "PositionRecID:" + convert( char(13), @RecID )

	/******************************************************************
	  If we have RulesInAlarm, insert a point into MTD_Alarms.  Then,
	  for each RuleInAlarm, insert a row into the RulesInAlarm table
	*******************************************************************/  
  
	IF ( @RulesInViolation > 0 )
	BEGIN
      		SET @rivCount         = 1
      
      		WHILE ( 1=1 )
      		BEGIN
	              	IF( @rivCount = 1 )
             		 	BEGIN
             		     		SET @riv = @RuleID_01
             		     		SET @rulestat = @RuleStatus_01
             		     		SET @HWRule = @HWRule_01
              		END
              
              		ELSE
              		IF( @rivCount = 2 )
	              	BEGIN
             		     		SET @riv = @RuleID_02
                  			SET @rulestat = @RuleStatus_02
                  			SET @HWRule = @HWRule_02
	              	END
              
             		 	ELSE
              		IF( @rivCount = 3 )
	              	BEGIN
             		     		SET @riv = @RuleID_03
                  			SET @rulestat = @RuleStatus_03
                  			SET @HWRule = @HWRule_03
              		END
              
              		ELSE
              		IF( @rivCount = 4 )
	              	BEGIN
             		     		SET @riv = @RuleID_04
                  			SET @rulestat = @RuleStatus_04
                  			SET @HWRule = @HWRule_04
	              	END
              
             		 	ELSE
              		IF( @rivCount = 5 )
	              	BEGIN
             		     		SET @riv = @RuleID_05
                  			SET @rulestat = @RuleStatus_05
                  			SET @HWRule = @HWRule_05
	              	END
              
             		 	ELSE
              		IF( @rivCount = 6 )
	              	BEGIN
             		     		SET @riv = @RuleID_06
                  			SET @rulestat = @RuleStatus_06
                  			SET @HWRule = @HWRule_06
	              	END
              
             		 	ELSE
              		IF( @rivCount = 7 )
	              	BEGIN
             		     		SET @riv = @RuleID_07
                  			SET @rulestat = @RuleStatus_07
                  			SET @HWRule = @HWRule_07
	              	END
              
             		 	ELSE
              		IF( @rivCount = 8 )
	              	BEGIN
             		     		SET @riv = @RuleID_08
                  			SET @rulestat = @RuleStatus_08
                  			SET @HWRule = @HWRule_08
	              	END
              
             		 	ELSE
              		IF( @rivCount = 9 )
 	BEGIN
         		     		SET @riv = @RuleID_09
       			SET @rulestat = @RuleStatus_09
                  			SET @HWRule = @HWRule_09
	              	END
              
             		 	ELSE
              		IF( @rivCount = 10 )
	              	BEGIN
             		     		SET @riv = @RuleID_10
                  			SET @rulestat = @RuleStatus_10
                  			SET @HWRule = @HWRule_10
	              	END
              
             		 	ELSE
              		IF( @rivCount = 11 )
	              	BEGIN
             		     		SET @riv = @RuleID_11
                  			SET @rulestat = @RuleStatus_11
                  			SET @HWRule = @HWRule_11
	              	END

	              	ELSE
             		 	IF( @rivCount = 12 )
              		BEGIN
		             		SET @riv = @RuleID_12
                  			SET @rulestat = @RuleStatus_12
                  			SET @HWRule = @HWRule_12
	              	END

	              	ELSE
             		 	IF( @rivCount = 13 )
              		BEGIN
                  			SET @riv = @RuleID_13
	                  		SET @rulestat = @RuleStatus_13
             		     		SET @HWRule = @HWRule_13
              		END

	              	ELSE
             		 	IF( @rivCount = 14 )
              		BEGIN
                  			SET @riv = @RuleID_14
	                  		SET @rulestat = @RuleStatus_14
             		     		SET @HWRule = @HWRule_14
              		END

	              	ELSE
             		 	IF( @rivCount = 15 )
             		 	BEGIN
             		     		SET @riv = @RuleID_15
                  			SET @rulestat = @RuleStatus_15
                  			SET @HWRule = @HWRule_15
	              	END

	              	ELSE
             		 	IF( @rivCount = 16 )
              		BEGIN
                  			SET @riv = @RuleID_16
	                  		SET @rulestat = @RuleStatus_16
             		     		SET @HWRule = @HWRule_16
              		END

	              	ELSE
             		 	IF( @rivCount = 17 )
              		BEGIN
                  			SET @riv = @RuleID_17
	                  		SET @rulestat = @RuleStatus_17
             		     		SET @HWRule = @HWRule_17
              		END

	              	ELSE
             		 	IF( @rivCount = 18 )
	             		 BEGIN
                  			SET @riv = @RuleID_18
	                  		SET @rulestat = @RuleStatus_18
             		     		SET @HWRule = @HWRule_18
              		END

	              	ELSE
             		 	IF( @rivCount = 19 )
              		BEGIN
                  			SET @riv = @RuleID_19
	                  		SET @rulestat = @RuleStatus_19
             		     		SET @HWRule = @HWRule_19
              		END

	              	ELSE
             		 	IF( @rivCount = 20 )
              		BEGIN
                  			SET @riv = @RuleID_20
	                  		SET @rulestat = @RuleStatus_20
             		     		SET @HWRule = @HWRule_20
              		END

	              	IF ( ( @rulestat & 1 ) = 1 )
             		 	BEGIN
				/*  Need Report Position Inseted  */
                			INSERT INTO Reporting..Report_MTDPositions ( 
						DemographicID, 
						TimeStamp, 
						RuleStatus, 
						RuleID,
						StandardTimeOffset, 
						DaylightTimeOffset, 
						HardwareType,
						MtdCallsRecID )
                                      	VALUES ( @DemographicID, 
						@TimeStamp, 
						@rulestat, 
						@riv, 
						@StandardTimeOffset, 
						@DaylightTimeOffset,
						@HardwareType,
						@MtdCallsRecID )
	              	END

			IF ( ( @rulestat & 2 ) = 2 )
	      		BEGIN	
				/*  Insert Alarm Record  */      
				INSERT INTO MTD_Alarms (DemographicID, DeviceID,  TimeStamp,  PointStatus,  RuleID, HWRule, RuleStatus, MtdCallsRecID )
              			VALUES (@DemographicID, @DeviceID, @TimeStamp, @PointStatus, @riv, @HWRule, @rulestat, @MtdCallsRecID )
	      		END
	
             	 		IF ( ( @rulestat & 4 ) = 4 )
              		BEGIN
	                 		/*  Need RuleInAlarm  Inserted  */
				INSERT INTO RulesInAlarm ( PositionRecID, RuleID, InGrace, HWRule, RuleStatus )
             		 		VALUES ( @RecID, @riv, 0, @HWRule, @rulestat )
             		 	END
                 
	    		SET @rivCount = @rivCount + 1
	
			IF ( @rivCount > @RulesInViolation )
			BEGIN
				BREAK
			END
      		END
	END








GO
/****** Object:  StoredProcedure [dbo].[dbl_InsertMtdPositions_11042003_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[dbl_InsertMtdPositions_11042003_DEL]
	@DemographicID int, @DeviceID int, @TimeStamp DateTime,
	@Longitude float, @Latitude float, @Speed smallint,
	@Heading smallint, @Elevation int, @PDOP real,
	@HDOP real, @VDOP real, @GPSMode tinyint,
	@SatellitesInView tinyint, @SVN binary(12), @SNR binary(12),  
	@Temperature smallint, @BatteryVoltage smallint,
	@PointStatus int, @GeoRuleGraceMask int, 
	@DeviceStatus int,
	@RulesInViolation tinyint,
	@StandardTimeOffset int, @DaylightTimeOffset int, @HardwareType tinyint,
	@MtdCallsRecID int,
	@RuleID_01 int = 0, @RuleStatus_01 smallint = 0, @HWRule_01 int = 0, @GridletID_01 int = 0,
  	@RuleID_02 int = 0, @RuleStatus_02 smallint = 0, @HWRule_02 int = 0, @GridletID_02 int = 0,
  	@RuleID_03 int = 0, @RuleStatus_03 smallint = 0, @HWRule_03 int = 0, @GridletID_03 int = 0,
  	@RuleID_04 int = 0, @RuleStatus_04 smallint = 0, @HWRule_04 int = 0, @GridletID_04 int = 0,	
  	@RuleID_05 int = 0, @RuleStatus_05 smallint = 0, @HWRule_05 int = 0, @GridletID_05 int = 0,
  	@RuleID_06 int = 0, @RuleStatus_06 smallint = 0, @HWRule_06 int = 0, @GridletID_06 int = 0,	
  	@RuleID_07 int = 0, @RuleStatus_07 smallint = 0, @HWRule_07 int = 0, @GridletID_07 int = 0,
  	@RuleID_08 int = 0, @RuleStatus_08 smallint = 0, @HWRule_08 int = 0, @GridletID_08 int = 0,	
  	@RuleID_09 int = 0, @RuleStatus_09 smallint = 0, @HWRule_09 int = 0, @GridletID_09 int = 0,
  	@RuleID_10 int = 0, @RuleStatus_10 smallint = 0, @HWRule_10 int = 0, @GridletID_10 int = 0,	
  	@RuleID_11 int = 0, @RuleStatus_11 smallint = 0, @HWRule_11 int = 0, @GridletID_11 int = 0,
  	@RuleID_12 int = 0, @RuleStatus_12 smallint = 0, @HWRule_12 int = 0, @GridletID_12 int = 0,	
  	@RuleID_13 int = 0, @RuleStatus_13 smallint = 0, @HWRule_13 int = 0, @GridletID_13 int = 0,
  	@RuleID_14 int = 0, @RuleStatus_14 smallint = 0, @HWRule_14 int = 0, @GridletID_14 int = 0,	
  	@RuleID_15 int = 0, @RuleStatus_15 smallint = 0, @HWRule_15 int = 0, @GridletID_15 int = 0,
  	@RuleID_16 int = 0, @RuleStatus_16 smallint = 0, @HWRule_16 int = 0, @GridletID_16 int = 0,	
  	@RuleID_17 int = 0, @RuleStatus_17 smallint = 0, @HWRule_17 int = 0, @GridletID_17 int = 0,
  	@RuleID_18 int = 0, @RuleStatus_18 smallint = 0, @HWRule_18 int = 0, @GridletID_18 int = 0,	
  	@RuleID_19 int = 0, @RuleStatus_19 smallint = 0, @HWRule_19 int = 0, @GridletID_19 int = 0,
  	@RuleID_20 int = 0, @RuleStatus_20 smallint = 0, @HWRule_20 int = 0, @GridletID_20 int = 0
	
AS
	Declare @RecID		numeric(13,0)
	Declare @inAlarm 		int
	Declare @lastTimeStamp	DateTime
  	Declare @rivCount		int
  	Declare @riv			int
  	Declare @rulestat		smallint
  	Declare @HWRule		int
	Declare @GridletID		int
  
	INSERT INTO MTD_Positions (DemographicID, DeviceID, TimeStamp, Longitude, Latitude,
                              Speed, Heading, Elevation, PDOP, HDOP, VDOP, GPSMode,
                              SatellitesInView, SVN, SNR, Temperature, BatteryVoltage,
                              PointStatus, GeoRuleGraceMask, RulesInViolation, MtdCallsRecID,
			      DeviceStatus)
            	VALUES (@DemographicID, @DeviceID, @TimeStamp,
                              @Longitude, @Latitude, @Speed,
                              @Heading, @Elevation, @PDOP,
                              @HDOP, @VDOP, @GPSMode,
                              @SatellitesInView, @SVN,
                              @SNR,  @Temperature, @BatteryVoltage,
                              @PointStatus, @GeoRuleGraceMask, @RulesInViolation, @MtdCallsRecID, @DeviceStatus)
      
	SELECT @RecID = @@Identity
    		--print "PositionRecID:" + convert( char(13), @RecID )

	/******************************************************************
	  If we have RulesInAlarm, insert a point into MTD_Alarms.  Then,
	  for each RuleInAlarm, insert a row into the RulesInAlarm table
	*******************************************************************/  
  
	IF ( @RulesInViolation > 0 )
	BEGIN
      		SET @rivCount         = 1
      
      		WHILE ( 1=1 )
      		BEGIN
	              	IF( @rivCount = 1 )
			BEGIN
          		     		SET @riv = @RuleID_01
	             		     	SET @rulestat = @RuleStatus_01
             			     	SET @HWRule = @HWRule_01
				SET @GridletID = @GridletID_01
              		END
              
              		ELSE
              		IF( @rivCount = 2 )
	              	BEGIN
				SET @riv = @RuleID_02
                  			SET @rulestat = @RuleStatus_02
                  			SET @HWRule = @HWRule_02
				SET @GridletID = @GridletID_02
	              	END
              
             	 	ELSE
              		IF( @rivCount = 3 )
	              	BEGIN
	             	     		SET @riv = @RuleID_03
				SET @rulestat = @RuleStatus_03
				SET @HWRule = @HWRule_03
				SET @GridletID = @GridletID_03
              		END
              
              		ELSE
              		IF( @rivCount = 4 )
	              	BEGIN
             			     	SET @riv = @RuleID_04
				SET @rulestat = @RuleStatus_04
	                  		SET @HWRule = @HWRule_04
				SET @GridletID = @GridletID_04
	              	END
              
             	 	ELSE
              		IF( @rivCount = 5 )
	              	BEGIN
				SET @riv = @RuleID_05
	                  		SET @rulestat = @RuleStatus_05
				SET @HWRule = @HWRule_05
				SET @GridletID = @GridletID_05
	              	END
              
             	 	ELSE
              		IF( @rivCount = 6 )
	              	BEGIN
				SET @riv = @RuleID_06
				SET @rulestat = @RuleStatus_06
				SET @HWRule = @HWRule_06
				SET @GridletID = @GridletID_06
	              	END
              
             	 	ELSE
              		IF( @rivCount = 7 )
	              	BEGIN
				SET @riv = @RuleID_07
	                  		SET @rulestat = @RuleStatus_07
				SET @HWRule = @HWRule_07
				SET @GridletID = @GridletID_07
	              	END
              
            		 ELSE
              		IF( @rivCount = 8 )
	              	BEGIN
				SET @riv = @RuleID_08
				SET @rulestat = @RuleStatus_08
				SET @HWRule = @HWRule_08
				SET @GridletID = @GridletID_08
	              	END
              
             	 	ELSE
              		IF( @rivCount = 9 )
			BEGIN
				SET @riv = @RuleID_09
				SET @rulestat = @RuleStatus_09
				SET @HWRule = @HWRule_09
				SET @GridletID = @GridletID_09
	              	END
              
             	 	ELSE
              		IF( @rivCount = 10 )
	              	BEGIN
				SET @riv = @RuleID_10
				SET @rulestat = @RuleStatus_10
				SET @HWRule = @HWRule_10
				SET @GridletID = @GridletID_10
	              	END
              
             	 	ELSE
              		IF( @rivCount = 11 )
			BEGIN
				SET @riv = @RuleID_11
				SET @rulestat = @RuleStatus_11
				SET @HWRule = @HWRule_11
				SET @GridletID = @GridletID_11
			END

			ELSE
			IF( @rivCount = 12 )
			BEGIN
				SET @riv = @RuleID_12
				SET @rulestat = @RuleStatus_12
				SET @HWRule = @HWRule_12
				SET @GridletID = @GridletID_12
	              	END

	              	ELSE
			IF( @rivCount = 13 )
              		BEGIN
				SET @riv = @RuleID_13
				SET @rulestat = @RuleStatus_13
				SET @HWRule = @HWRule_13
				SET @GridletID = @GridletID_13
              		END
	              	ELSE
			IF( @rivCount = 14 )
              		BEGIN
				SET @riv = @RuleID_14
				SET @rulestat = @RuleStatus_14
				SET @HWRule = @HWRule_14
				SET @GridletID = @GridletID_14
              		END
	              	ELSE
			IF( @rivCount = 15 )
			BEGIN
				SET @riv = @RuleID_15
				SET @rulestat = @RuleStatus_15
				SET @HWRule = @HWRule_15
				SET @GridletID = @GridletID_15
	              	END
	              	ELSE
			IF( @rivCount = 16 )
              		BEGIN
				SET @riv = @RuleID_16
				SET @rulestat = @RuleStatus_16
				SET @HWRule = @HWRule_16
				SET @GridletID = @GridletID_16
              		END
			ELSE
			IF( @rivCount = 17 )
              		BEGIN
				SET @riv = @RuleID_17
				SET @rulestat = @RuleStatus_17
				SET @HWRule = @HWRule_17
				SET @GridletID = @GridletID_17
              		END
	              	ELSE
			IF( @rivCount = 18 )
			BEGIN
				SET @riv = @RuleID_18
				SET @rulestat = @RuleStatus_18
				SET @HWRule = @HWRule_18
				SET @GridletID = @GridletID_18
              		END
	              	ELSE
			IF( @rivCount = 19 )
			BEGIN
				SET @riv = @RuleID_19
				SET @rulestat = @RuleStatus_19
				SET @HWRule = @HWRule_19
				SET @GridletID = @GridletID_19
			END
	              	ELSE
			IF( @rivCount = 20 )
			BEGIN
				SET @riv = @RuleID_20
				SET @rulestat = @RuleStatus_20
				SET @HWRule = @HWRule_20
				SET @GridletID = @GridletID_20
			END

	              	IF ( ( @rulestat & 1 ) = 1 )
			BEGIN
				/*  Need Report Position Inseted  */
               			INSERT INTO Reporting..Report_MTDPositions ( 
					DemographicID, 
					TimeStamp, 
					RuleStatus, 
					RuleID,
					StandardTimeOffset, 
					DaylightTimeOffset, 
					HardwareType,
					MtdCallsRecID,
					OneTimeSchedId )
				VALUES ( @DemographicID, 
					@TimeStamp, 
					@rulestat, 
					@riv, 
					@StandardTimeOffset, 
					@DaylightTimeOffset,
					@HardwareType,
					@MtdCallsRecID,
					@GridletID )
	              	END

			IF ( ( @rulestat & 2 ) = 2 )
	      		BEGIN	
				/*  Insert Alarm Record  */      
				INSERT INTO MTD_Alarms (DemographicID, DeviceID,  TimeStamp,  PointStatus,  RuleID, HWRule, RuleStatus, MtdCallsRecID, OneTimeSchedId )
              			VALUES (@DemographicID, @DeviceID, @TimeStamp, @PointStatus, @riv, @HWRule, @rulestat, @MtdCallsRecID, @GridletID )
	      		END
	
             	 		IF ( ( @rulestat & 4 ) = 4 )
              		BEGIN
	                 		/*  Need RuleInAlarm  Inserted  */
				INSERT INTO RulesInAlarm ( PositionRecID, RuleID, InGrace, HWRule, RuleStatus, OneTimeSchedId )
             		 		VALUES ( @RecID, @riv, 0, @HWRule, @rulestat, @GridletID )
             		 	END
                 
	    		SET @rivCount = @rivCount + 1
	
			IF ( @rivCount > @RulesInViolation )
			BEGIN
				BREAK
			END
      		END
	END









GO
/****** Object:  StoredProcedure [dbo].[dbl_UpdateDeviceCalls_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create Procedure [dbo].[dbl_UpdateDeviceCalls_DEL] 
	@VCommUserRecID INT, @DeviceID INT
AS
BEGIN
	SET NOCOUNT ON;
	Update VCommDeviceCalls WITH (ROWLOCK) 
	SET DateCompleted = GetDate(), CompletedByUserRecID = @VCommUserRecID
	WHERE DeviceID = @DeviceID
	AND DateCompleted IS NULL
END
GO
/****** Object:  StoredProcedure [dbo].[dbl_UpdateMtdActionCompleted_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:	Ron Pierce
-- Create date: 	6.6.6
-- Description:	Updates MtdActions with the completed timestamp and marks the MtdAction as completed
-- =============================================
CREATE PROCEDURE [dbo].[dbl_UpdateMtdActionCompleted_DEL]
	@MtdActionID INT
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE MTDActions WITH (ROWLOCK) 
	SET ActionInProgress = 'Y', DateCompleted = GetDate()
	WHERE MTDActionID = @MtdActionID
END

GO
/****** Object:  StoredProcedure [dbo].[dbl_UpdateMTDLastPositions_05262006_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[dbl_UpdateMTDLastPositions_05262006_DEL]
	@DemographicID int, @DeviceID int, @TimeStamp DateTime,
	@Longitude float, @Latitude float, @Speed smallint,
	@Heading smallint, @Elevation int, @PDOP real,
	@HDOP real, @VDOP real, @GPSMode tinyint,
	@SatellitesInView tinyint, @SVN binary(12), @SNR binary(12),  
	@Temperature smallint, @BatteryVoltage smallint,
	@PointStatus int, @GeoRuleGraceMask int, 
	@DeviceStatus int,
	@RulesInViolation tinyint,
	@StandardTimeOffset int, @DaylightTimeOffset int, @HardwareType tinyint,
	@MtdCallsRecID int,
	@EMChargingStand int,
	@RecID NUMERIC(13,0),
	@AdjustedRIV TinyInt
	
AS
	SET NOCOUNT ON
	DECLARE @CHG_MASK int
	DECLARE @MTD_MASK int
	DECLARE @lastTimeStamp DateTime
	DECLARE @lastRecID NUMERIC(13,0)
	DECLARE @MinDeviceID int
	DECLARE @MaxDeviceID int

	SET @CHG_MASK = 0x03000000
	SET @MTD_MASK = 0x02000000


/* 09/07/2007 - rlp */
return (0)


	IF( @DeviceID > @CHG_MASK)
	BEGIN
		SET @MinDeviceID = @CHG_MASK
		SET @MaxDeviceID = 0x03ffffff
	END
	ELSE
	BEGIN
		SET @MinDeviceID = @MTD_MASK
		SET @MaxDeviceID = 0x02ffffff
	END


	BEGIN
		SELECT @lastRecID = PositionRecID, @lastTimeStamp = TimeStamp 
		FROM MTD_LastPositions (NOLOCK)
		WHERE (DemographicID = @DemographicID) AND (DeviceID > @MinDeviceID AND DeviceID <= @MaxDeviceID)

		IF (@lastRecID>0)
		BEGIN
			IF ( @lastTimeStamp is NULL) OR ( @TimeStamp < DateAdd(hour, 24, GetDate()) AND @Timestamp > @lastTimeStamp )
			BEGIN
				UPDATE MTD_LastPositions WITH (ROWLOCK) SET PositionRecID = @RecID, DemographicID=@DemographicID, DeviceID=@DeviceID,
					TimeStamp=@TimeStamp, Longitude=@Longitude, Latitude=@Latitude,
					Speed=@Speed, Heading=@Heading, Elevation=@Elevation, PDOP=@PDOP, HDOP=@HDOP, VDOP=@VDOP, 
					GPSMode=@GPSMode, SatellitesInView=@SatellitesInView, SVN=@SVN, SNR=@SNR, Temperature=@Temperature, 
					BatteryVoltage=@BatteryVoltage, PointStatus=@PointStatus, GeoRuleGraceMask=@GeoRuleGraceMask, 
					RulesInViolation=@AdjustedRIV, MtdCallsRecID=@MtdCallsRecID,DeviceStatus=@DeviceStatus, StoredTimeStamp=GetDate()
				WHERE PositionRecID=@lastRecID
			END
		END
		ELSE
		BEGIN
			INSERT INTO MTD_LastPositions  WITH (ROWLOCK) (PositionRecID, DemographicID, DeviceID, TimeStamp, Longitude, Latitude,
				Speed, Heading, Elevation, PDOP, HDOP, VDOP, GPSMode,
				SatellitesInView, SVN, SNR, Temperature, BatteryVoltage,
				PointStatus, GeoRuleGraceMask, RulesInViolation, MtdCallsRecID,
				DeviceStatus)
			VALUES (@RecID, @DemographicID, @DeviceID, @TimeStamp,
				@Longitude, @Latitude, @Speed,
				@Heading, @Elevation, @PDOP,
				@HDOP, @VDOP, @GPSMode,
				@SatellitesInView, @SVN,
				@SNR,  @Temperature, @BatteryVoltage,
				@PointStatus, @GeoRuleGraceMask, @AdjustedRIV, @MtdCallsRecID, @DeviceStatus)
		END
	END
GO
/****** Object:  StoredProcedure [dbo].[dcc_DCCCalls_ListPending]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:	Jeremy Nelson
-- Create date: 3/31/2014
-- Description:	Gets DCCCalls waiting to be processed (Only gets one per device)
-- History:		03/31/2014	JPN		Initial Creation
--				08/30/2016	JPN		Added contract option 60 to result for Immediate BAT Notification
-- =============================================
CREATE
PROCEDURE	[dbo].[dcc_DCCCalls_ListPending]
AS
BEGIN
	SET NOCOUNT ON;

	--
	--	Before we do anything, check for "dead" calls that were never marked failed
	--		I am giving 65 minutes for now as a simple way to prevent DST from marking
	--		records incorrectly.
	--
	--	*** What amount of time works best? We can't really afford to mark a call as failed
	--		if its sitting in a cache file somewhere waiting to be processed. Data needs to
	--		processed in the proper order or data corruption could occur
	--
	--	*** JPN 7/25/2014: Removed dead call checking since we have cache files
	----------------------------------------------------------------------------------------
	--UPDATE	DCCCalls 
	--SET		Failed = 1  
	--WHERE	Data IS NULL
	--AND		Failed = 0 
	--AND		Processed = 0 
	--AND		StoredTimestamp < DATEADD(MINUTE, -65, GETDATE())

	--
	--	We want only one record per device per pass. This temp table will hold
	--	the minimum DCCCallId per device waiting to be processed
	--
	DECLARE		@CallList
	TABLE		(
					DeviceId	int,
					DCCCallId	bigint
					Unique Clustered (DCCCallId, DeviceId)
				)

	--
	--	Get the first unprocessed call per device
	--		Processed = 0		-- Record is still pending
	--		Failed = 0			-- Call was not aborted
	--		Data IS NOT NULL	-- Call was completed successfully (Moved to final query)
	--
	INSERT
	INTO		@CallList
	SELECT		DeviceId,
				Min(DCCCallId)
	FROM		DCCCalls
	WHERE		Processed = 0
	AND			Failed = 0
	GROUP BY	DeviceId

	--
	--	If any device has eggfiles pending that have not been marked processed or failed, remove them
	--
	DELETE
	FROM	@CallList
	WHERE	DeviceId IN	(
							SELECT	C.DeviceId
							FROM	DCCCalls			C
							JOIN	DCCCallsEggFiles	F ON F.DCCCallId = C.DCCCallId
							WHERE	F.Processed = 0
							AND		F.Failed = 0
						)

	--
	--	Retrieve the desired fields from DCCCalls for the calls we want to process
	--
	SELECT		C.DCCCallId,
				C.DeviceId,
				C.CallerId,
				C.CallTime,
				CallType = CAST(C.CallType AS INT),
				C.Data,
				C.FirmwareVersion,
				IsRF = Case
							When A.HardwareTypeRecID = 110 Then 1										-- DCU
							When A.HardwareTypeRecID = 111 And V.Capabilities & 65536 = 65536 Then 1	-- MEMS VBR
							When A.HardwareTypeRecID IS NULL THEN 0
							Else 0
						End,
				StoredTimestamp,
				NotifyOnAllBATFailures = IsNull(protech.dbo.fn_ContractOptionAssignments_GetByCustomerIDandOptionID(A.CustomerID,0,0,60),0) -- fx(CustomerId, Region, Contract, OptionID)
	FROM		@CallList				L
	JOIN		DCCCalls				C (NOLOCK)	ON C.DCCCallId = L.DCCCallId
	LEFT JOIN	Protech..Assemblies		A (NOLOCK)	ON A.AssemblyRecID = C.DeviceId
	LEFT JOIN	Protech..HardwareRevs	V (NOLOCK)	ON V.HwRevID = A.ModelRecID
	WHERE		C.Data IS NOT NULL
	ORDER BY	C.DCCCallId

END
GO
/****** Object:  StoredProcedure [dbo].[dcc_DCCCalls_UpdateFailed]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jeremy Nelson
-- Create date: 3/31/2014
-- Description:	Updates a DCCCall record as failed and updates the ErrorMessage
-- =============================================
CREATE
PROCEDURE	[dbo].[dcc_DCCCalls_UpdateFailed]

@DCCCallId		bigint,
@ErrorMessage	varchar(40)

AS
BEGIN
	SET NOCOUNT ON;

	--
	--	Simply mark the record processed
	--
	UPDATE		DCCCalls
	SET			Processed = 1,
				Failed = 1,
				ErrorMessage = @ErrorMessage,
				ModifiedTimestamp = GETDATE()
	WHERE		DCCCallId = @DCCCallId

END
GO
/****** Object:  StoredProcedure [dbo].[dcc_DCCCalls_UpdateProcessed]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jeremy Nelson
-- Create date: 3/31/2014
-- Description:	Updates a DCCCall record as processed
-- =============================================
CREATE
PROCEDURE	[dbo].[dcc_DCCCalls_UpdateProcessed]

@DCCCallId	bigint

AS
BEGIN

	SET NOCOUNT ON;

	--
	--	Simply mark the record processed
	--
	UPDATE		DCCCalls
	SET			Processed = 1,
				ModifiedTimestamp = GETDATE()
	WHERE		DCCCallId = @DCCCallId

END
GO
/****** Object:  StoredProcedure [dbo].[dcc_DCCCallsEggFiles_Insert]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jeremy Nelson
-- Create date: 7/25/2014
-- Description:	Inserts an eggfile record so we can make sure LoadInfo has
--				processed everything before moving on to the next call
-- =============================================
CREATE PROCEDURE [dbo].[dcc_DCCCallsEggFiles_Insert]

@DCCCallId		BIGINT,
@EggFileName	VARCHAR(100)

AS
BEGIN
	SET NOCOUNT ON;

	INSERT
	INTO	DCCCallsEggFiles
			(
				DCCCallId,
				EggFileName,
				FileCreatedDate
			)
	VALUES	(
				@DCCCallId,
				@EggFileName,
				GETDATE()
			)
END

GO
/****** Object:  StoredProcedure [dbo].[dcc_DCCCallsEggFiles_UpdateProcessed]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jeremy Nelson
-- Create date: 7/25/2014
-- Description:	Inserts an eggfile record so we can make sure LoadInfo has
--				processed everything before moving on to the next call
-- =============================================
CREATE PROCEDURE [dbo].[dcc_DCCCallsEggFiles_UpdateProcessed]

@DCCCallId		BIGINT,
@EggFileName	VARCHAR(100),
@MTDCallRecId	BIGINT

AS
BEGIN
	SET NOCOUNT ON;

	UPDATE	DCCCallsEggFiles
	SET		LoadInfoProcessedDate = GETDATE(),
			MTDCallRecId = @MTDCallRecId,
			Processed = 1
	WHERE	DCCCallId = @DCCCallId
	AND		EggFileName = @EggFileName

END

GO
/****** Object:  StoredProcedure [dbo].[dcc_FailDCCCall]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[dcc_FailDCCCall]
	@DCCCallId varchar(40),
	@ErrorMessage varchar(40) = NULL,
	@DCCServer varchar(40) = NULL
AS
/*
===============================================================================
Stored Procedure: dcc_FailDCCCall
-------------------------------------------------------------------------------
Purpose:  This stored procedure sets the Failed flag to TRUE for the specified
DCCCalls row.  
===============================================================================
*/
	SET NOCOUNT ON
	UPDATE DCCCalls SET
	   Failed = 1,
		[ErrorMessage] = @ErrorMessage,
		ModifiedTimestamp = GETDATE(),
		DCCServer = @DCCServer
	WHERE
		DCCCallId = CAST(@DCCCallId as bigint) AND
		[Data] IS NULL
GO
/****** Object:  StoredProcedure [dbo].[dcc_GetDCCCallEggFiles]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[dcc_GetDCCCallEggFiles]
	@DCCCallId bigint
AS
	SET NOCOUNT ON
	SELECT 
		*
	FROM
		DCCCallsEggFiles (nolock)
	WHERE
		DCCCallId = @DCCCallId
	ORDER BY 
		DCCCallsEggFileId ASC
GO
/****** Object:  StoredProcedure [dbo].[dcc_GetDCCCalls]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[dcc_GetDCCCalls]
	@DeviceIds varchar(MAX) = NULL,
	@SerialNumbers varchar(MAX) = NULL,
	@FromDts datetime = NULL,
	@ToDts datetime = NULL,
	@MaxRows int = 100
AS
   SET NOCOUNT ON
	SELECT TOP (@MaxRows)
		r.*, 
		a.SerialNumber,
		CASE WHEN efc.DCCCallId IS NULL THEN 0 ELSE efc.EggFilesCount END as EggFilesCount
	FROM
		DCCCalls r (nolock) 
		LEFT OUTER JOIN [Protech].dbo.[Assemblies] a (nolock) 
			ON r.DeviceID = a.AssemblyRecID
		LEFT OUTER JOIN 
			(SELECT
				dccc.DCCCallId,	
				COUNT(ef.DCCCallId) as EggFilesCount
			FROM 
				[MTD_01].dbo.DCCCalls dccc (nolock)
				LEFT OUTER JOIN [MTD_01].dbo.DCCCallsEggFiles ef (nolock)
					ON dccc.DCCCallId = ef.DCCCallId
			GROUP BY
				dccc.DCCCallId
			) efc
			ON efc.DCCCallId = r.DCCCallId
	WHERE
	   (((@DeviceIds IS NOT NULL) AND (CHARINDEX(',' + CAST(r.DeviceId AS VARCHAR(40)) + ',', ',' + @DeviceIds + ',') > 0)) OR (@DeviceIds IS NULL))
		AND
		(((@SerialNumbers IS NOT NULL) AND (CHARINDEX(',''' + CAST(a.SerialNumber AS VARCHAR(40)) + ''',', ',' + @SerialNumbers + ',') > 0)) OR (@SerialNumbers IS NULL))
		AND
		(((@FromDTS IS NOT NULL) AND (r.StoredTimestamp >= @FromDTS)) OR (@FromDTS IS NULL))
		AND
		(((@ToDTS IS NOT NULL) AND (r.StoredTimestamp <= @ToDTS)) OR (@ToDTS IS NULL))
	ORDER BY 
		r.StoredTimestamp DESC, r.DeviceID

GO
/****** Object:  StoredProcedure [dbo].[dcc_GetIncompleteDCCCalls]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[dcc_GetIncompleteDCCCalls]
	@DCCServer varchar(40),
	@Timeout int
AS
/*
===============================================================================
Stored Procedure: dcc_GetIncompleteDCCCalls
-------------------------------------------------------------------------------
Purpose:  This stored procedure is designed to return references to all of the   
incomplete DCCCalls for a specified DCC server.
===============================================================================
*/
	SET NOCOUNT ON
	/*
	----------------------------------------------------------------------------
	Select the rows from the DCCCalls table
	----------------------------------------------------------------------------
	*/
	SELECT
		c.DCCServer,
		c.DeviceId,
		c.Failed,
		c.DCCCallId,
		c.Processed
	FROM
		DCCCalls c
	WHERE
		c.DCCServer = @DCCServer AND
		c.Failed = 0 AND
		c.Processed = 0 AND
		ISNULL(c.Data,'') = '' AND
		((@Timeout = 0) OR ((@Timeout > 0) AND 
		(DATEADD(MINUTE,(@Timeout * -1), GETDATE()) > c.StoredTimestamp)))

GO
/****** Object:  StoredProcedure [dbo].[dcc_InsertFullDCCCall]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[dcc_InsertFullDCCCall]
	@DeviceId int,
	@DCCServer varchar(40) = NULL,
	@CallType char(1) = NULL,
	@CallTime int = NULL,
	@CallerId varchar(40) = NULL,
	@FirmwareVersion varchar(40) = NULL,
	@Data varchar(MAX) = NULL,
	@DCCCallId varchar(40) OUTPUT
AS
	/*
	===============================================================================
	Stored Procedure: dcc_InsertFullDCCCall
	-------------------------------------------------------------------------------
	Purpose:  This stored procedure creates a new row in the DDCCalls table to 
	indicate that a call has been started between a device and a DCC server.  The
	stored procedure returns the row ID for the new row in the output argument
	@SCCCallsID and as a single row.  
	===============================================================================
	*/

	SET NOCOUNT ON

	--
	--	Get the DeviceId by looking at the request
	--
	IF (@CallType = '1' AND @Data IS NOT NULL)
	BEGIN
		SELECT	@DeviceId = R.DeviceID
		FROM	Protech..DCCRequests R 
		WHERE	R.DCCRequestID = dbo.fn_HexToLong(SUBSTRING(@Data, 1, 8), 1)
	END

	/*
	----------------------------------------------------------------------------
	Check for any previous incomplete attempts for the device to communicate
	with DCC.
	----------------------------------------------------------------------------
	JPN 7/10/2014 - Not implementing because we think this won't work with caching
	*/
	--UPDATE DCCCalls SET
	--	Failed = 1,
	--	ErrorMessage = 'FAILED INCOMPLETE CALL'
	--WHERE
	--	(DeviceId = @DeviceId) AND
	--	(ISNULL(Failed,0) = 0) AND
	--	(Data IS NULL) AND
	--	(ISNULL(Processed, 0) = 0) --AND
	--	--(ISNULL(Completed, 0) = 0)

	--
	--	Insert the call
	--
	INSERT INTO DCCCalls (
		DeviceId,
		DCCServer,
		CallTime,
		CallType,
		CallerId,
		FirmwareVersion,
		[Data]
	) VALUES (
		@DeviceId,
		@DCCServer,
		@CallTime,
		@CallType,
		@CallerId,
		@FirmwareVersion,
		@Data
	)

	SELECT @DCCCallId = CAST(SCOPE_IDENTITY() as varchar(40))

	SELECT @DCCCallId as DCCCallId

GO
/****** Object:  StoredProcedure [dbo].[dcc_RIAParams_ListLastByDeviceId]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--
--	Retrieves the RIAParams records for all the RulesInAlarm records 
--	associated with the last point delivered for a device
--		Rows for all offenders assigned to the device will be returned
--
CREATE
PROCEDURE	[dbo].[dcc_RIAParams_ListLastByDeviceId]

	@DeviceID	int

AS
BEGIN
	SET NOCOUNT ON

	--
	--	Table for holding the demographic ids associated with the device
	--
	DECLARE @DemographicIDs
	TABLE	(
				DemographicID	int,
				IsGroup			bit
			)

	--
	--	Get the offenders (may be groups) assigned to the device
	--
	INSERT
	INTO	@DemographicIDs
	SELECT	O.DemographicID,
			CASE D.DemographicType
				WHEN 2 THEN 1
				ELSE 0
			END
	FROM	Protech..OffenderDevices	O (NOLOCK)
	JOIN	Protech..Demographics		D (NOLOCK) ON D.DemographicID = O.DemographicID
	WHERE	O.DeviceID = @DeviceID 
	AND		O.UnassignmentDate IS NULL
	AND		O.DeactivationDate IS NULL

	--
	--	If any of the offenders found in the previous query are groups, include
	--	these group's offenders as well
	--
	INSERT
	INTO	@DemographicIDs
	SELECT	G.OffenderDemographicID,
			0
	FROM	Protech..GroupOffenders	G (NOLOCK)
	JOIN	@DemographicIDS			D ON D.DemographicID = G.GroupDemographicID 
	WHERE	G.UnassignmentDate IS NULL
	AND		G.DeactivationDate IS NULL

	--
	--	Now that we know which offender's to select for, do it
	--		Convert Extra TX records to a type 7 and make them return the numeric
	--		portion of the serial number. This will be used in DCCEventListener to
	--		process extra tx
	--
	SELECT		P.RulesInAlarmRecID,
				ParameterTypeLookupValue = Case P.ParameterTypeLookupValue
					WHEN '1' THEN '7'
					ELSE P.ParameterTypeLookupValue
				END,
				ParameterValue = CASE P.ParameterTypeLookupValue
									WHEN '1' THEN ISNULL(CAST(CAST(RIGHT(A.SerialNumber, 5) AS int) AS varchar), P.ParameterValue)
									ELSE P.ParameterValue
								END,
				D.DemographicID
	FROM		@DemographicIDs		D
	JOIN		MTD_LastPositions	L (NOLOCK) ON	L.DemographicID = D.DemographicID
	JOIN		RulesInAlarm		R (NOLOCK) ON	R.PositionRecID = L.PositionRecID
	JOIN		RIAParams			P (NOLOCK) ON	P.RulesInAlarmRecID = R.RulesInAlarmRecID
	LEFT JOIN	Protech..Assemblies A (NOLOCK) ON	A.AssemblyRecID = P.ParameterValue
	WHERE		L.DeviceID = @DeviceID

END
GO
/****** Object:  StoredProcedure [dbo].[dcc_RulesInAlarm_ListLastByDeviceId]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--
--	Retrieves the RulesInAlarm records for the last point delivered for a device
--		Rows for all offenders assigned to the device will be returned
--
CREATE
Procedure	[dbo].[dcc_RulesInAlarm_ListLastByDeviceId]

	@DeviceID	int

As
Begin
	Set NoCount On

	--
	--	Table for holding the demographic ids associated with the device
	--
	DECLARE @DemographicIDs
	TABLE	(
				DemographicID	int,
				IsGroup			bit
			)

	--
	--	Get the offenders (may be groups) assigned to the device
	--
	INSERT
	INTO	@DemographicIDs
	SELECT	O.DemographicID,
			CASE D.DemographicType
				WHEN 2 THEN 1
				ELSE 0
			END
	FROM	Protech..OffenderDevices	O (NOLOCK)
	JOIN	Protech..Demographics		D (NOLOCK) ON D.DemographicID = O.DemographicID
	WHERE	O.DeviceID = @DeviceID 
	AND		O.UnassignmentDate IS NULL
	AND		O.DeactivationDate IS NULL

	--
	--	If any of the offenders found in the previous query are groups, include
	--	these group's offenders as well
	--
	INSERT
	INTO	@DemographicIDs
	SELECT	G.OffenderDemographicID,
			0
	FROM	Protech..GroupOffenders	G (NOLOCK)
	JOIN	@DemographicIDS			D ON D.DemographicID = G.GroupDemographicID 
	WHERE	G.UnassignmentDate IS NULL
	AND		G.DeactivationDate IS NULL

	--
	--	Now that we know which offender's to select for, do it
	--
	Select	R.RulesInAlarmRecID,
			R.PositionRecID,
			R.RuleID,
			OneTimeSchedId = ISNULL(R.OneTimeSchedId, 0),
			R.InGrace,
			R.HWRule,
			R.RuleStatus,
			R.HwRuleBitIndex,
			D.DemographicID
	From	@DemographicIDs				D
	Join	MTD_LastPositions			L With (NoLock) On	L.DemographicID = D.DemographicID
	Join	RulesInAlarm				R With (NoLock)	On	R.PositionRecID = L.PositionRecID
	Where	L.DeviceID = @DeviceID

End

GO
/****** Object:  StoredProcedure [dbo].[dcc_StartDCCCall]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[dcc_StartDCCCall]
	@DeviceId int,
	@DCCServer varchar(40) = NULL,
	@CallType char(1) = '2',
	@DCCCallId varchar(40) OUTPUT
AS
/*
===============================================================================
Stored Procedure: dcc_StartResponseDCCCall
-------------------------------------------------------------------------------
Purpose:  This stored procedure creates a new row in the DDCCalls table to 
indicate that a call has been started between a device and a DCC server.  The
stored procedure returns the row ID for the new row in the output argument
@SCCCallsID and as a single row.  
===============================================================================
*/
	SET NOCOUNT ON
	INSERT INTO DCCCalls (
		DeviceId,
		DCCServer,
		CallType
	) VALUES (
		@DeviceId,
		@DCCServer,
		@CallType
	)

	SELECT @DCCCallId = CAST(SCOPE_IDENTITY() as varchar(40))

	SELECT @DCCCallId as DCCCallId
GO
/****** Object:  StoredProcedure [dbo].[dcc_UpdateDCCCall]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[dcc_UpdateDCCCall]
	@DCCCallId varchar(40),
	@DeviceId int,
	@DCCServer varchar(40),
	@CallerId varchar(40),
	@CallTime int,
	@CallType char(1),
	@Data varchar(MAX),
	@FirmwareVersion varchar(40),
	@NewDCCCallId varchar(40) OUTPUT
AS
/*
===============================================================================
Stored Procedure: dcc_UpdateDCCCallData
-------------------------------------------------------------------------------
Purpose:  This stored procedure updates the [Data] column for the specified
row in the DCCCalls table.  
===============================================================================
*/
	SET NOCOUNT ON
	/*
	----------------------------------------------------------------------------
	If the table already contains data for the specified DCCCallId, then the
	call has received an additional block of data.  Create a new row for the
	new block of data to prevent overwriting the existing block of data.
	----------------------------------------------------------------------------
	*/
	DECLARE @HasData bit

	SELECT
		@HasData = CASE WHEN [Data] IS NULL THEN 0 ELSE 1 END
	FROM
		DCCCalls
	WHERE
	   DCCCallId = CAST(@DCCCallId as bigint)

	IF (@HasData = 0)
		BEGIN
			SET @NewDCCCallId = @DCCCallId
			UPDATE DCCCalls SET
				CallerId = @CallerId,
				FirmwareVersion = @FirmwareVersion,
				CallType = @CallType,
				CallTime = @CallTime,
				[Data] = @Data,
				Failed = 0,
				ModifiedTimestamp = GETDATE()
			WHERE
				DCCCallId = CAST(@DCCCallId as bigint)
		END
	ELSE
		BEGIN
			INSERT INTO DCCCalls (
				DeviceId,
				DCCServer,
				CallerId,
				CallTime,
				CallType,
				[Data],
				FirmwareVersion
			)
			VALUES
			(
				@DeviceId,
				@DCCServer,
				@CallerId,
				@CallTime,
				@CallType,
				@Data,
				@FirmwareVersion
			)

			SELECT @NewDCCCallId = CAST(SCOPE_IDENTITY() as varchar(40))
		END
GO
/****** Object:  StoredProcedure [dbo].[dcc_UpdateDCCCallFromCache]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[dcc_UpdateDCCCallFromCache]
	@DCCCallId varchar(40),
	@DeviceId int,
	@DCCServer varchar(40),
	@CallerId varchar(40),
	@CallTime int,
	@CallType char(1),
	@Data varchar(MAX),
	@FirmwareVersion varchar(40)
AS
/*
===============================================================================
Stored Procedure: dcc_UpdateDCCCallFromCache
-------------------------------------------------------------------------------
Purpose:  This stored procedure is designed to update a row in the DCCCalls 
table using the data from a cached DCC call file.
===============================================================================
*/
	SET NOCOUNT ON

	UPDATE DCCCalls SET
		DeviceId = @DeviceId,
		DCCServer = @DCCServer,
		CallerId = @CallerId,
		CallTime = @CallTime,
		CallType = @CallType,
	   Data = @Data,
		FirmwareVersion = @FirmwareVersion,
		ModifiedTimestamp = GETDATE()
	WHERE
	   DCCCallId = @DCCCallId
GO
/****** Object:  StoredProcedure [dbo].[dcim_DeviceCallsLastNormal_GetLastCallTime]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[dcim_DeviceCallsLastNormal_GetLastCallTime]
	@DemographicID	INT,
	@DeviceID		INT,
	@LastCallTime	DATETIME OUT
AS
BEGIN
	SET NOCOUNT ON
	
	SET @LastCallTime = (SELECT StartTime
	                     FROM DeviceCallsLastNormal
	                     WHERE DemographicID = @DemographicID
							AND DeviceID = @DeviceID)
END

GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_BaseUnitLocations]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from BaseUnitLocations table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_BaseUnitLocations]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) M FROM MTD_01.dbo.BaseUnitLocations As BUL
JOIN MTD_01.dbo.MTDCalls AS M WITH(INDEX( PK_MTDCalls))  ON M.CallRecID = BUL.CallRecId
Where M.DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_DCCCallsEggFiles]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from DCCCallsEggFiles table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_DCCCallsEggFiles]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) M FROM MTD_01.dbo.DCCCallsEggFiles As DCC
JOIN MTD_01.dbo.MTDCalls AS M ON M.CallRecID = DCC.MTDCallRecId
Where M.DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_DCCUnusedEvent]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from DCCUnusedEvent table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_DCCUnusedEvent]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.DCCUnusedEvent
WHERE DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_DeviceCallsLastAttempt]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from DeviceCallsLastAttempt table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_DeviceCallsLastAttempt]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.DeviceCallsLastAttempt
WHERE DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_DeviceCallsLastNormal]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from DeviceCallsLastNormal table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_DeviceCallsLastNormal]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.DeviceCallsLastNormal
WHERE DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_Events]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from Events table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_Events]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.Events
WHERE DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_LastEvent]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from LastEvent table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_LastEvent]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.LastEvent
WHERE DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_LBS_Positions]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from LBS_Positions table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_LBS_Positions]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.LBS_Positions
WHERE DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTD_ActionLog]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTD_ActionLog table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTD_ActionLog]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) M FROM MTD_01.dbo.MTD_ActionLog As M
JOIN MTD_01.dbo.MTD_Alarms As C on C.AlarmRecID = M.AlarmRecID
Where C.DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTD_Alarms]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTD_Alarms table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTD_Alarms]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT = 0;
DECLARE @Msg NVARCHAR(200) = ''

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

IF EXISTS(Select TOP 1 M.AlarmRecID FROM MTD_01.dbo.MTD_ActionLog As M
JOIN MTD_01.dbo.MTD_Alarms As C on C.AlarmRecID = M.AlarmRecID
Where C.DemographicID = @pDemoID)
BEGIN
SET @Msg = 'ERROR: Data from MTD_Alarms table cannot be delete since related records exists in MTD_ActionLog table!';
THROW 50000, @Msg, 1;
RETURN
END

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.MTD_Alarms
WHERE DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTD_EmailMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTD_EmailMessages table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTD_EmailMessages]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.MTD_EmailMessages
WHERE OffenderDemoID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTD_FaxMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTD_FaxMessages table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTD_FaxMessages]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.MTD_FaxMessages
WHERE OffenderDemoID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTD_FuturePoints]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/28/21
-- Description:	Batch delete for very large offender related data from MTD_FuturePoints table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTD_FuturePoints]
@DemographicID int,
@BatchSize INT = NULL
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.MTD_FuturePoints
WHERE DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT

END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTD_Lastpositions]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTD_Lastpositions table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTD_Lastpositions]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) M FROM MTD_01.dbo.MTD_Lastpositions As M
Where M.DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTD_MessageResponses]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTD_MessageResponses table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTD_MessageResponses]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.MTD_MessageResponses
WHERE DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTD_Messages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTD_Messages table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTD_Messages]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.MTD_Messages
WHERE DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTD_PagerMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTD_PagerMessages table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTD_PagerMessages]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) M FROM MTD_01.dbo.MTD_PagerMessages As M
Where M.OffenderDemoID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTD_PositionCounts]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/27/21
-- Description:	Batch delete for very large offender related data from MTD_PositionCounts table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTD_PositionCounts]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.MTD_PositionCounts
WHERE OffenderID = @pDemoID

SET @rowcount = @@ROWCOUNT

END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTD_Positions]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTD_Positions table
-- Revisions:
-- 12/14/22 (GLU) - updated select query to fix time out issues
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTD_Positions]
    @DemographicID int,
    @BatchSize INT = null  
AS
BEGIN
	--Redeclare parameters to prevent parameter sniffing
	DECLARE @pDemoID int = @DemographicID
    DECLARE @MaxBatchSize int = 4000
    DECLARE @rowcount INT = 0;
    DECLARE @Msg NVARCHAR(200) = '' 
    
    IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
	   SET @BatchSize = @MaxBatchSize

	BEGIN TRY
		   --Validate demographicID to check if it is valid and has contract option to delete offender data
		  EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID
		  	  

		  IF EXISTS(SELECT TOP 1 RU.PositionRecID FROM RulesInAlarm RU  WITH (NOLOCK, INDEX	(PositionRecID_IDX))
				    JOIN MTD_Positions PO WITH (NOLOCK) ON PO.PositionRecID = RU.PositionRecID  
				    WHERE PO.DemographicID = @pDemoID
				    AND PO.TimeStamp <= GETDATE()) 
			 BEGIN
				SET @Msg = 'ERROR: Data from MTD_Positions table cannot be deleted since related records exists in RulesInAlarm table!';
				THROW 50000, @Msg, 1;				
				RETURN
			 END

		   --Delete MTDPositions if both RiaParams and RulesInAlarm deletes were successful
		  DELETE TOP(@BATCHSIZE)
		  FROM MTD_01.dbo.MTD_Positions 
		  WHERE DemographicID = @pDemoID			 	  
		  
		  SET @rowcount = @@ROWCOUNT	
		
	END TRY
	BEGIN CATCH
		THROW;
	END CATCH

	Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTD_PositionsMissed]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTD_PositionsMissed table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTD_PositionsMissed]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) M FROM MTD_01.dbo.MTD_PositionsMissed As M
Where M.DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTD_SMSMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTD_SMSMessages table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTD_SMSMessages]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.MTD_SMSMessages
WHERE DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTD_VoiceMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTD_VoiceMessages table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTD_VoiceMessages]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) M FROM MTD_01.dbo.MTD_VoiceMessages As M
Where M.OffenderDemoID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTDActions]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTDActions table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTDActions]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) FROM MTD_01.dbo.MTDActions
WHERE DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_MTDCalls]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTDCalls table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_MTDCalls]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) M FROM MTD_01.dbo.MTDCalls As M
Where M.DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_OffenderEventAlarms]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from OffenderEventAlarms table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_OffenderEventAlarms]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE)
FROM MTD_01.dbo.OffenderEventAlarms
WHERE DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT

END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount

END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_OffenderPositionsReviewed]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from OffenderPositionsReviewed table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_OffenderPositionsReviewed]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE)
FROM MTD_01.dbo.OffenderPositionsReviewed
WHERE OffenderID = @pDemoID

SET @rowcount = @@ROWCOUNT

END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_RIAParams]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from MTD_Positions table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_RIAParams]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

--RIAParams data delete done first and then, RulesInAlarm and Mtd_Positions

DELETE TOP(@BATCHSIZE) RI
FROM RIAParams RI WITH(INDEX(IX_RIAPARAMS_RIARecID))
JOIN RulesInAlarm RU WITH(INDEX(PositionRecID_IDX)) ON RU.RulesInAlarmRecID = RI.RulesInAlarmRecID
JOIN MTD_Positions PO WITH(INDEX(PositionQryIDX)) ON PO.PositionRecID = RU.PositionRecID
WHERE PO.DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT

END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_RulesInAlarm]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from RulesInAlarm table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_RulesInAlarm]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN

--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT = 0;
DECLARE @Msg NVARCHAR(200) = ''

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

IF EXISTS(Select TOP 1 RI.RulesInAlarmRecID FROM RIAParams RI WITH(INDEX(IX_RIAPARAMS_RIARecID))
JOIN RulesInAlarm RU WITH(INDEX(PositionRecID_IDX)) ON RU.RulesInAlarmRecID = RI.RulesInAlarmRecID
JOIN MTD_Positions PO WITH(INDEX(PositionQryIDX)) ON PO.PositionRecID = RU.PositionRecID
WHERE PO.DemographicID = @pDemoID)
BEGIN
SET @Msg = 'ERROR: Data from RulesInAlarm table cannot be delete since related records exits in RIAParams table!';
THROW 50000, @Msg, 1;
RETURN
END
--Delete RulesInAlarm if RiaParams data delete was successful and no child records remain in that table
DELETE TOP(@BATCHSIZE) RU
FROM RulesInAlarm RU WITH(INDEX(PositionRecID_IDX))
JOIN MTD_Positions PO WITH(INDEX(PositionQryIDX)) ON PO.PositionRecID = RU.PositionRecID
WHERE PO.DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT

END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_Scrub_LacCids]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from Events table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_Scrub_LacCids]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT = 0

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

--Scrub data from MTD_01.dbo.LacCids table
--Cannot delete the rows but need to set demoID to zero since table has lat/long data.
--UPDATE TOP(@BATCHSIZE) MTD_01.dbo.LacCids
--SET
--  DemographicID = 0
--WHERE DemographicID = @pDemoID


SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[dds_OffenderDataDelete_MTD_01_VCommDeviceCalls]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Girish L. Ukarande
-- Create date: 9/24/21
-- Description:	Batch delete for very large offender related data from VCommDeviceCalls table
-- Revisions:
-- mm/dd/yy (xxx) - Revision text here
-- =============================================
CREATE   PROCEDURE [dbo].[dds_OffenderDataDelete_MTD_01_VCommDeviceCalls]
@DemographicID int,
@BatchSize INT = null
AS
BEGIN
--Redeclare parameters to prevent parameter sniffing
DECLARE @pDemoID int = @DemographicID
DECLARE @MaxBatchSize int = 4000
DECLARE @rowcount INT;

IF @BatchSize is NULL OR @BatchSize > @MaxBatchSize
SET @BatchSize = @MaxBatchSize

BEGIN TRY
--Validate demographicID to check if it is valid and has contract option to delete offender data
EXEC Protech.dbo.dds_ValidateDemographicIDForOffenderDataDelete @pDemoID

DELETE TOP(@BATCHSIZE) M FROM MTD_01.dbo.VCommDeviceCalls As M
Where M.DemographicID = @pDemoID

SET @rowcount = @@ROWCOUNT
END TRY
BEGIN CATCH
THROW;
END CATCH

Select @rowcount
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteFromVcommList]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DeleteFromVcommList] @IPAddress VARCHAR(15)
    , @UserRecID INT
AS
-- =============================================
-- Author:		Alfredo Inostroza
-- Create date: 2022-04-21
-- Description:	Removes Servers
--   from the VCommList
-- =============================================
BEGIN
    SELECT *
    INTO #delrow
    FROM MTD_01.dbo.VCommList
    WHERE IPAddress = @IPAddress

    DELETE
    FROM MTD_01.dbo.VCommList
    WHERE IPAddress = @IPAddress

    INSERT INTO Protech.dbo.ModificationHistory (
        UserRecID
        , TIMESTAMP
        , AppName
        , TableName
        , EventType
        , TableRecID
        , Message
        , CallingFormName
        )
    SELECT @UserRecID
        , GETDATE()
        , 'SQL'
        , 'VCommList'
        , 'DELETE'
        , 0
        , ' Deleted ' + IPAddress + ' (Server Name ' + ServerName + ', Site ' + CommSite + ', Type ' + CommType + ', Number ' + cast(CommNumber AS VARCHAR(max)) + ')'
        , NULL
    FROM #delrow
END
GO
/****** Object:  StoredProcedure [dbo].[ETL_SelectStageNotifications]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Elena Roe
-- Create date: 03-04-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[ETL_SelectStageNotifications]
	-- Add the parameters for the stored procedure here
	@LastImportStageNotification datetime, @LastImportStageNotificationEnd datetime
AS
BEGIN
	
	SET NOCOUNT ON;
SELECT 
		'ContractID' = C.ContractID,
		'RegionID' = C.RegionID,
		'CustomerID' = D.CustomerID,
		'OffenderID' = OffenderDemoID,
		'NotificationTypeID' = 1,
		'NotificationDate' = DateSent
	FROM MTD_01..MTD_FaxMessages As N
	JOIN Protech..Demographics As D ON D.DemographicID = N.OffenderDemoID AND D.CustomerID > 0
	LEFT JOIN Protech..Customers As C ON C.CustomerID = D.CustomerID
	WHERE DateSent IS NOT NULL and DateSent > @LastImportStageNotification and DateSent <= @LastImportStageNotificationEnd

UNION ALL 
	
	
	SELECT 
		'ContractID' = C.ContractID,
		'RegionID' = C.RegionID,
		'CustomerID' = D.CustomerID,
		'OffenderID' = OffenderDemoID,
		'NotificationTypeID' = 4,
		'NotificationDate' = DateSent
	FROM MTD_01..MTD_PagerMessages As N
	JOIN Protech..Demographics As D ON D.DemographicID = N.OffenderDemoID AND D.CustomerID > 0
	LEFT JOIN Protech..Customers As C ON C.CustomerID = D.CustomerID
	WHERE DateSent IS NOT NULL and DateSent > @LastImportStageNotification and DateSent <= @LastImportStageNotificationEnd

    
END

GO
/****** Object:  StoredProcedure [dbo].[fc_FailDCCCallEggFile_001_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[fc_FailDCCCallEggFile_001_DEL]
	@DCCCallId bigint,
	@EggFileName varchar(100),
	@ErrorMessage varchar(50)
AS
	SET NOCOUNT ON;

	UPDATE DCCCallsEggFiles SET
		Failed = 1,
		ErrorMessage = @ErrorMessage
	WHERE
		DCCCallId = @DCCCallId AND
		EggFileName = @EggFileName AND
		Failed = 0
GO
/****** Object:  StoredProcedure [dbo].[InvalidRuleIdAutoFix]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Don Ellingsworth
-- Create date: 9/10/2014
-- Description:	Fix the RuleIDs that were incorrectly marked invalid 
--				This will be run every 5min
-- =============================================
CREATE PROCEDURE [dbo].[InvalidRuleIdAutoFix]
AS
BEGIN
	IF OBJECT_ID('tempdb..#Invalid') IS NOT NULL
		DROP TABLE #Invalid

	CREATE TABLE #Invalid (RecID [bigint] NOT NULL PRIMARY KEY);

	INSERT INTO #Invalid (RecID)
	SELECT i.RulesInAlarmRecID
	FROM InvalidRulesInAlarm AS i WITH (NOLOCK)
	LEFT JOIN RulesInAlarm AS ria WITH (NOLOCK) ON i.RulesInAlarmRecID = ria.RulesInAlarmRecID
	LEFT JOIN MTD_Positions p WITH (NOLOCK) ON ria.PositionRecID = p.PositionRecID
	LEFT JOIN Protech..Rules AS r WITH (NOLOCK) ON Abs(ria.RuleID) = r.RuleID
	WHERE IsNull(p.DemographicID, 0) = IsNull(r.DemographicID, 0)
		AND NOT ria.RulesInAlarmRecID IS NULL
	ORDER BY ria.RulesInAlarmRecID DESC

	DECLARE @BadRecID BIGINT;

	DECLARE c CURSOR FAST_FORWARD
	FOR
	SELECT RecID
	FROM #Invalid

	OPEN c

	FETCH NEXT
	FROM c
	INTO @BadRecID

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- process invalid ruleIDs
		--PRINT 'Processing RIA Record:' + cast(@BadRecID AS CHAR(20))

		EXEC [mtd_01].[dbo].[InvalidRulesInAlarm_UpdateRuleIDs] @BadRecID
		FETCH NEXT
		FROM c
		INTO @BadRecID
	END

	CLOSE c

	DEALLOCATE c
END


GO
/****** Object:  StoredProcedure [dbo].[InvalidRulesInAlarm_UpdateRuleIDs]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[InvalidRulesInAlarm_UpdateRuleIDs] @RulesInAlarmRecID BIGINT
AS
/*
===============================================================================
Stored Procedure: [InvalidRulesInAlarm_UpdateRuleIDs]
-------------------------------------------------------------------------------
Purpose:  This stored procedure is designed to update the RuleIDs for the 
passed RuleInAlarmRecID.  If the DemographicID on a matching MTD_Position
record does not match the RulID in the matching Rules table, then the RuleID
is set to negative for the following tables: RulesInAlam, Report_MTDPositions,
Report_EM_Positions, Report_AlcoholTests.

If the DemographicID does match what is in the Rules table, the RuleID is set 
back to positive if it was previously marked as negative.

This query can be run mulitple times on the same record with no ill effect.

NOTE: If the passed in @RulesInAlarmRecID does not exist in the RulesInAlarm
table, nothing will happen. Therefore, passing in a RulesInAlarmRecID that exist 
in history, will not change anything.  A different SP could be created to examine 
and fix records in history.

CHANGE LOG
-------------------------------------------------------------------------------
- 14-09-02 - dle - Created
===============================================================================
*/
SET NOCOUNT ON
SET XACT_ABORT ON

DECLARE @PositionRecId BIGINT
DECLARE @RuleID INT
DECLARE @DemoID INT
DECLARE @RuleDemoID INT
DECLARE @NewRuleIDValue INT
DECLARE @DeviceID INT
DECLARE @Timestamp DATETIME
DECLARE @RuleStatus INT

SELECT @DemoID = p.DemographicID
	,@RuleDemoID = r.DemographicID
	,@PositionRecId = p.PositionRecID
	,@RuleID = ria.RuleID
	,@DeviceID = p.DeviceID
	,@Timestamp = p.TimeStamp
	,@RuleStatus = ria.RuleStatus
FROM RulesInAlarm AS ria WITH (NOLOCK)
LEFT JOIN MTD_Positions p WITH (NOLOCK) ON ria.PositionRecID = p.PositionRecID
LEFT JOIN Protech..Rules AS r WITH (NOLOCK) ON Abs(ria.RuleID) = r.RuleID
WHERE ria.RulesInAlarmRecID = @RulesInAlarmRecID

IF abs(@RuleID) = 1
	AND @DemoID IS NOT NULL
BEGIN
		-- remove the entry from the InvalidRulesInAlarm table
		DELETE
		FROM InvalidRulesInAlarm
		WHERE RulesInAlarmRecID = @RulesInAlarmRecID

		UPDATE RulesInAlarm
			SET RuleID = Abs(RuleID)
			WHERE RulesInAlarmRecID = @RulesInAlarmRecID
				AND RuleID <> Abs(RuleID)

end

IF abs(@RuleID) > 1
	AND @DemoID IS NOT NULL
BEGIN
	BEGIN TRANSACTION

	IF @DemoID <> @RuleDemoID
	BEGIN
		--PRINT '@DemoID <> @RuleDemoID '
		SET @NewRuleIDValue = - abs(@RuleID)

		-- add this value to the InvalidRulesInAlarm Table if it does not exist
		MERGE InvalidRulesInAlarm WITH (HOLDLOCK) AS T
		USING (
			VALUES (@RulesInAlarmRecID)
			) S(RulesInAlarmRecID)
			ON T.RulesInAlarmRecID = S.RulesInAlarmRecID
		WHEN NOT MATCHED
			THEN
				INSERT (RulesInAlarmRecID)
				VALUES (S.RulesInAlarmRecID);
	END
	ELSE
	BEGIN
		--PRINT '@DemoID = @RuleDemoID '
		SET @NewRuleIDValue = abs(@RuleID)

		-- remove the entry from the InvalidRulesInAlarm table
		DELETE
		FROM InvalidRulesInAlarm
		WHERE RulesInAlarmRecID = @RulesInAlarmRecID

		IF @@ROWCOUNT <> 0
			PRINT 'Deleted InvalidRulesInAlarm'
		
		INSERT Protech.dbo.ModificationHistory
			( UserRecID, Timestamp, AppName, TableName, EventType, TableRecID, Message )
		VALUES
			( 1, GetDate(), 'TSQL', 'InvalidRulesInAlarm', 'DELETE', 0, 'Invalid RulesInAlarm Repair - RulesInAlarmRecID='+CONVERT(varchar, @RulesInAlarmRecID) )
		IF @@ROWCOUNT <> 0
			PRINT 'Inserted ModificationHistory'

	END

	-- update the relevant tables
	UPDATE RulesInAlarm
	SET RuleID = @NewRuleIDValue
	WHERE RulesInAlarmRecID = @RulesInAlarmRecID
		AND RuleID <> @NewRuleIDValue

	IF @@ROWCOUNT <> 0
		PRINT 'Updated RulesInAlarm'


	UPDATE MTD_01.dbo.MTD_Alarms
	SET RuleID = @NewRuleIDValue, Processed=CASE WHEN DateDiff(MI, StoredTimeStamp, GetDate()) <= 15 THEN 'N' ELSE Processed END
	WHERE DemographicID = @DemoID
	AND DeviceID = @DeviceID
	AND Timestamp = @Timestamp
	AND RuleID = @RuleID
	AND RuleStatus = @RuleStatus
	AND RuleID <> @NewRuleIDValue

	IF @@ROWCOUNT <> 0
		PRINT 'Updated MTD_Alarms'

	UPDATE Reporting..Report_EM_Positions
	SET RuleID = @NewRuleIDValue
	WHERE PositionRecID = @PositionRecId
		AND DemographicID = @DemoID
		AND (
			--ruleID is indexed so we use it here 
			RuleID = @RuleID
			OR RuleId = - @RuleID
			)
		AND RuleID <> @NewRuleIDValue

	IF @@ROWCOUNT <> 0
		PRINT 'Updated Report_EM_Positions'

	UPDATE Reporting..Report_MTDPositions
	SET RuleID = @NewRuleIDValue
	WHERE PositionRecID = @PositionRecId
		AND DemographicID = @DemoID
		AND (
			--ruleID is indexed so we use it here 
			RuleID = @RuleID
			OR RuleId = - @RuleID
			)
		AND RuleID <> @NewRuleIDValue

	IF @@ROWCOUNT <> 0
		PRINT 'Updated Report_MTDPositions'

	COMMIT TRANSACTION -- Transaction Success!
END

GO
/****** Object:  StoredProcedure [dbo].[kamicheck_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[kamicheck_DEL] @starttime datetime, @endtime datetime
AS
insert kamistore
select distinct batlowkami.*, 'minutes' = datediff(mi,batterylowset, kamikaze) from
(select minmtdbatlow.deviceid, minmtdbatlow.demographicid, 'voltageBL' = lowbatvoltage, 'voltageK' = mtdkami.kamivoltage, 'voltagediff' = lowbatvoltage - mtdkami.kamivoltage, batterylowset, 'kamikaze' = timestamp from
(select minstep2.* from
(select mtdbatlow.demographicid, mtdbatlow.deviceid, 'batterylowset' = min(mtdbatlow.timestamp) from
(SELECT deviceid, 'LowBatVoltage' = batteryvoltage, mtd_positions.demographicid, timestamp, storedtimestamp FROM MTD_Positions join rulesinalarm on mtd_positions.positionrecid = rulesinalarm.positionrecid 
left join protech..rules on rulesinalarm.ruleid = protech..rules.ruleid where (protech..rules.hwrule > 0 
or protech..rules.hwrule is null) and timestamp >= @starttime 
AND timestamp <= @endtime and (protech..rules.hwrule & 512) = 512 and (rulestatus & 8)= 8) as mtdbatlow
join
(SELECT deviceid, 'KamiVoltage' = BatteryVoltage, demographicid, timestamp, storedtimestamp FROM MTD_Positions WHERE timestamp >= @starttime AND timestamp <= @endtime AND devicestatus is not null and (devicestatus & 4) = 4
) as mtdkami
on mtdbatlow.demographicid = mtdkami.demographicid
where datediff(hour,mtdbatlow.timestamp, mtdkami.timestamp) <= 1
group by  mtdbatlow.deviceid, mtdbatlow.demographicid)
as minstep1
join
(select lowbatvoltage, mtdbatlow.demographicid, mtdbatlow.deviceid, 'batterylowset' = min(mtdbatlow.timestamp) from
(SELECT deviceid, 'LowBatVoltage' = batteryvoltage, mtd_positions.demographicid, timestamp, storedtimestamp FROM MTD_Positions join rulesinalarm on mtd_positions.positionrecid = rulesinalarm.positionrecid 
left join protech..rules on rulesinalarm.ruleid = protech..rules.ruleid where (protech..rules.hwrule > 0 
or protech..rules.hwrule is null) and timestamp >= @starttime 
AND timestamp <= @endtime and (protech..rules.hwrule & 512) = 512 and (rulestatus & 8)= 8) as mtdbatlow
join
(SELECT deviceid, 'KamiVoltage' = BatteryVoltage, demographicid, timestamp, storedtimestamp FROM MTD_Positions WHERE timestamp >= @starttime AND timestamp <= @endtime AND devicestatus is not null and (devicestatus & 4) = 4
) as mtdkami
on mtdbatlow.demographicid = mtdkami.demographicid
where datediff(hour,mtdbatlow.timestamp, mtdkami.timestamp) <= 1
group by  mtdbatlow.deviceid, lowbatvoltage, mtdbatlow.demographicid)
as minstep2
on minstep1.demographicid = minstep2.demographicid and minstep1.deviceid = minstep2.deviceid and minstep1.batterylowset = minstep2.batterylowset) as minmtdbatlow
join
(SELECT deviceid, 'KamiVoltage' = BatteryVoltage, demographicid, timestamp, storedtimestamp FROM MTD_Positions WHERE timestamp >= @starttime AND timestamp <= @endtime AND devicestatus is not null and (devicestatus & 4) = 4
) as mtdkami
on minmtdbatlow.demographicid = mtdkami.demographicid) as batlowkami
where datediff(hour,batterylowset, kamikaze) <= 1
GO
/****** Object:  StoredProcedure [dbo].[LI_BaseUnitLocations_Insert_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LI_BaseUnitLocations_Insert_001]
	@CallRecId bigint,
	@TimeStampUTC datetime,
	@GPSLocationStatus smallint,
	@Latitude float,
	@Longitude float,
	@HDOP float,
	@Altitude float,
	@Fix tinyint,
	@Heading float,
	@SpeedMph float,
	@GPSSatellites tinyint,
	@GLONASSSatellites tinyint
AS
	INSERT INTO BaseUnitLocations (
		CallRecId,
		TimeStampUTC,
		GPSLocationStatus,
		Latitude,
		Longitude,
		HDOP,
		Altitude,
		Fix,
		Heading,
		SpeedMph,
		GPSSatellites,
		GLONASSSatellites
	) VALUES (
		@CallRecId,
		@TimeStampUTC,
		@GPSLocationStatus,
		@Latitude,
		@Longitude,
		@HDOP,
		@Altitude,
		@Fix,
		@Heading,
		@SpeedMph,
		@GPSSatellites,
		@GLONASSSatellites
	)
GO
/****** Object:  StoredProcedure [dbo].[LI_DuplicatePositions_Insert_002]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[LI_DuplicatePositions_Insert_002]
	@DeviceId int,
	@DemographicId int,
	@PositionTimeStamp datetime,
	@CRC bigint,
	@CallRecId bigint,
	@PointDataEgglet varbinary(MAX)
AS
/*
===============================================================================
LI_DuplicatePositions_Insert_001
===============================================================================
Application: LoadInfo
Created: 06/16/2021
Developer: S. Cupstid
-------------------------------------------------------------------------------
When LoadInfo determines that a PointDataEgglet represents an already existing
position recorded in the database, a row is inserted into the 
DuplicatePositions table.  The row provides searchable values and the raw 
egglet read from the egg file.
-------------------------------------------------------------------------------
*/
	INSERT INTO [dbo].[DuplicatePositions] (
		DeviceId,
		DemographicId,
		PositionTimeStamp,
		CRC,
		CallRecId,
		PointDataEgglet
	) VALUES (
		@DeviceId,
		@DemographicId,
		@PositionTimeStamp,
		@CRC,
		@CallRecId,
		@PointDataEgglet
	)
GO
/****** Object:  StoredProcedure [dbo].[LI_Events_Insert]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jeremy Nelson
-- Create date: 08/06/2014
-- Description:	Inserts into dbo.Events
-- =============================================
CREATE PROCEDURE [dbo].[LI_Events_Insert]

	@DeviceId			INT,
	@DemographicId		INT,
	@HardwareTypeRecId	INT,
	@Timestamp			DATETIME,
	@HWRuleBitIndex		INT,
	@MTDCallsRecId		INT

AS
BEGIN

	DECLARE @Error		INT
	DECLARE @EventId	INT

	SET NOCOUNT ON;

	BEGIN TRANSACTION Events_Insert
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	--
	--	Calibration Events
	--		These events are not sending in the correct information to be stored.
	--		If DeviceId = 0, Lookup TX DeviceID using OffenderDevices
	--		If DemographicId = 0, Lookup TX DeviceId using Assemblies (via SerialNumber)
	--
	IF @HWRuleBitIndex IN (208, 209)
	BEGIN
		IF ISNULL(@DeviceId, 0) = 0
		BEGIN
			SELECT	@DeviceID = D.DeviceId
			FROM	Protech..OffenderDevices D (NOLOCK)
			WHERE	D.DemographicId = @DemographicId
			AND		@Timestamp BETWEEN D.AssignmentDate AND ISNULL(D.UnassignmentDate, DATEADD(YEAR, 1, GETDATE()))
			AND		Protech.dbo.fn_IsDeviceType('TX', D.DeviceId) = 1
		END
		ELSE
		BEGIN
			IF ISNULL(@DemographicId, 0) = 0
			BEGIN
				SELECT		@DeviceId = A.AssemblyRecId,
							@DemographicId = ISNULL(D.DemographicID, 0)
				FROM		Protech..Assemblies			A (NOLOCK)
				LEFT JOIN	Protech..OffenderDevices	D (NOLOCK)	ON	D.DeviceId = A.AssemblyRecId
																	AND	@Timestamp BETWEEN D.AssignmentDate AND ISNULL(D.UnassignmentDate, DATEADD(YEAR, 1, GETDATE()))
				WHERE		A.SerialNumber LIKE '%FC' + RIGHT('00000' + CAST(@DeviceId AS VARCHAR), 5)
				AND			A.HardwareTypeRecID = 116
			END
		END
	END

	INSERT
	INTO	Events
			(
				DeviceID,
				HardwareTypeRecID,
				DemographicID,
				MTDCallsRecId,
				Timestamp,
				HWRuleBitIndex,
				StoredTimestamp
			)
	VALUES	(
				@DeviceId,
				@HardwareTypeRecId,
				@DemographicId,
				@MTDCallsRecId,
				@Timestamp,
				@HWRuleBitIndex,
				GETDATE()
			)

	SELECT @Error = @@error
	IF (@Error <> 0) GOTO ON_ERROR
		
	SELECT @EventId = SCOPE_IDENTITY()

	--
	--	Update LastEvents table
	--
	DECLARE @LastEventTime		DATETIME

	SELECT	@LastEventTime = L.Timestamp
	FROM	LastEvent	L
	WHERE	L.DeviceID = @DeviceId
	AND		L.DemographicID = @DemographicId
	AND		L.HardwareTypeRecID = @HardwareTypeRecId
	AND		L.HWRuleBitIndex = @HWRuleBitIndex

	IF (@Timestamp > ISNULL(@LastEventTime, '1/1/1900'))
	BEGIN
		DELETE
		FROM	LastEvent
		WHERE	DeviceID = @DeviceId
		AND		DemographicID = @DemographicId
		AND		HardwareTypeRecID = @HardwareTypeRecId
		AND		HWRuleBitIndex = @HWRuleBitIndex

		IF (@@ERROR = 0)
		BEGIN
			INSERT
			INTO	LastEvent
					(
						DeviceID,
						DemographicID,
						HardwareTypeRecID,
						HWRuleBitIndex,
						EventID,
						Timestamp
					)
			VALUES	(
						@DeviceId,
						@DemographicId,
						@HardwareTypeRecId,
						@HWRuleBitIndex,
						@EventId,
						@Timestamp
					)
		END
	END

	SELECT @Error = @@error
	IF (@Error <> 0) GOTO ON_ERROR

	--
	--	Now insert this into the reporting database
	--
	INSERT
	INTO	Reporting..Report_Events
			(
				DeviceID,
				HardwareTypeRecID,
				DemographicID,
				MTDCallsRecId,
				Timestamp,
				HWRuleBitIndex,
				StoredTimestamp
			)
	VALUES	(
				@DeviceId,
				@HardwareTypeRecId,
				@DemographicId,
				@MTDCallsRecId,
				@Timestamp,
				@HWRuleBitIndex,
				GETDATE()
			)

	SELECT @Error = @@error
	IF (@Error <> 0) GOTO ON_ERROR

	--
	--	All succeeded.. Commit and return
	--
	COMMIT TRANSACTION Events_Insert
	RETURN

ON_ERROR:
	--
	--	Something went wrong, Rollback and return
	--
	ROLLBACK TRANSACTION Events_Insert
	RETURN
END
GO
/****** Object:  StoredProcedure [dbo].[LI_Events_Insert_002]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jeremy Nelson
-- Create date: 08/06/2014
-- Description:	Inserts into dbo.Events
-- =============================================
CREATE PROCEDURE [dbo].[LI_Events_Insert_002]

	@DeviceId			INT,
	@DemographicId		INT,
	@HardwareTypeRecId	INT,
	@Timestamp			DATETIME,
	@HWRuleBitIndex		INT,
	@MTDCallsRecId		BIGINT

AS
BEGIN

	DECLARE @Error		INT
	DECLARE @EventId	INT

	SET NOCOUNT ON;

	BEGIN TRANSACTION Events_Insert
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	--
	--	Calibration Events
	--		These events are not sending in the correct information to be stored.
	--		If DeviceId = 0, Lookup TX DeviceID using OffenderDevices
	--		If DemographicId = 0, Lookup TX DeviceId using Assemblies (via SerialNumber)
	--
	IF @HWRuleBitIndex IN (208, 209)
	BEGIN
		IF ISNULL(@DeviceId, 0) = 0
		BEGIN
			SELECT	@DeviceID = D.DeviceId
			FROM	Protech..OffenderDevices D (NOLOCK)
			WHERE	D.DemographicId = @DemographicId
			AND		@Timestamp BETWEEN D.AssignmentDate AND ISNULL(D.UnassignmentDate, DATEADD(YEAR, 1, GETDATE()))
			AND		Protech.dbo.fn_IsDeviceType('TX', D.DeviceId) = 1
		END
		ELSE
		BEGIN
			IF ISNULL(@DemographicId, 0) = 0
			BEGIN
				SELECT		@DeviceId = A.AssemblyRecId,
							@DemographicId = ISNULL(D.DemographicID, 0)
				FROM		Protech..Assemblies			A (NOLOCK)
				LEFT JOIN	Protech..OffenderDevices	D (NOLOCK)	ON	D.DeviceId = A.AssemblyRecId
																	AND	@Timestamp BETWEEN D.AssignmentDate AND ISNULL(D.UnassignmentDate, DATEADD(YEAR, 1, GETDATE()))
				WHERE		A.SerialNumber LIKE '%FC' + RIGHT('00000' + CAST(@DeviceId AS VARCHAR), 5)
				AND			A.HardwareTypeRecID = 116
			END
		END
	END

	INSERT
	INTO	Events
			(
				DeviceID,
				HardwareTypeRecID,
				DemographicID,
				MTDCallsRecId,
				Timestamp,
				HWRuleBitIndex,
				StoredTimestamp
			)
	VALUES	(
				@DeviceId,
				@HardwareTypeRecId,
				@DemographicId,
				@MTDCallsRecId,
				@Timestamp,
				@HWRuleBitIndex,
				GETDATE()
			)

	SELECT @Error = @@error
	IF (@Error <> 0) GOTO ON_ERROR
		
	SELECT @EventId = SCOPE_IDENTITY()

	--
	--	Update LastEvents table
	--
	DECLARE @LastEventTime		DATETIME

	SELECT	@LastEventTime = L.Timestamp
	FROM	LastEvent	L
	WHERE	L.DeviceID = @DeviceId
	AND		L.DemographicID = @DemographicId
	AND		L.HardwareTypeRecID = @HardwareTypeRecId
	AND		L.HWRuleBitIndex = @HWRuleBitIndex

	IF (@Timestamp > ISNULL(@LastEventTime, '1/1/1900'))
	BEGIN
		DELETE
		FROM	LastEvent
		WHERE	DeviceID = @DeviceId
		AND		DemographicID = @DemographicId
		AND		HardwareTypeRecID = @HardwareTypeRecId
		AND		HWRuleBitIndex = @HWRuleBitIndex

		IF (@@ERROR = 0)
		BEGIN
			INSERT
			INTO	LastEvent
					(
						DeviceID,
						DemographicID,
						HardwareTypeRecID,
						HWRuleBitIndex,
						EventID,
						Timestamp
					)
			VALUES	(
						@DeviceId,
						@DemographicId,
						@HardwareTypeRecId,
						@HWRuleBitIndex,
						@EventId,
						@Timestamp
					)
		END
	END

	SELECT @Error = @@error
	IF (@Error <> 0) GOTO ON_ERROR

	--
	--	Now insert this into the reporting database
	--
	INSERT
	INTO	Reporting..Report_Events
			(
				DeviceID,
				HardwareTypeRecID,
				DemographicID,
				MTDCallsRecId,
				Timestamp,
				HWRuleBitIndex,
				StoredTimestamp
			)
	VALUES	(
				@DeviceId,
				@HardwareTypeRecId,
				@DemographicId,
				@MTDCallsRecId,
				@Timestamp,
				@HWRuleBitIndex,
				GETDATE()
			)

	SELECT @Error = @@error
	IF (@Error <> 0) GOTO ON_ERROR

	--
	--	All succeeded.. Commit and return
	--
	COMMIT TRANSACTION Events_Insert
	RETURN

ON_ERROR:
	--
	--	Something went wrong, Rollback and return
	--
	ROLLBACK TRANSACTION Events_Insert
	RETURN
END

GO
/****** Object:  StoredProcedure [dbo].[LI_GetCallRecId_001_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Elena Roe
-- Create date: 1/13/2010
-- Description:	Retrieve CallRecId from MTDCalls
--              based on DemographicId, DeviceId
--              and StartTime
-- =============================================
CREATE PROCEDURE [dbo].[LI_GetCallRecId_001_DEL]
    @DemographicID int,
	@DeviceID int,
	@StartTime datetime
	
AS

BEGIN
    SET NOCOUNT ON
	Select
		 CallRecID 
		 
	FROM dbo.MTDCalls 	
		 
	WHERE DemoGraphicID = @DemographicID
		  and DeviceID = @DeviceID
		  and StartTime = @StartTime
	
END
GO
/****** Object:  StoredProcedure [dbo].[LI_GetVCmLIFromStartDate_001_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO


-- =============================================
-- Author:        Randy Buffington
-- Create date: 7/30/2010
-- Description: get records from VCommLoadInfoStats From StartTimePassed IN
--              up to 120,960 records which is (12 * 60 * 24 * 7) 
--              12 - 5 sec intervals in a min.
--              60 - Min in Hour
--              24 - Hour is day
--               7 - Days in week
--
--              This is the maximum shown in the Grid in LoadInfoViewer
--
--  Calling Convention for parameters:
--@TimeIn = '7/1/2010'
--@ServerNameList = 'vcommland01|vcommcell01| vcommcell02| vcommcell03|'
--
--  08/17/2010 RPB Changed Dynamic Query so it does not have to parse the list
--  08/19/2010 RPB Changed Format of the date from 100 to 109 to include seconds
-- =============================================

CREATE PROCEDURE [dbo].[LI_GetVCmLIFromStartDate_001_DEL]
    
@TimeIN DateTime,
@ServerNameList Varchar(500)
 
AS

BEGIN

DECLARE @RecCount Int
DECLARE @Temp varchar(200)
DECLARE @Search varchar (1)


    SET NOCOUNT ON


DECLARE @sSQL varchar(4000)
SET @Temp = Replace(@ServerNameList, "'", '')
SET @ServerNameList = Replace(@Temp, "|", "'")



SET @sSQL = '    SET NOCOUNT ON
    
                  Select TOP 120960 
                          [UTCTimeStamp] as dateTime,
                          [ServerIP] as serverID,
                          [ServerName] as serverName,
                          [Files] as files,
                          [Points] as points,
                          [DebugPoints] as debug,
                          [Egglets] as eggLets,
                          [Threads] as threads,
                          [Queued] as queued,
                          [Errors] as errors

                    FROM 
                        [dbo].[VCommLoadInfoStats]
                    WHERE '
                    SET @sSQL = @sSql  + '(UTCTimeStamp <= ''' +
                        Convert(varchar(30), @TimeIn, 109) + ''') AND  ServerName in (''' + @ServerNameList + ''') 
                                 ORDER BY UTCTimeStamp DESC ' 
      
       --PRINT @sSQL    

      EXEC(@sSQL)
END 
          
          -- Convert(varchar(30), @TimeIn, 100)




GO
/****** Object:  StoredProcedure [dbo].[LI_GetVCmLIStatsDateAll_001_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:        Randy Buffington
-- Create date: 3/23/2010
-- Description: get records from VCommLoadInfoStats by ServerName
-- Case                          Number Of rec’s
--   1             12,                       //1 minute 12, 5 seconds points
--   2             60,                       //5 minutes 60, 5 seconds points
--   3             120,                      //10 minutes 120, 5 seconds points
--   4             360,                      //30 minutes 360, 5 seconds points
--   5             720,                      //60 minutes 720, 5 seconds points
--   6             17,280,                   //Day  17,280, 5 seconds points
--
-- =============================================
CREATE PROCEDURE [dbo].[LI_GetVCmLIStatsDateAll_001_DEL]
    
@ServerName varchar(50),
@TimeFrame int
 
AS

BEGIN
    SET NOCOUNT ON

 if (@TimeFrame = 1)
      Begin
            SELECT Top 12
			  [UTCTimeStamp] as Time,
              [Points] as Points,
              [Files] as Files,
              [Errors] as Errors,
              [Threads]as Threads,
              [DebugPoints] as DebugPoints,
              [Egglets] as EggLets,
              [Queued] as Queued,
              [ServerName]as ServerName,
              [ServerIP] as ServerIP
              
        FROM 
            [dbo].[VCommLoadInfoStats]
        WHERE
            ServerName = @ServerName          
        ORDER BY 
            UTCTimeStamp Desc
      End   
else if (@TimeFrame = 2)      
      Begin
            SELECT Top 60
			  [UTCTimeStamp] as Time,
              [Points] as Points,
              [Files] as Files,
              [Errors] as Errors,
              [Threads]as Threads,
              [DebugPoints] as DebugPoints,
              [Egglets] as EggLets,
              [Queued] as Queued,
              [ServerName]as ServerName,
              [ServerIP] as ServerIP
        FROM 
            [dbo].[VCommLoadInfoStats]
        WHERE
            ServerName = @ServerName          
        ORDER BY 
            UTCTimeStamp  Desc
      End   
else if (@TimeFrame = 3)      
      Begin
            SELECT Top 120
			  [UTCTimeStamp] as Time,
              [Points] as Points,
              [Files] as Files,
              [Errors] as Errors,
              [Threads]as Threads,
              [DebugPoints] as DebugPoints,
              [Egglets] as EggLets,
              [Queued] as Queued,
              [ServerName]as ServerName,
              [ServerIP] as ServerIP
        FROM 
            [dbo].[VCommLoadInfoStats]
        WHERE
            ServerName = @ServerName          
        ORDER BY 
            UTCTimeStamp  Desc
      End   
else if (@TimeFrame = 4)      
      Begin
            SELECT Top 360
			  [UTCTimeStamp] as Time,
              [Points] as Points,
              [Files] as Files,
              [Errors] as Errors,
              [Threads]as Threads,
              [DebugPoints] as DebugPoints,
              [Egglets] as EggLets,
              [Queued] as Queued,
              [ServerName]as ServerName,
              [ServerIP] as ServerIP
        FROM 
            [dbo].[VCommLoadInfoStats]
        WHERE
            ServerName = @ServerName          
        ORDER BY 
            UTCTimeStamp  Desc
      End   
else if (@TimeFrame = 5)      
      Begin
            SELECT Top 720
			  [UTCTimeStamp] as Time,
              [Points] as Points,
              [Files] as Files,
              [Errors] as Errors,
              [Threads]as Threads,
              [DebugPoints] as DebugPoints,
              [Egglets] as EggLets,
              [Queued] as Queued,
              [ServerName]as ServerName,
              [ServerIP] as ServerIP
        FROM 
            [dbo].[VCommLoadInfoStats]
        WHERE
            ServerName = @ServerName          
        ORDER BY 
            UTCTimeStamp Desc
      End   
else if (@TimeFrame = 6)      
      Begin
            SELECT Top 17280
			  [UTCTimeStamp] as Time,
              [Points] as Points,
              [Files] as Files,
              [Errors] as Errors,
              [Threads]as Threads,
              [DebugPoints] as DebugPoints,
              [Egglets] as EggLets,
              [Queued] as Queued,
              [ServerName]as ServerName,
              [ServerIP] as ServerIP
        FROM 
            [dbo].[VCommLoadInfoStats]
        WHERE
            ServerName = @ServerName          
        ORDER BY 
            UTCTimeStamp  Desc
      End   
      
      
END


GO
/****** Object:  StoredProcedure [dbo].[LI_GetVCommLIStatsbyUTC_001_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Elena Roe
-- Create date: 3/15/2010
-- Description: get records from VCommLoadInfoStats based on UTCTimeStamp date range
-- =============================================
CREATE PROCEDURE [dbo].[LI_GetVCommLIStatsbyUTC_001_DEL]
    
	 @UTCTimeStampStart datetime,
	 @UTCTimeStampEnd datetime
 
AS


BEGIN
    SET NOCOUNT ON
	SELECT [VCommLoadinfoStatsRecID]
      ,[ServerIP]
      ,[ServerName]
      ,[ApplicationName]
      ,[Files]
      ,[Points]
      ,[Threads]
      ,[Errors]
      ,[Queued]
      ,[DebugPoints]
      ,[Egglets]
      ,[UTCStartTime]
      ,[UTCTimeStamp]
  FROM [dbo].[VCommLoadInfoStats]
  WHERE [UTCTimeStamp] between @UTCTimeStampStart and @UTCTimeStampEnd
	
END
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertDCCUnusedEvent]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Elena Roe
-- Create date: 06-07-2013
-- Description:	inserts into DCCUnusedEvent
-- =============================================
CREATE PROCEDURE [dbo].[LI_InsertDCCUnusedEvent]
   		    @DemographicID int,
            @DeviceID int,
			@EMSEventTypeID smallint,
			@EventTimestamp datetime,
			@Parameter varchar(25),
            @Status smallint,
			@EMSEventLogID int,
            @MTDCallRecId bigint        
               
AS
BEGIN
	SET NOCOUNT ON
    INSERT INTO [dbo].[DCCUnusedEvent]
           ([DemographicID]
           ,[DeviceID]
           ,[EMSEventTypeID]
           ,[EventTimestamp]
           ,[Parameter]
           ,[Status]
           ,[EMSEventLogID]
           ,[MTDCallRecID]
           ,[StoredTimestamp])
     VALUES
           (@DemographicID
           ,@DeviceID
           ,@EMSEventTypeID
           ,@EventTimestamp
           ,@Parameter
           ,@Status
           ,@EMSEventLogID
           ,@MTDCallRecID
           ,getdate())

END
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertLbsPositions_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Elena Roe
-- Create date: 02-05-2010
-- Description:	inserts into LBS_Position (part of former [dbo].[dbl_InsertMtdPositions_05232006])
-- =============================================
CREATE PROCEDURE [dbo].[LI_InsertLbsPositions_001]
  @DemographicID int, 
  @DeviceID int, 
  @TimeStamp datetime,
  @LAC int, 
  @CID int,
  @MtdCallsRecID int,
  @DeviceStatus int
   
  AS
BEGIN
    SET NOCOUNT ON
    INSERT INTO LBS_Positions (DemographicID, 
                               DeviceID, 
                               TimeStamp, 
                             -- Longitude, 
                                LAC, 
                                CID,
								MTDCallsRecID, 
								DeviceStatus)
            			VALUES (@DemographicID, 
            			        @DeviceID, 
            			        @TimeStamp,
	                            @LAC, 
	                            @CID, 
								@MtdCallsRecID, 
								@DeviceStatus)
END
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertLbsPositions_002]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Elena Roe
-- Create date: 02-05-2010
-- Description:	inserts into LBS_Position (part of former [dbo].[dbl_InsertMtdPositions_05232006])
-- =============================================
CREATE PROCEDURE [dbo].[LI_InsertLbsPositions_002]
  @DemographicID int, 
  @DeviceID int, 
  @TimeStamp datetime,
  @LAC int, 
  @CID int,
  @MtdCallsRecID bigint,
  @DeviceStatus int
   
  AS
BEGIN
    SET NOCOUNT ON
    INSERT INTO LBS_Positions (DemographicID, 
                               DeviceID, 
                               TimeStamp, 
                             -- Longitude, 
                                LAC, 
                                CID,
								MTDCallsRecID, 
								DeviceStatus)
            			VALUES (@DemographicID, 
            			        @DeviceID, 
            			        @TimeStamp,
	                            @LAC, 
	                            @CID, 
								@MtdCallsRecID, 
								@DeviceStatus)
END


GO
/****** Object:  StoredProcedure [dbo].[LI_InsertMtdAlarms_001_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
-- =============================================
-- Author:		Randy Buffington
-- Create date: 02-08-2010
-- Description:	Insert MtdAlarms record
-- =============================================
/*****Warning: this store procedure is shared with ProtechE. *************
******Please see DBA before modifying. ***********************************/

CREATE PROCEDURE [dbo].[LI_InsertMtdAlarms_001_DEL]
	@DemographicID int,
	@DeviceID int,  
	@TimeStamp DateTime,
	@PointStatus int, 
	@RuleID int,
	@HWRule int,
	@RuleStatus smallint,
	@MTDCallsRecID int,
	@OneTimeScheduleID int,
	@DeviceStatus int
	
AS
	SET NOCOUNT ON
	INSERT INTO MTD_Alarms ( 
			DemographicID, 
			DeviceID, 
			TimeStamp,
			PointStatus,
			RuleID,
			HWRule, 
			RuleStatus, 
			MTDCallsRecID,
			OneTimeSchedId,
			DeviceStatus)
	VALUES( 
			@DemographicID,
			@DeviceID,  
			@TimeStamp,
			@PointStatus,
			@RuleID,
			@HWRule, 
			@RuleStatus,
			@MTDCallsRecID,
			@OneTimeScheduleID,
			@DeviceStatus)
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertMtdAlarms_002]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- =============================================
-- Author:		Randy Buffington
-- Create date: 02-08-2010
-- Description:	Insert MtdAlarms record
-- RPB 5/7/2012 - Added ZoneRecID
-- =============================================
/*****Warning: this store procedure is shared with ProtechE. *************
******Please see DBA before modifying. ***********************************/

CREATE PROCEDURE [dbo].[LI_InsertMtdAlarms_002]
	@DemographicID int,
	@DeviceID int,  
	@TimeStamp DateTime,
	@PointStatus int, 
	@RuleID int,
	@HWRule int,
	@RuleStatus smallint,
	@MTDCallsRecID int,
	@OneTimeScheduleID int,
	@DeviceStatus int,
	@ZoneRecID int
	
AS
	SET NOCOUNT ON
	INSERT INTO MTD_Alarms ( 
			DemographicID, 
			DeviceID, 
			TimeStamp,
			PointStatus,
			RuleID,
			HWRule, 
			RuleStatus, 
			MTDCallsRecID,
			OneTimeSchedId,
			DeviceStatus,
			ZoneRecID)
	VALUES( 
			@DemographicID,
			@DeviceID,  
			@TimeStamp,
			@PointStatus,
			@RuleID,
			@HWRule, 
			@RuleStatus,
			@MTDCallsRecID,
			@OneTimeScheduleID,
			@DeviceStatus,
			@ZoneRecID)


GO
/****** Object:  StoredProcedure [dbo].[LI_InsertMtdAlarms_003]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- =============================================
-- Author:		Randy Buffington
-- Create date: 02-08-2010
-- Description:	Insert MtdAlarms record
-- RPB 5/7/2012 - Added ZoneRecID
-- Date		By		Change
-- -------- -----   ------
-- 8/8/2013 RPB     Added Support for HWRuleBitIndex)
-- 8/8/2013 RPB     Created a new procedure with the _003 Version
-- =============================================
/*****Warning: this store procedure is shared with ProtechE. *************
******Please see DBA before modifying. ***********************************/

CREATE PROCEDURE [dbo].[LI_InsertMtdAlarms_003]
	@DemographicID int,
	@DeviceID int,  
	@TimeStamp DateTime,
	@PointStatus int, 
	@RuleID int,
	@HWRule int,
	@RuleStatus smallint,
	@MTDCallsRecID bigint,
	@OneTimeScheduleID int,
	@DeviceStatus int,
	@ZoneRecID int,
	@HWRuleBitIndex int

	
AS
	SET NOCOUNT ON
	INSERT INTO MTD_Alarms ( 
			DemographicID, 
			DeviceID, 
			TimeStamp,
			PointStatus,
			RuleID,
			HWRule, 
			RuleStatus, 
			MTDCallsRecID,
			OneTimeSchedId,
			DeviceStatus,
			ZoneRecID,
			HWRuleBitIndex)
	VALUES( 
			@DemographicID,
			@DeviceID,  
			@TimeStamp,
			@PointStatus,
			@RuleID,
			@HWRule, 
			@RuleStatus,
			@MTDCallsRecID,
			@OneTimeScheduleID,
			@DeviceStatus,
			@ZoneRecID,
			@HWRuleBitIndex)



GO
/****** Object:  StoredProcedure [dbo].[LI_InsertMtdCalls_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:	ER copied existing sp and added a transaction
-- SET ANSI_NULLS ON and SET QUOTED_IDENTIFIER ON
-- changed @@identity to scope_identity()
-- ALTER date: 05-21-2010
-- Description:	Inserts into MtdCalls and updates DeviceCallsLastNormal
-- =============================================

CREATE PROCEDURE [dbo].[LI_InsertMtdCalls_001]
	@DeviceID int, 
	@DemographicID int, 
	@ANIPhoneNumber varchar(16), 
	@Originator char(3), 
	@SessionSummary int,
	@StartTime datetime, 
	@EndTime datetime, 
	@ElapsedSeconds int, 
	@PointsProcessed smallint, 
	@PointsMtdReportsSent smallint, 
	@ChgID int=0, 
	@MtdID int=0,
	@IPAddress varchar(16),
	@DatFileName varchar(255),
	@StoredTimeStamp datetime,
	@RecID int OUTPUT,
	@RetCode int OUTPUT
AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @CS_NORMAL_HANGUP int
	DECLARE @InChargerDeviceID int
	DECLARE @err int
	DECLARE @row_count INT
	DECLARE @LastStartTime  datetime
	DECLARE @DeviceMask  int
	DECLARE @DEV_MASK  int
	DECLARE @AlarmStatus  char(1)

	SET @CS_NORMAL_HANGUP = 16384 /* 0x00004000 */
	SET @DEV_MASK = -16777216  /* 0xFF000000 */	
	SET @InChargerDeviceID = 0

	if( @DeviceID < 50330000 )
		SELECT  @InChargerDeviceID = @ChgID
	else
		SELECT  @InChargerDeviceID = @MtdID

	
	BEGIN TRANSACTION InsertMTDCalls
	
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED	--MSSQL only
    
    -- Insert MtdCalls Record into the MtdCalls Table	
	INSERT INTO MTDCalls ( DeviceID, DemoGraphicID, ANIPhoneNumber, IPAddress, Originator, SessionSummary,
                                       StartTime, EndTime, ElapsedSeconds, PointsProcessed, PointsMtdReportsSent, 
                                       InChargerDeviceID, DatFileName, StoredTimeStamp  )
                VALUES( @DeviceID, @DemographicID, @ANIPhoneNumber, @IPAddress, @Originator, @SessionSummary,
                        @StartTime, @EndTime, @ElapsedSeconds, @PointsProcessed, @PointsMtdReportsSent, 
                        @InChargerDeviceID, @DatFileName, @StoredTimeStamp)

    --  If error then set @err and go to on_error to rollback the transaction 
	SELECT @err = @@ERROR, @row_count = @@ROWCOUNT
	IF (@row_count = 0 AND @err = 0) SET @err = 23000
	IF (@err <> 0) GOTO on_error		

	SELECT @RecID = SCOPE_IDENTITY() --MSSQL only
--	SELECT @RecID = @@IDENTITY --Sybase only
	
--  Not needed...  Copied from Dev instead of Production to start where Production had it commented out.
--  This should be removed if testing completes ok. 	
	--/* Clear any previous InChargerDeviceID from affected devices */
	--UPDATE DeviceCallsLastNormal 
	--	SET InChargerDeviceID = 0
	--WHERE 
	--	InChargerDeviceID = @DeviceID	AND (DeviceID != @InChargerDeviceID	OR @InChargerDeviceID = 0)
	
 --   --  If error then set @err and go to on_error to rollback the transaction 
	--SELECT @err = @@error
	--IF (@err <> 0) GOTO on_error
	
			
	SET @LastStartTime = '1/1/1900'

	/* Set the DeviceMask based on the DeviceID of the last call */
	SET @DeviceMask = (@DeviceID & @DEV_MASK)
	
	SELECT @LastStartTime = StartTime, @DeviceID = DeviceID
	FROM DeviceCallsLastAttempt WITH (NOLOCK) --MSSQL only
--	FROM DeviceCallsLastAttempt NOHOLDLOCK ---Sybase only
	WHERE DemoGraphicID = @DemographicID AND (DeviceID & @DEV_MASK) = @DeviceMask

	IF @StartTime > @LastStartTime
	BEGIN
		/* Delete any record in DeviceCallsLastAttempt for this DemographicID */
		DELETE FROM DeviceCallsLastAttempt WITH (ROWLOCK) --MSSQL only
--		DELETE FROM DeviceCallsLastAttempt  --Sybase only
		WHERE DemoGraphicID = @DemographicID
		AND (DeviceID & @DEV_MASK) = @DeviceMask

		--  If error then set @err and go to on_error to rollback the transaction 
		SELECT @err = @@error
		IF (@err <> 0) GOTO on_error	
			
		--/* Now add the latest call record back  */
		INSERT INTO [MTD_01].[dbo].[DeviceCallsLastAttempt] --MSSQL only
--		INSERT INTO [dbo].[DeviceCallsLastAttempt] --Sybase only
           ([CallRecID]
           ,[DeviceID]
           ,[DemoGraphicID]
           ,[PhoneNumber]
           ,[IPAddress]
           ,[Originator]
           ,[SessionSummary]
           ,[StartTime]
           ,[EndTime]
           ,[ElapsedSeconds]
           ,[PointsProcessed]
           ,[PointsDeviceReportsSent]
           ,[InChargerDeviceID])
		VALUES
           (@RecID, 
            @DeviceID,
            @DemographicID,
            @ANIPhoneNumber,
            @IPAddress, 
            @Originator,
            @SessionSummary,
            @StartTime, 
            @EndTime, 
            @ElapsedSeconds,
            @PointsProcessed,
            @PointsMtdReportsSent, 
            @InChargerDeviceID)

		SELECT @err = @@error
		IF (@err <> 0) GOTO on_error
				
	END

	IF (@SessionSummary & @CS_NORMAL_HANGUP) = @CS_NORMAL_HANGUP
	BEGIN
		SET @LastStartTime = '1/1/1900'

		SELECT @LastStartTime = StartTime, @AlarmStatus = AlarmStatus
		FROM DeviceCallsLastNormal WITH (NOLOCK) --MSSQL only
--		FROM DeviceCallsLastNormal NOHOLDLOCK --Sybase only
		WHERE DemoGraphicID = @DemographicID
		AND (DeviceID & @DEV_MASK) = @DeviceMask
 
		IF @StartTime > @LastStartTime
		BEGIN
			/* Delete any record in DeviceCallsLastNormal for this DemographicID */
			DELETE FROM DeviceCallsLastNormal  WITH (ROWLOCK) --MSSQL only
--			DELETE FROM DeviceCallsLastNormal --Sybase only
			WHERE DemoGraphicID = @DemographicID
			AND (DeviceID & @DEV_MASK) = @DeviceMask

			SELECT @err = @@error
			IF (@err <> 0) GOTO on_error

			/* If AlarmStatus is 'A' (Unable To Connect Alarm sent),
			    Set it to 'C' (UTC alarm has cleared since this is a successful call
			    4/24/06 (SLM) - If status is 'S' (scheduled alarm), set to 'K' */
			IF @AlarmStatus = 'A'
				SELECT @AlarmStatus = 'C'
			ELSE IF @AlarmStatus = 'S'
				SELECT @AlarmStatus = 'K'

			/* Now add the latest call record back  */
			/* Note: The extra NULL is for the AlarmTimeStamp that only exists in the DeviceCallsLastNormal table */		
			INSERT INTO [MTD_01].[dbo].[DeviceCallsLastNormal] --MSSQL only
--			INSERT INTO [dbo].[DeviceCallsLastNormal] --Sybase only
			   ([CallRecID]
			   ,[DeviceID]
			   ,[DemoGraphicID]
			   ,[PhoneNumber]
			   ,[IPAddress]
			   ,[Originator]
			   ,[SessionSummary]
			   ,[StartTime]
			   ,[EndTime]
			   ,[ElapsedSeconds]
			   ,[PointsProcessed]
			   ,[PointsDeviceReportsSent]
			   ,[InChargerDeviceID]
			   ,[AlarmTimeStamp]
			   ,[AlarmStatus])
			VALUES
			   (@RecID, 
				@DeviceID,
				@DemographicID,
				@ANIPhoneNumber,
				@IPAddress, 
				@Originator,
				@SessionSummary,
				@StartTime, 
				@EndTime, 
				@ElapsedSeconds,
				@PointsProcessed,
				@PointsMtdReportsSent, 
				@InChargerDeviceID,
				Null, 
				@AlarmStatus) 
				
			SELECT @err = @@error
			IF (@err <> 0) GOTO on_error
		END
	END
	
	
	COMMIT TRAN InsertMTDCalls    
	-- return 0 to signal success
	SET @RetCode =  0
	RETURN @RetCode
	    
on_error:
	ROLLBACK TRANSACTION
	-- return @err to signal failure
	SET @RetCode = @err
	RETURN @RetCode

END
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertMtdCalls_002]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:	ER copied existing sp and added a transaction
-- SET ANSI_NULLS ON and SET QUOTED_IDENTIFIER ON
-- changed @@identity to scope_identity()
-- ALTER date: 05-21-2010
-- Description:	Inserts into MtdCalls and updates DeviceCallsLastNormal
-- 02-03-2014 changed population of ActivationDate for Protech.dbo.OffenderDevices table
-- =============================================

CREATE PROCEDURE [dbo].[LI_InsertMtdCalls_002]
	@DeviceID int, 
	@DemographicID int, 
	@ANIPhoneNumber varchar(16), 
	@Originator char(3), 
	@SessionSummary int,
	@StartTime datetime, 
	@EndTime datetime, 
	@ElapsedSeconds int, 
	@PointsProcessed smallint, 
	@PointsMtdReportsSent smallint, 
	@ChgID int = 0, 
	@MtdID int = 0,
	@IPAddress varchar(16),
	@DatFileName varchar(255),
	@StoredTimeStamp datetime,
	@RecID int OUTPUT,
	@RetCode int OUTPUT
AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @CS_NORMAL_HANGUP int
	DECLARE @InChargerDeviceID int
	DECLARE @err int
	DECLARE @row_count INT
	DECLARE @LastStartTime  datetime
	DECLARE @DeviceMask  int
	DECLARE @DEV_MASK  int
	DECLARE @AlarmStatus  char(1)

	SET @CS_NORMAL_HANGUP = 16384 /* 0x00004000 */
	SET @DEV_MASK = -16777216  /* 0xFF000000 */	
	SET @InChargerDeviceID = 0

	if( @DeviceID < 50330000 )
		SELECT  @InChargerDeviceID = @ChgID
	else
		SELECT  @InChargerDeviceID = @MtdID

	
	BEGIN TRANSACTION InsertMTDCalls
	
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED	--MSSQL only
    
    -- Insert MtdCalls Record into the MtdCalls Table	
	INSERT INTO MTDCalls ( DeviceID, DemoGraphicID, ANIPhoneNumber, IPAddress, Originator, SessionSummary,
                                       StartTime, EndTime, ElapsedSeconds, PointsProcessed, PointsMtdReportsSent, 
                                       InChargerDeviceID, DatFileName, StoredTimeStamp  )
                VALUES( @DeviceID, @DemographicID, @ANIPhoneNumber, @IPAddress, @Originator, @SessionSummary,
                        @StartTime, @EndTime, @ElapsedSeconds, @PointsProcessed, @PointsMtdReportsSent, 
                        @InChargerDeviceID, @DatFileName, @StoredTimeStamp)

    --  If error then set @err and go to on_error to rollback the transaction 
	SELECT @err = @@ERROR, @row_count = @@ROWCOUNT
	IF (@row_count = 0 AND @err = 0) SET @err = 23000
	IF (@err <> 0) GOTO on_error		

	SELECT @RecID = SCOPE_IDENTITY() --MSSQL only
--	SELECT @RecID = @@IDENTITY --Sybase only
	
--  Not needed...  Copied from Dev instead of Production to start where Production had it commented out.
--  This should be removed if testing completes ok. 	
	--/* Clear any previous InChargerDeviceID from affected devices */
	--UPDATE DeviceCallsLastNormal 
	--	SET InChargerDeviceID = 0
	--WHERE 
	--	InChargerDeviceID = @DeviceID	AND (DeviceID != @InChargerDeviceID	OR @InChargerDeviceID = 0)
	
 --   --  If error then set @err and go to on_error to rollback the transaction 
	--SELECT @err = @@error
	--IF (@err <> 0) GOTO on_error
	
			
	SET @LastStartTime = '1/1/1900'

	/* Set the DeviceMask based on the DeviceID of the last call */
	SET @DeviceMask = (@DeviceID & @DEV_MASK)
	
	SELECT @LastStartTime = StartTime, @DeviceID = DeviceID
	FROM DeviceCallsLastAttempt WITH (NOLOCK) --MSSQL only
--	FROM DeviceCallsLastAttempt NOHOLDLOCK ---Sybase only
	WHERE DemoGraphicID = @DemographicID AND (DeviceID & @DEV_MASK) = @DeviceMask

	IF @StartTime > @LastStartTime
	BEGIN
		/* Delete any record in DeviceCallsLastAttempt for this DemographicID */
		DELETE FROM DeviceCallsLastAttempt WITH (ROWLOCK) --MSSQL only
--		DELETE FROM DeviceCallsLastAttempt  --Sybase only
		WHERE DemoGraphicID = @DemographicID
		AND (DeviceID & @DEV_MASK) = @DeviceMask

		--  If error then set @err and go to on_error to rollback the transaction 
		SELECT @err = @@error
		IF (@err <> 0) GOTO on_error	
			
		--/* Now add the latest call record back  */
		INSERT INTO [MTD_01].[dbo].[DeviceCallsLastAttempt] --MSSQL only
--		INSERT INTO [dbo].[DeviceCallsLastAttempt] --Sybase only
           ([CallRecID]
           ,[DeviceID]
           ,[DemoGraphicID]
           ,[PhoneNumber]
           ,[IPAddress]
           ,[Originator]
           ,[SessionSummary]
           ,[StartTime]
           ,[EndTime]
           ,[ElapsedSeconds]
           ,[PointsProcessed]
           ,[PointsDeviceReportsSent]
           ,[InChargerDeviceID])
		VALUES
           (@RecID, 
            @DeviceID,
            @DemographicID,
            @ANIPhoneNumber,
            @IPAddress, 
            @Originator,
            @SessionSummary,
            @StartTime, 
            @EndTime, 
            @ElapsedSeconds,
            @PointsProcessed,
            @PointsMtdReportsSent, 
            @InChargerDeviceID)

		SELECT @err = @@error
		IF (@err <> 0) GOTO on_error
				
	END

	IF (@SessionSummary & @CS_NORMAL_HANGUP) = @CS_NORMAL_HANGUP
	BEGIN
		SET @LastStartTime = '1/1/1900'

		SELECT @LastStartTime = StartTime, @AlarmStatus = AlarmStatus
		FROM DeviceCallsLastNormal WITH (NOLOCK) --MSSQL only
--		FROM DeviceCallsLastNormal NOHOLDLOCK --Sybase only
		WHERE DemoGraphicID = @DemographicID
		AND (DeviceID & @DEV_MASK) = @DeviceMask
 
		IF @StartTime > @LastStartTime
		BEGIN
			/* Delete any record in DeviceCallsLastNormal for this DemographicID */
			DELETE FROM DeviceCallsLastNormal  WITH (ROWLOCK) --MSSQL only
--			DELETE FROM DeviceCallsLastNormal --Sybase only
			WHERE DemoGraphicID = @DemographicID
			AND (DeviceID & @DEV_MASK) = @DeviceMask

			SELECT @err = @@error
			IF (@err <> 0) GOTO on_error

			/* If AlarmStatus is 'A' (Unable To Connect Alarm sent),
			    Set it to 'C' (UTC alarm has cleared since this is a successful call
			    4/24/06 (SLM) - If status is 'S' (scheduled alarm), set to 'K' */
			IF @AlarmStatus = 'A'
				SELECT @AlarmStatus = 'C'
			ELSE IF @AlarmStatus = 'S'
				SELECT @AlarmStatus = 'K'

			/* Now add the latest call record back  */
			/* Note: The extra NULL is for the AlarmTimeStamp that only exists in the DeviceCallsLastNormal table */		
			INSERT INTO [MTD_01].[dbo].[DeviceCallsLastNormal] --MSSQL only
--			INSERT INTO [dbo].[DeviceCallsLastNormal] --Sybase only
			   ([CallRecID]
			   ,[DeviceID]
			   ,[DemoGraphicID]
			   ,[PhoneNumber]
			   ,[IPAddress]
			   ,[Originator]
			   ,[SessionSummary]
			   ,[StartTime]
			   ,[EndTime]
			   ,[ElapsedSeconds]
			   ,[PointsProcessed]
			   ,[PointsDeviceReportsSent]
			   ,[InChargerDeviceID]
			   ,[AlarmTimeStamp]
			   ,[AlarmStatus])
			VALUES
			   (@RecID, 
				@DeviceID,
				@DemographicID,
				@ANIPhoneNumber,
				@IPAddress, 
				@Originator,
				@SessionSummary,
				@StartTime, 
				@EndTime, 
				@ElapsedSeconds,
				@PointsProcessed,
				@PointsMtdReportsSent, 
				@InChargerDeviceID,
				Null, 
				@AlarmStatus) 
				
			SELECT @err = @@error
			IF (@err <> 0) GOTO on_error
		END
	END

	--
	--	Activate the offender
	--		This method should activate all offenders, groups, and group offenders
	--
	DECLARE @StartTimeUTC DATETIME = Protech.dbo.fn_GetUTCTime(@StartTime, -300, -240) 
	EXEC Protech.dbo.dcc_ActivateOffender @DeviceID, @DemographicID, @StartTimeUTC
		
	SELECT @err = @@error
	IF (@err <> 0) GOTO on_error
	--
	--	End: Activate the offender
	--
				
	COMMIT TRAN InsertMTDCalls    
	-- return 0 to signal success
	SET @RetCode =  0
	RETURN @RetCode
	    
on_error:
	ROLLBACK TRANSACTION
	-- return @err to signal failure
	SET @RetCode = @err
	RETURN @RetCode

END

GO
/****** Object:  StoredProcedure [dbo].[LI_InsertMtdCalls_003]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ================================================================================
-- LI_InsertMtdCalls_003
-- ================================================================================


-- =============================================
-- Author:	ER copied existing sp and added a transaction
-- SET ANSI_NULLS ON and SET QUOTED_IDENTIFIER ON
-- changed @@identity to scope_identity()
-- ALTER date: 05-21-2010
-- Description:	Inserts into MtdCalls and updates DeviceCallsLastNormal
-- 02-03-2014 changed population of ActivationDate for Protech.dbo.OffenderDevices table
-- =============================================
-- ********************************************************************************
-- 09/15/2022 - JSC - Replaced @@IDENTITY with SCOPE_IDENTITY()
-- ********************************************************************************
CREATE PROCEDURE [dbo].[LI_InsertMtdCalls_003]
	@DeviceID int, 
	@DemographicID int, 
	@ANIPhoneNumber varchar(16), 
	@Originator char(3), 
	@SessionSummary int,
	@StartTime datetime, 
	@EndTime datetime, 
	@ElapsedSeconds int, 
	@PointsProcessed smallint, 
	@PointsMtdReportsSent smallint, 
	@ChgID int = 0, 
	@MtdID int = 0,
	@IPAddress varchar(16),
	@DatFileName varchar(255),
	@StoredTimeStamp datetime,
	@RecID bigint OUTPUT,
	@RetCode int OUTPUT
AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @CS_NORMAL_HANGUP int
	DECLARE @InChargerDeviceID int
	DECLARE @err int
	DECLARE @row_count INT
	DECLARE @LastStartTime  datetime
	DECLARE @DeviceMask  int
	DECLARE @DEV_MASK  int
	DECLARE @AlarmStatus  char(1)

	SET @CS_NORMAL_HANGUP = 16384 /* 0x00004000 */
	SET @DEV_MASK = -16777216  /* 0xFF000000 */	
	SET @InChargerDeviceID = 0

	if( @DeviceID < 50330000 )
		SELECT  @InChargerDeviceID = @ChgID
	else
		SELECT  @InChargerDeviceID = @MtdID

	
	BEGIN TRANSACTION InsertMTDCalls
	
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED	--MSSQL only
    
    -- Insert MtdCalls Record into the MtdCalls Table	
	INSERT INTO MTDCalls ( DeviceID, DemoGraphicID, ANIPhoneNumber, IPAddress, Originator, SessionSummary,
                                       StartTime, EndTime, ElapsedSeconds, PointsProcessed, PointsMtdReportsSent, 
                                       InChargerDeviceID, DatFileName, StoredTimeStamp  )
                VALUES( @DeviceID, @DemographicID, @ANIPhoneNumber, @IPAddress, @Originator, @SessionSummary,
                        @StartTime, @EndTime, @ElapsedSeconds, @PointsProcessed, @PointsMtdReportsSent, 
                        @InChargerDeviceID, @DatFileName, @StoredTimeStamp)

    --  If error then set @err and go to on_error to rollback the transaction 
	SELECT @err = @@ERROR, @row_count = @@ROWCOUNT
	IF (@row_count = 0 AND @err = 0) SET @err = 23000
	IF (@err <> 0) GOTO on_error		

	SELECT @RecID = SCOPE_IDENTITY() --MSSQL only
--	SELECT @RecID = @@IDENTITY --Sybase only
	
--  Not needed...  Copied from Dev instead of Production to start where Production had it commented out.
--  This should be removed if testing completes ok. 	
	--/* Clear any previous InChargerDeviceID from affected devices */
	--UPDATE DeviceCallsLastNormal 
	--	SET InChargerDeviceID = 0
	--WHERE 
	--	InChargerDeviceID = @DeviceID	AND (DeviceID != @InChargerDeviceID	OR @InChargerDeviceID = 0)
	
 --   --  If error then set @err and go to on_error to rollback the transaction 
	--SELECT @err = @@error
	--IF (@err <> 0) GOTO on_error
	
			
	SET @LastStartTime = '1/1/1900'

	/* Set the DeviceMask based on the DeviceID of the last call */
	SET @DeviceMask = (@DeviceID & @DEV_MASK)
	
	SELECT @LastStartTime = StartTime, @DeviceID = DeviceID
	FROM DeviceCallsLastAttempt WITH (NOLOCK) --MSSQL only
--	FROM DeviceCallsLastAttempt NOHOLDLOCK ---Sybase only
	WHERE DemoGraphicID = @DemographicID AND (DeviceID & @DEV_MASK) = @DeviceMask

	IF @StartTime > @LastStartTime
	BEGIN
		/* Delete any record in DeviceCallsLastAttempt for this DemographicID */
		DELETE FROM DeviceCallsLastAttempt WITH (ROWLOCK) --MSSQL only
--		DELETE FROM DeviceCallsLastAttempt  --Sybase only
		WHERE DemoGraphicID = @DemographicID
		AND (DeviceID & @DEV_MASK) = @DeviceMask

		--  If error then set @err and go to on_error to rollback the transaction 
		SELECT @err = @@error
		IF (@err <> 0) GOTO on_error	
			
		--/* Now add the latest call record back  */
		INSERT INTO [MTD_01].[dbo].[DeviceCallsLastAttempt] --MSSQL only
--		INSERT INTO [dbo].[DeviceCallsLastAttempt] --Sybase only
           ([CallRecID]
           ,[DeviceID]
           ,[DemoGraphicID]
           ,[PhoneNumber]
           ,[IPAddress]
           ,[Originator]
           ,[SessionSummary]
           ,[StartTime]
           ,[EndTime]
           ,[ElapsedSeconds]
           ,[PointsProcessed]
           ,[PointsDeviceReportsSent]
           ,[InChargerDeviceID])
		VALUES
           (@RecID, 
            @DeviceID,
            @DemographicID,
            @ANIPhoneNumber,
            @IPAddress, 
            @Originator,
            @SessionSummary,
            @StartTime, 
            @EndTime, 
            @ElapsedSeconds,
            @PointsProcessed,
            @PointsMtdReportsSent, 
            @InChargerDeviceID)

		SELECT @err = @@error
		IF (@err <> 0) GOTO on_error
				
	END

	IF (@SessionSummary & @CS_NORMAL_HANGUP) = @CS_NORMAL_HANGUP
	BEGIN
		SET @LastStartTime = '1/1/1900'

		SELECT @LastStartTime = StartTime, @AlarmStatus = AlarmStatus
		FROM DeviceCallsLastNormal WITH (NOLOCK) --MSSQL only
--		FROM DeviceCallsLastNormal NOHOLDLOCK --Sybase only
		WHERE DemoGraphicID = @DemographicID
		AND (DeviceID & @DEV_MASK) = @DeviceMask
 
		IF @StartTime > @LastStartTime
		BEGIN
			/* Delete any record in DeviceCallsLastNormal for this DemographicID */
			DELETE FROM DeviceCallsLastNormal  WITH (ROWLOCK) --MSSQL only
--			DELETE FROM DeviceCallsLastNormal --Sybase only
			WHERE DemoGraphicID = @DemographicID
			AND (DeviceID & @DEV_MASK) = @DeviceMask

			SELECT @err = @@error
			IF (@err <> 0) GOTO on_error

			/* If AlarmStatus is 'A' (Unable To Connect Alarm sent),
			    Set it to 'C' (UTC alarm has cleared since this is a successful call
			    4/24/06 (SLM) - If status is 'S' (scheduled alarm), set to 'K' */
			IF @AlarmStatus = 'A'
				SELECT @AlarmStatus = 'C'
			ELSE IF @AlarmStatus = 'S'
				SELECT @AlarmStatus = 'K'

			/* Now add the latest call record back  */
			/* Note: The extra NULL is for the AlarmTimeStamp that only exists in the DeviceCallsLastNormal table */		
			INSERT INTO [MTD_01].[dbo].[DeviceCallsLastNormal] --MSSQL only
--			INSERT INTO [dbo].[DeviceCallsLastNormal] --Sybase only
			   ([CallRecID]
			   ,[DeviceID]
			   ,[DemoGraphicID]
			   ,[PhoneNumber]
			   ,[IPAddress]
			   ,[Originator]
			   ,[SessionSummary]
			   ,[StartTime]
			   ,[EndTime]
			   ,[ElapsedSeconds]
			   ,[PointsProcessed]
			   ,[PointsDeviceReportsSent]
			   ,[InChargerDeviceID]
			   ,[AlarmTimeStamp]
			   ,[AlarmStatus])
			VALUES
			   (@RecID, 
				@DeviceID,
				@DemographicID,
				@ANIPhoneNumber,
				@IPAddress, 
				@Originator,
				@SessionSummary,
				@StartTime, 
				@EndTime, 
				@ElapsedSeconds,
				@PointsProcessed,
				@PointsMtdReportsSent, 
				@InChargerDeviceID,
				Null, 
				@AlarmStatus) 
				
			SELECT @err = @@error
			IF (@err <> 0) GOTO on_error
		END
	END

	--
	--	Activate the offender
	--		This method should activate all offenders, groups, and group offenders
	--
	DECLARE @StartTimeUTC DATETIME = Protech.dbo.fn_GetUTCTime(@StartTime, -300, -240) 
	EXEC Protech.dbo.dcc_ActivateOffender @DeviceID, @DemographicID, @StartTimeUTC
		
	SELECT @err = @@error
	IF (@err <> 0) GOTO on_error
	--
	--	End: Activate the offender
	--
				
	COMMIT TRAN InsertMTDCalls    
	-- return 0 to signal success
	SET @RetCode =  0
	RETURN @RetCode
	    
on_error:
	ROLLBACK TRANSACTION
	-- return @err to signal failure
	SET @RetCode = @err
	RETURN @RetCode

END


GO
/****** Object:  StoredProcedure [dbo].[LI_InsertMtdCalls_004]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




/*
============================================================================
Description: Inserts into MtdCalls and Updates DeviceCallsLastNormal and
		DeviceCallsLastAttempt
============================================================================
Author:	Randy Buffington
----------------------------------------------------------------------------
History
----------------------------------------------------------------------------
----------------------------------------------------------------------------
Date		Author	Description of Modification
----------------------------------------------------------------------------
05-21-2010	ER		(1) Added TRANSACTION to procedure

					(2) Added the SET ANSI_NULLS ON and SET QUOTED_IDENTIFIER ON 
						statements to the script

					(3) Changed @@identity to scope_identity()
----------------------------------------------------------------------------
02-03-2014  ER		(1) Changed population of ActivationDate for 
						Protech.dbo.OffenderDevices table
----------------------------------------------------------------------------
02-27-2023	JSC		(1) Added the UTCStartTime to the arguments and the 
						DeviceCallsLastNormal table
			
					(2) Modified the information header to more clearly show 
						the history of the modifications.

					(3) Removed the SYBASE references
----------------------------------------------------------------------------
09-19/2023	JSC		Modified the stored procedure to use a MERGE statement
					to UPDATE or INSERT the respective rows into the
					DeviceCallsLastNormal and DeviceCallsLastAttempt tables.
					The DELETE/INSERT pattern was removed from the process
					by using the MERGE statement.  Along with the changes
					here, the trigger UpdateDeviceLastCalls was removed
					from the MTDCalls table.
----------------------------------------------------------------------------
09/26/2023	JSC		After deploying to production, it was discovered that
					the changes to this stored procedure along with the
					dropping of the INSERT trigger on the MTDCalls table
					appeared to create a problem that was prevent devices
					from being activated.  As it turned out, the problem 
					was a bug in the stored procedure that existed prior to
					this deployment.  The INSERT trigger masked the problem.
					Upon dropping the INSERT trigger, the problem was 
					exposed.  
					
					When retrieving the @LastStartTime from the 
					DeviceCallsLastAttempt table, the stored procedure was
					also overwriting the value in the @DeviceID argument.  
					When the offender (represented by the demographic ID) 
					was previously assigned to a different device of the 
					same type, the SELECT statement was overwriting the 
					value in @DeviceID with the previous device's ID.  
					Because the SQL commands that were maintaining the 
					DeviceCallsLastAttempt and DeviceCallsLastNormal tables
					was using a "device type" mask in their conditionals,
					the commands were working as expected (somewhat).  The
					problem was that the value in the @DeviceID argument
					(which was overwritten) is passed to the stored 
					procedure that updates the activation date in the 
					OffenderDevices table.  That stored procedure verifies
					that the assignment has not been unassigned and/or 
					deactivated, so nothing gets updated leaving the
					expected device in a pending activation state.

					Other improvements were made to the deployed stored 
					procedure to make it more accurate.  The DELETE 
					statement was modified to ignore the current demographic
					and device id combination.  This allows the newly added
					IDENTITY column to remain in the table without causing 
					an INT overflow any time too soon.  The MERGE statement
					does not use the device type mask to match as it is
					designed to only UPDATE or INSERT a row for the current
					demographic and device ID combination which has a 
					UNIQUE CONSTRAINT.
============================================================================
*/

CREATE     PROCEDURE [dbo].[LI_InsertMtdCalls_004]
	@DeviceID int, 
	@DemographicID int, 
	@ANIPhoneNumber varchar(16), 
	@Originator char(3), 
	@SessionSummary int,
	@StartTime datetime, 
	@UTCStartTime datetime,
	@EndTime datetime, 
	@ElapsedSeconds int, 
	@PointsProcessed smallint, 
	@PointsMtdReportsSent smallint, 
	@ChgID int = 0, 
	@MtdID int = 0,
	@IPAddress varchar(16),
	@DatFileName varchar(255),
	@StoredTimeStamp datetime,
	@RecID bigint OUTPUT,
	@RetCode int OUTPUT
AS
	SET NOCOUNT ON
	
	DECLARE @CS_NORMAL_HANGUP int,
			@InChargerDeviceID int,
			@err int,
			@row_count INT,
			@LastUTCStartTime  datetime,
			@LastStartTime  datetime,
			@DeviceMask  int,
			@DEV_MASK  int,
			@AlarmStatus  char(1)

	SET @CS_NORMAL_HANGUP = 16384 /* 0x00004000 */
	SET @DEV_MASK = -16777216  /* 0xFF000000 */	
	SET @InChargerDeviceID = 0

	IF ( @DeviceID < 50330000 )
		SELECT  @InChargerDeviceID = @ChgID
	ELSE
		SELECT  @InChargerDeviceID = @MtdID

	
	BEGIN TRANSACTION InsertMTDCalls
	
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED	
    
    -- Insert MtdCalls Record into the MtdCalls Table	
	INSERT INTO MTDCalls ( 
		DeviceID, 
		DemoGraphicID, 
		ANIPhoneNumber, 
		IPAddress, 
		Originator, 
		SessionSummary,
		StartTime, 
		EndTime, 
		ElapsedSeconds, 
		PointsProcessed, 
		PointsMtdReportsSent, 
		InChargerDeviceID, 
		DatFileName, 
		StoredTimeStamp  
	) VALUES ( 
		@DeviceID, 
		@DemographicID, 
		@ANIPhoneNumber, 
		@IPAddress, 
		@Originator, 
		@SessionSummary,
        @StartTime, 
		@EndTime, 
		@ElapsedSeconds, 
		@PointsProcessed, 
		@PointsMtdReportsSent, 
        @InChargerDeviceID, 
		@DatFileName, 
		@StoredTimeStamp)

    --  If error then set @err and go to on_error to rollback the transaction 
	SELECT 
		@err = @@ERROR, 
		@row_count = @@ROWCOUNT
	
	IF (@row_count = 0 AND @err = 0) 
		SET @err = 23000
	
	IF (@err <> 0) GOTO ON_ERROR		

	SELECT @RecID = SCOPE_IDENTITY() 
			
	SET @LastStartTime = '1/1/1900'

	/* Set the DeviceMask based on the DeviceID of the last call */
	SET @DeviceMask = (@DeviceID & @DEV_MASK)
	
	-- If more than one row existed in the DeviceCallsLastAttempt table 
	-- for the specified demographic id and device type, the following
	-- SELECT statement as originally written would generate an error.
	-- To prevent the error, the conditional logic was changed to 
	-- only match on the current device id.  In addition to this change,
	-- the previous version of the SELECT was overwriting the argument
	-- @DeviceID.  This was causing activations to fail if the INSERT
	-- trigger was disabled or removed from the MTDCalls table.  The
	-- execution of the INSERT trigger prevented the reassignment of the
	-- @DeviceID from causing problem because the TRIGGER was inserting
	-- a row into the DeviceCallsLastAttempt table with the value passed
	-- into this stored procedure in the @DeviceID argument.  If the
	-- TRIGGER was disabled or dropped, then the reassignment of the
	-- @DeviceID value could cause the failure of a device activation
	-- as well as cause the maintenance of the DeviceCallsLastNormal
	-- table to incorrectly update the wrong row.
	SELECT 
		-- If no row exists in the table for the device, the value of
		-- @LastStartTime will not be changed from its initialized
		-- value.
		@LastStartTime = StartTime
	FROM 
		DeviceCallsLastAttempt WITH (NOLOCK) --MSSQL only
	WHERE 
		DemoGraphicID = @DemographicID 
		--AND (DeviceID & @DEV_MASK) = @DeviceMask -- Not a good condition to use
		AND DeviceID = @DeviceID

	IF @StartTime > @LastStartTime
	BEGIN
		/* 
		Delete references for devices of the same type
		no longer assigned to the specified demographic id
		in DeviceCallsLastAttempt 
		*/
		DELETE FROM DeviceCallsLastAttempt WITH (ROWLOCK) 
		WHERE 
			-- Only assigned to the specified demographic id
			DemoGraphicID = @DemographicID
			-- Devices of the same type
			AND (DeviceID & @DEV_MASK) = @DeviceMask
			-- Not the specified device
			AND (DeviceID <> @DeviceID)
			-- Not assigned
			--AND Protech.dbo.fn_GetActivationState(DeviceID, DemographicID) = 3 

		/*
		Using a MERGE statement, either update the row for the current 
		assignment, or insert a new row for the assignment.
		*/
		MERGE [MTD_01].[dbo].[DeviceCallsLastAttempt] AS tgt  
		USING 
			(
			SELECT
				@DeviceID,
				@DemographicID,
				@RecID, 
				@ANIPhoneNumber,
				@IPAddress, 
				@Originator,
				@SessionSummary,
				@StartTime, 
				@EndTime, 
				@ElapsedSeconds,
				@PointsProcessed,
				@PointsMtdReportsSent, 
				@InChargerDeviceID 
			) AS SRC (
				DeviceID,
				DemographicID,
				RecID, 
				ANIPhoneNumber,
				IPAddress, 
				Originator,
				SessionSummary,
				StartTime, 
				EndTime, 
				ElapsedSeconds,
				PointsProcessed,
				PointsMtdReportsSent, 
				InChargerDeviceID 
			)
		ON 
			(tgt.DeviceID = @DeviceID) AND
			(tgt.DemographicID = @DemographicID)  
		WHEN MATCHED THEN
			UPDATE SET 
				[DeviceID] = SRC.DeviceID,
				[CallRecID] = SRC.RecID,
				[PhoneNumber] = SRC.ANIPhoneNumber,
				[IPAddress] = SRC.IPAddress, 
				[Originator] = SRC.Originator,
				[SessionSummary] = SRC.SessionSummary,
				[StartTime] = SRC.StartTime, 
				[EndTime] = SRC.EndTime, 
				[ElapsedSeconds] = SRC.ElapsedSeconds,
				[PointsProcessed] = SRC.PointsProcessed,
				[PointsDeviceReportsSent] = SRC.PointsMtdReportsSent, 
				[InChargerDeviceID] = SRC.InChargerDeviceID
		WHEN NOT MATCHED THEN  
			INSERT 
				([CallRecID]
				,[DeviceID]
				,[DemoGraphicID]
				,[PhoneNumber]
				,[IPAddress]
				,[Originator]
				,[SessionSummary]
				,[StartTime]
				,[EndTime]
				,[ElapsedSeconds]
				,[PointsProcessed]
				,[PointsDeviceReportsSent]
				,[InChargerDeviceID]
			) VALUES (
				SRC.RecID, 
				SRC.DeviceID,
				SRC.DemographicID,
				SRC.ANIPhoneNumber,
				SRC.IPAddress, 
				SRC.Originator,
				SRC.SessionSummary,
				SRC.StartTime, 
				SRC.EndTime, 
				SRC.ElapsedSeconds,
				SRC.PointsProcessed,
				SRC.PointsMtdReportsSent, 
				SRC.InChargerDeviceID
			);

		SELECT @err = @@error
		IF (@err <> 0) 
			GOTO ON_ERROR
				
	END

	IF (@SessionSummary & @CS_NORMAL_HANGUP) = @CS_NORMAL_HANGUP
	BEGIN
		SET @LastUTCStartTime = '1/1/1901' -- This was changed to match the following SQL

		SELECT 
			@LastUTCStartTime = UTCStartTime, 
			@AlarmStatus = AlarmStatus
		FROM 
			DeviceCallsLastNormal WITH (NOLOCK)
		WHERE 
			DemoGraphicID = @DemographicID
			--AND (DeviceID & @DEV_MASK) = @DeviceMask
			AND DeviceID = @DeviceID
 
		IF @UTCStartTime > ISNULL(@LastUTCStartTime, '1/1/1901')
		BEGIN
			/* 
			Delete references for devices of the same type
			no longer assigned to the specified demographic id
			in DeviceCallsLastNormal 
			*/
			DELETE FROM DeviceCallsLastNormal WITH (ROWLOCK) 
			WHERE 
				-- Only assigned to the specified demographic id
				DemoGraphicID = @DemographicID
				-- Devices of the same type
				AND (DeviceID & @DEV_MASK) = @DeviceMask
				-- Not the specified device
				AND (DeviceID <> @DeviceID)
				-- Not assigned (This might be unecessary -- it is debatable)
				--AND Protech.dbo.fn_GetActivationState(DeviceID, DemographicID) = 3 

			/* If AlarmStatus is 'A' (Unable To Connect Alarm sent),
			    Set it to 'C' (UTC alarm has cleared since this is a successful call
			    4/24/06 (SLM) - If status is 'S' (scheduled alarm), set to 'K' 
				11/20/14 (SLM) - If status is 'L' (late/caution), set to blank (cautions don't clear) */
			IF @AlarmStatus = 'A'
				SELECT @AlarmStatus = 'C'
			ELSE IF @AlarmStatus = 'S'
				SELECT @AlarmStatus = 'K'
			ELSE IF @AlarmStatus = 'L'
				SELECT @AlarmStatus = ''

			/*
			Using a MERGE statement, either update the row for the current 
			assignment, or insert a new row for the assignment.
			*/
			MERGE [MTD_01].[dbo].[DeviceCallsLastNormal] AS tgt  
			USING (
				SELECT
					@DeviceID,
					@DemographicID, 
					@RecID,
					@ANIPhoneNumber,
					@IPAddress, 
					@Originator,
					@SessionSummary,
					@StartTime, 
					@UTCStartTime, 
					@EndTime, 
					@ElapsedSeconds,
					@PointsProcessed,
					@PointsMtdReportsSent, 
					@InChargerDeviceID,
					Null,
					@AlarmStatus
				) as SRC (
					DeviceID,
					DemographicID,
					RecID,
					ANIPhoneNumber,
					IPAddress, 
					Originator,
					SessionSummary,
					StartTime, 
					UTCStartTime, 
					EndTime, 
					ElapsedSeconds,
					PointsProcessed,
					PointsMtdReportsSent, 
					InChargerDeviceID,
					AlarmTimeStamp,
					AlarmStatus
				)  
			ON 
				(tgt.DeviceID = @DeviceID) AND
				(tgt.DemographicID = @DemographicID)  
			WHEN MATCHED THEN
				UPDATE SET 
					[DeviceID] = SRC.DeviceID,
					[CallRecID] = SRC.RecID,
					[PhoneNumber] = SRC.ANIPhoneNumber,
					[IPAddress] = SRC.IPAddress, 
					[Originator] = SRC.Originator,
					[SessionSummary] = SRC.SessionSummary,
					[StartTime] = SRC.StartTime, 
					[UTCStartTime] = SRC.UTCStartTime, 
					[EndTime] = SRC.EndTime, 
					[ElapsedSeconds] = SRC.ElapsedSeconds,
					[PointsProcessed] = SRC.PointsProcessed,
					[PointsDeviceReportsSent] = SRC.PointsMtdReportsSent, 
					[InChargerDeviceID] = SRC.InChargerDeviceID,
					[AlarmTimeStamp] = SRC.AlarmTimeStamp, 
					[AlarmStatus] = SRC.AlarmStatus
			WHEN NOT MATCHED THEN  
				INSERT (
				   [DeviceID]
				   ,[DemoGraphicID]
				   ,[CallRecID]
				   ,[PhoneNumber]
				   ,[IPAddress]
				   ,[Originator]
				   ,[SessionSummary]
				   ,[StartTime]
				   ,[UTCStartTime]
				   ,[EndTime]
				   ,[ElapsedSeconds]
				   ,[PointsProcessed]
				   ,[PointsDeviceReportsSent]
				   ,[InChargerDeviceID]
				   ,[AlarmTimeStamp]
				   ,[AlarmStatus]
				)  VALUES (
					SRC.DeviceID,
					SRC.DemographicID,
					SRC.RecID, 
					SRC.ANIPhoneNumber,
					SRC.IPAddress, 
					SRC.Originator,
					SRC.SessionSummary,
					SRC.StartTime, 
					SRC.UTCStartTime, 
					SRC.EndTime, 
					SRC.ElapsedSeconds,
					SRC.PointsProcessed,
					SRC.PointsMtdReportsSent, 
					SRC.InChargerDeviceID,
					SRC.AlarmTimeStamp, 
					SRC.AlarmStatus
				);
				
			SELECT @err = @@error
			IF (@err <> 0) 
				GOTO ON_ERROR
		END
	END

	--
	--	Activate the offender
	--		This method should activate all offenders, groups, and group offenders
	--
	EXEC Protech.dbo.dcc_ActivateOffender @DeviceID, @DemographicID, @UTCStartTime
		
	SELECT @err = @@error
	IF (@err <> 0) 
		GOTO ON_ERROR
	--
	--	End: Activate the offender
	--
				
	COMMIT TRAN InsertMTDCalls    
	-- return 0 to signal success
	SET @RetCode =  0
	RETURN @RetCode
	    
ON_ERROR:
	ROLLBACK TRANSACTION
	-- return @err to signal failure
	SET @RetCode = @err
	RETURN @RetCode

GO
/****** Object:  StoredProcedure [dbo].[LI_InsertMTDDebugPoint_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Randy Buffington
-- Create date: 1/8/2010
-- Description:	Retrieve SystemType
--              and Demographic Information based on 
--              DeviceID that is passed in as parameter.
-- =============================================


CREATE PROCEDURE [dbo].[LI_InsertMTDDebugPoint_001] 
	@DemographicID int, 
	@DeviceID int, 
	@MTDCallsRecID int,
	@DebugType smallint, 
	@STimer int,
	@TimeStamp DateTime, 
	@StoredTimeStamp DateTime,
	@DebugInfo1 int, @DebugInfo2 int, @DebugInfo3 int, 
	@DebugInfo4 int, @DebugInfo5 int, @DebugInfo6 int, 
	@DebugInfo7 int, @DebugInfo8 int
AS

IF( @DebugType = 137 )
BEGIN
	INSERT INTO LacCids (
		DeviceID, 
		DemographicID, 
		TimeStamp, 
		StoredTimeStamp,
		Longitude,
		Latitude, 
		LAC, 
		CID, 
		CellRSSI
		)
	VALUES (
		@DeviceID, 
		@DemographicID, 
		@TimeStamp, 
		@StoredTimeStamp,
		CAST(@DebugInfo4 / 60000.0 AS FLOAT),
		CAST(@DebugInfo3 / 60000.0 AS FLOAT),
		@DebugInfo1, 
		@DebugInfo2, 
		@DebugInfo5 )
END
	
	INSERT INTO MtdDebug (
		DemographicID, 
		DeviceID, 
		MTDCallsRecID,
		DebugType, 
		STimer,
		TimeStamp, 
		StoredTimeStamp,
		DebugInfo1, 
		DebugInfo2, 
		DebugInfo3, 
		DebugInfo4, 
		DebugInfo5, 
		DebugInfo6, 
		DebugInfo7, 
		DebugInfo8 
		)
	VALUES (  
		@DemographicID, 
		@DeviceID, 
		@MTDCallsRecID,
		@DebugType, 
		@STimer,
		@TimeStamp, 
		@StoredTimeStamp,
		@DebugInfo1, 
		@DebugInfo2, 
		@DebugInfo3, 
		@DebugInfo4, 
		@DebugInfo5, 
		@DebugInfo6, 
		@DebugInfo7, 
		@DebugInfo8 )
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertMTDDebugPoint_002]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Randy Buffington
-- Create date: 1/8/2010
-- Description:	Retrieve SystemType
--              and Demographic Information based on 
--              DeviceID that is passed in as parameter.
--
-- Revisions
-- ---------------------------------------------
-- 11/09/2015	JPN	Added CDPDAvailable column
-- =============================================
CREATE
PROCEDURE	[dbo].[LI_InsertMTDDebugPoint_002] 
			(
				@DemographicID		int, 
				@DeviceID			int, 
				@MTDCallsRecID		int,
				@DebugType			smallint, 
				@STimer				int,
				@TimeStamp			DateTime, 
				@StoredTimeStamp	DateTime,
				@DebugInfo1			int, 
				@DebugInfo2			int, 
				@DebugInfo3			int, 
				@DebugInfo4			int, 
				@DebugInfo5			int, 
				@DebugInfo6			int, 
				@DebugInfo7			int, 
				@DebugInfo8			int
			)
AS

--
--	LAC/CID Debug Point
--
IF( @DebugType = 137 )
BEGIN
	DECLARE @cdpdAvailable	CHAR(1)

	--
	--	Get the CDPDAvailable value from Protech..MTDParameters
	--
	SELECT	@cdpdAvailable = MAX(CDPDAvailable) 
	FROM	Protech..MTDParameters P (NOLOCK) 
	WHERE	P.MTDID = @DeviceID

	--
	--	Insert into the LacCids table
	--
	INSERT 
	INTO	LacCids 
			(
				DeviceID, 
				DemographicID, 
				TimeStamp, 
				StoredTimeStamp,
				Longitude,
				Latitude, 
				LAC, 
				CID, 
				CellRSSI,
				CDPDAvailable
			)
	VALUES	(
				@DeviceID, 
				@DemographicID, 
				@TimeStamp, 
				@StoredTimeStamp,
				CAST(@DebugInfo4 / 60000.0 AS FLOAT),
				CAST(@DebugInfo3 / 60000.0 AS FLOAT),
				@DebugInfo1, 
				@DebugInfo2, 
				@DebugInfo5,
				@cdpdAvailable
			)
END
	
INSERT 
INTO	MtdDebug 
		(
			DemographicID, 
			DeviceID, 
			MTDCallsRecID,
			DebugType, 
			STimer,
			TimeStamp, 
			StoredTimeStamp,
			DebugInfo1, 
			DebugInfo2, 
			DebugInfo3, 
			DebugInfo4, 
			DebugInfo5, 
			DebugInfo6, 
			DebugInfo7, 
			DebugInfo8 
		)
VALUES	(  
			@DemographicID, 
			@DeviceID, 
			@MTDCallsRecID,
			@DebugType, 
			@STimer,
			@TimeStamp, 
			@StoredTimeStamp,
			@DebugInfo1, 
			@DebugInfo2, 
			@DebugInfo3, 
			@DebugInfo4, 
			@DebugInfo5, 
			@DebugInfo6, 
			@DebugInfo7, 
			@DebugInfo8 
		)
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertMTDDebugPoint_003]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Randy Buffington
-- Create date: 1/8/2010
-- Description:	Retrieve SystemType
--              and Demographic Information based on
--              DeviceID that is passed in as parameter.
--
-- Revisions
-- ---------------------------------------------
-- 11/09/2015	JPN	Added CDPDAvailable column
-- 10/27/2017   JPN Added NID/RNC support
-- 09/12/2022	JSC Modified to correct the
--				CellType value from 2 to 252
--				when DebugType = 160 and
--				DebugInfo8 is not 1
-- 09/18/2023	JSC Added the processing of the daily debug point to identify
--				and process bracelet battery level readings.
-- 04/24/2024	AEI Updated Bracelet Battery Level Hopper 93433
-- ============================================================================
CREATE   PROCEDURE [dbo].[LI_InsertMTDDebugPoint_003] @DemographicID INT
    , @DeviceID INT
    , @MTDCallsRecID BIGINT
    , @DebugType SMALLINT
    , @STimer INT
    , @TimeStamp DATETIME
    , @StoredTimeStamp DATETIME
    , @DebugInfo1 INT
    , @DebugInfo2 INT
    , @DebugInfo3 INT
    , @DebugInfo4 INT
    , @DebugInfo5 INT
    , @DebugInfo6 INT
    , @DebugInfo7 INT
    , @DebugInfo8 INT
AS
DECLARE @MTDDebugRecID BIGINT

BEGIN
    INSERT INTO MtdDebug (
        DemographicID
        , DeviceID
        , MTDCallsRecID
        , DebugType
        , STimer
        , TIMESTAMP
        , StoredTimeStamp
        , DebugInfo1
        , DebugInfo2
        , DebugInfo3
        , DebugInfo4
        , DebugInfo5
        , DebugInfo6
        , DebugInfo7
        , DebugInfo8
        )
    VALUES (
        @DemographicID
        , @DeviceID
        , @MTDCallsRecID
        , @DebugType
        , @STimer
        , @TimeStamp
        , @StoredTimeStamp
        , @DebugInfo1
        , @DebugInfo2
        , @DebugInfo3
        , @DebugInfo4
        , @DebugInfo5
        , @DebugInfo6
        , @DebugInfo7
        , @DebugInfo8
        )

    SELECT @MTDDebugRecID = SCOPE_IDENTITY()

    --
    --	LAC/CID Debug Point
    --
    IF (
            (@DebugType = 137)
            OR (@DebugType = 160)
            )
    BEGIN
        --
        --	Insert into the LacCids table
        --
        INSERT INTO LacCids (
            DeviceID
            , DemographicID
            , [TimeStamp]
            , StoredTimeStamp
            , Longitude
            , Latitude
            , LAC
            , CID
            , NID
            , CellRSSI
            , CDPDAvailable
            , CellType
            , MTDDebugRecID
            )
        SELECT @DeviceID
            , @DemographicID
            , @TimeStamp
            , @StoredTimeStamp
            , CAST(@DebugInfo4 / 60000.0 AS FLOAT) AS Longitude
            , CAST(@DebugInfo3 / 60000.0 AS FLOAT) AS Latitude
            , @DebugInfo1 AS LAC
            , @DebugInfo2 AS CID
            , CASE
                WHEN @DebugType = 137
                    AND p.CDPDAvailable = 'C'
                    THEN @DebugInfo8
                WHEN @DebugType = 137
                    AND p.CDPDAvailable <> 'C'
                    THEN @DebugInfo7
                WHEN @DebugType = 160
                    THEN 0
                ELSE NULL
                END AS NID
            , @DebugInfo5 AS CellRSSI
            , p.CDPDAvailable AS CDPDAvailable
            , CASE
                WHEN @DebugType = 160
                    THEN CASE
                            -- 2022/09/12 - JSC - previous version -> WHEN @DebugInfo8 = 1 THEN 253 ELSE 2
                            WHEN @DebugInfo8 = 1
                                THEN 253
                            ELSE 252
                            END
                WHEN @DebugType = 137
                    THEN CASE
                            WHEN p.CDPDAvailable = 'G'
                                THEN 255
                            ELSE 254
                            END
                ELSE NULL
                END AS CellType
            , @MTDDebugRecID
        FROM Protech..MTDParameters p(NOLOCK)
        WHERE p.MTDID = @DeviceID
    END

    --
    -- Bracelet Battery Level Reading
    --   Only on hourly/daily debug points
    --
    IF (
            @DebugType IN (
                128
                , 192
                )
            )
    BEGIN
        -- This turns the DebugInfo7 int32 highest byte (0xFF000000) to a uint8 (0xFF)
        DECLARE @Reading INT = @DebugInfo7 / 16777216 & 255
        DECLARE @BraceletID INT = @DebugInfo3
        DECLARE @Voltage INT = 0

        -- Calculate the millivolt value of the reading
        --   This will stay at 0 missing bracelet records
        SELECT @Voltage = 2000 + CASE
                WHEN (hr.Capabilities & 0x00080000) = 0x00080000
                    THEN 10 -- BTX
                ELSE 25 -- Non-BTX
                END * @Reading
        FROM Protech.dbo.AssemblyBracelets bt
        INNER JOIN Protech.dbo.HardwareRevs hr ON hr.HwRevID = bt.ModelRecID
        WHERE bt.BraceletID = @BraceletID

        -- Ensure the value is in a valid range
        IF (@Voltage BETWEEN 2500 AND 4000)
            -- Ensure the value does not already exist
            AND NOT EXISTS (
                SELECT dbl.DeviceID
                FROM Protech.dbo.DeviceBatteryLevels dbl
                WHERE dbl.DeviceID = @BraceletID
                    AND dbl.BatteryReadingDate = @TimeStamp
                )
        BEGIN
            INSERT INTO Protech.dbo.DeviceBatteryLevels (
                DeviceID
                , BatteryReadingDate
                , BatteryMillivolts
                )
            VALUES (
                @BraceletID
                , @TimeStamp
                , @Voltage
                )
        END
    END
END
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertMtdPositions_001_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
-- =============================================
-- Author:		Randy Buffington
-- Create date: 02-08-2010
-- Description:	inserts into MTD_Positions (part of former [dbo].[dbl_InsertMtdPositions_05232006])
-- =============================================/*****Warning: this store procedure is shared with ProtechE. *************
--******Please see DBA before modifying. ***********************************/

CREATE PROCEDURE [dbo].[LI_InsertMtdPositions_001_DEL]
	@DemographicID int, 
	@DeviceID int, 
	@TimeStamp DateTime,
	@Longitude float, 
	@Latitude float, 
	@Speed smallint,
	@Heading smallint, 
	@Elevation int, 
	@PDOP real,
	@HDOP real, 
	@VDOP real, 
	@GPSMode tinyint,
	@SatellitesInView tinyint, 
	@SVN binary(12), 
	@SNR binary(12),  
	@Temperature smallint, 
	@BatteryVoltage smallint,
	@PointStatus int, 
	@GeoRuleGraceMask int, 
	@RulesInViolation tinyint,
	@MtdCallsRecID int,
	@DeviceStatus int,
	@RecID NUMERIC(13,0) OUT	

AS
	SET NOCOUNT ON
	INSERT INTO MTD_Positions (
			DemographicID, 
			DeviceID, 
			TimeStamp, 
			Longitude, 
			Latitude,
			Speed, 
			Heading, 
			Elevation, 
			PDOP, 
			HDOP, 
			VDOP, 
			GPSMode,
			SatellitesInView, 
			SVN, 
			SNR, 
			Temperature, 
			BatteryVoltage,
			PointStatus, 
			GeoRuleGraceMask, 
			RulesInViolation, 
			MTDCallsRecID,
			DeviceStatus)
	VALUES (@DemographicID, 
			@DeviceID, 
			@TimeStamp,
			@Longitude, 
			@Latitude, 
			@Speed,
			@Heading, 
			@Elevation, 
			@PDOP,
			@HDOP, 
			@VDOP, 
			@GPSMode,
			@SatellitesInView, 
			@SVN,
			@SNR,  
			@Temperature, 
			@BatteryVoltage,
			@PointStatus, 
			@GeoRuleGraceMask, 
			@RulesInViolation, 
			@MtdCallsRecID, 
			@DeviceStatus)

		SELECT @RecID = SCOPE_IDENTITY() --MSSQL only
--		SELECT @RecID = @@IDENTITY --Sybase only
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertMtdPositions_002]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Randy Buffington
-- Create date: 02-08-2010
-- Description:	inserts into MTD_Positions (part of former [dbo].[dbl_InsertMtdPositions_05232006])
-- Date			By		Change
-- ----------	-----   ------------------------
-- 8/8/2013		RPB     Added Support for two fields (ReportLevelTypeValue & DeviceModelTypeValue)
-- 8/8/2013		RPB     Created a new procedure with the _002 Version
-- 10/4/2016	JPN		Add check for future timestamps and record them in MTD_FuturePositionTimestamps
-- =============================================
CREATE PROCEDURE [dbo].[LI_InsertMtdPositions_002]
	@DemographicID int, 
	@DeviceID int, 
	@TimeStamp DateTime,
	@Longitude float, 
	@Latitude float, 
	@Speed smallint,
	@Heading smallint, 
	@Elevation int, 
	@PDOP real,
	@HDOP real, 
	@VDOP real, 
	@GPSMode tinyint,
	@SatellitesInView tinyint, 
	@SVN binary(12), 
	@SNR binary(12),  
	@Temperature smallint, 
	@BatteryVoltage smallint,
	@PointStatus int, 
	@GeoRuleGraceMask int, 
	@RulesInViolation tinyint,
	@MtdCallsRecID int,
	@DeviceStatus int,
	@RecID NUMERIC(13,0) OUT	

AS
	SET NOCOUNT ON

	--
	--	Insert the position as usual
	--
	INSERT 
	INTO	MTD_Positions 
			(
				DemographicID, 
				DeviceID, 
				TimeStamp, 
				Longitude, 
				Latitude,
				Speed, 
				Heading, 
				Elevation, 
				PDOP, 
				HDOP, 
				VDOP, 
				GPSMode,
				SatellitesInView, 
				SVN, 
				SNR, 
				Temperature, 
				BatteryVoltage,
				PointStatus, 
				MTDCallsRecID,
				DeviceStatus,
				GeoRuleGraceMask, 
				RulesInViolation
			)
	VALUES	(
				@DemographicID, 
				@DeviceID, 
				@TimeStamp,
				@Longitude, 
				@Latitude, 
				@Speed,
				@Heading, 
				@Elevation, 
				@PDOP,
				@HDOP, 
				@VDOP, 
				@GPSMode,
				@SatellitesInView, 
				@SVN,
				@SNR,  
				@Temperature, 
				@BatteryVoltage,
				@PointStatus, 
				@MtdCallsRecID, 
				@DeviceStatus,
				@GeoRuleGraceMask, 
				@RulesInViolation
			)

	SELECT @RecID = SCOPE_IDENTITY() --MSSQL only

	--
	--	Check for future timestamps
	--		StoredTimestamp is in Eastern Time, TimeStamp is UTC
	--
	DECLARE @StoredUTC datetime
	SET @StoredUTC = GETUTCDATE()

	--
	--	Use the following commented code instead of the above method if you prefer to compare 
	--	the actual storedtimestamp on the position. This is not being used at this time to 
	--	prevent the extra read and the times should be close enough to test the value.
	--
	--SET @StoredUTC = (	
	--						SELECT	protech.dbo.fn_GetUtcTime(P.StoredTimeStamp, -300, -240) 
	--						FROM	MTD_Positions P (NOLOCK)
	--						WHERE	P.PositionRecID = @RecID
	--					)

	IF (@StoredUTC < @TimeStamp)
	BEGIN
		INSERT
		INTO	MTD_FuturePositionTimestamps
				(
					PositionRecID
				)
		Values	(
					@RecID
				)
	END
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertMtdPositions_003]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		Randy Buffington
-- Create date: 02-08-2010
-- Description:	inserts into MTD_Positions (part of former [dbo].[dbl_InsertMtdPositions_05232006])
-- Date		By		Change
-- -------- -----   ------
-- 8/8/2013 RPB     Added Support for two fields (ReportLevelTypeValue & DeviceModelTypeValue)
-- 8/8/2013 RPB     Created a new procedure with the _002 Version
-- =============================================/*****Warning: this store procedure is shared with ProtechE. *************
--******Please see DBA before modifying. ***********************************/

CREATE PROCEDURE [dbo].[LI_InsertMtdPositions_003]
	@DemographicID int, 
	@DeviceID int, 
	@TimeStamp DateTime,
	@Longitude float, 
	@Latitude float, 
	@Speed smallint,
	@Heading smallint, 
	@Elevation int, 
	@PDOP real,
	@HDOP real, 
	@VDOP real, 
	@GPSMode tinyint,
	@SatellitesInView tinyint, 
	@SVN binary(12), 
	@SNR binary(12),  
	@Temperature smallint, 
	@BatteryVoltage smallint,
	@PointStatus int, 
	@GeoRuleGraceMask int, 
	@RulesInViolation tinyint,
	@MtdCallsRecID bigint,
	@DeviceStatus int,
	@RecID NUMERIC(13,0) OUT	

AS
	SET NOCOUNT ON
	INSERT INTO MTD_Positions (
			DemographicID, 
			DeviceID, 
			TimeStamp, 
			Longitude, 
			Latitude,
			Speed, 
			Heading, 
			Elevation, 
			PDOP, 
			HDOP, 
			VDOP, 
			GPSMode,
			SatellitesInView, 
			SVN, 
			SNR, 
			Temperature, 
			BatteryVoltage,
			PointStatus, 
			MTDCallsRecID,
			DeviceStatus,
			GeoRuleGraceMask, 
			RulesInViolation)
	VALUES (@DemographicID, 
			@DeviceID, 
			@TimeStamp,
			@Longitude, 
			@Latitude, 
			@Speed,
			@Heading, 
			@Elevation, 
			@PDOP,
			@HDOP, 
			@VDOP, 
			@GPSMode,
			@SatellitesInView, 
			@SVN,
			@SNR,  
			@Temperature, 
			@BatteryVoltage,
			@PointStatus, 
			@MtdCallsRecID, 
			@DeviceStatus,
			@GeoRuleGraceMask, 
			@RulesInViolation)


		SELECT @RecID = SCOPE_IDENTITY() --MSSQL only



GO
/****** Object:  StoredProcedure [dbo].[LI_InsertMtdPositions_004]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LI_InsertMtdPositions_004]
	@DemographicID int, 
	@DeviceID int, 
	@TimeStamp DateTime,
	@Longitude float, 
	@Latitude float, 
	@Speed smallint,
	@Heading smallint, 
	@Elevation int, 
	@PDOP real,
	@HDOP real, 
	@VDOP real, 
	@GPSMode tinyint,
	@SatellitesInView tinyint, 
	@SVN binary(12), 
	@SNR binary(12),  
	@Temperature smallint, 
	@BatteryVoltage smallint,
	@PointStatus int, 
	@GeoRuleGraceMask int, 
	@RulesInViolation tinyint,
	@MtdCallsRecID bigint,
	@DeviceStatus int,
	@RecID NUMERIC(13,0) OUT	

AS
	SET NOCOUNT ON
	INSERT INTO MTD_Positions (
			DemographicID, 
			DeviceID, 
			TimeStamp, 
			Longitude, 
			Latitude,
			Speed, 
			Heading, 
			Elevation, 
			PDOP, 
			HDOP, 
			VDOP, 
			GPSMode,
			SatellitesInView, 
			SVN, 
			SNR, 
			Temperature, 
			BatteryVoltage,
			PointStatus, 
			MTDCallsRecID,
			DeviceStatus,
			GeoRuleGraceMask, 
			RulesInViolation)
	VALUES (@DemographicID, 
			@DeviceID, 
			@TimeStamp,
			@Longitude, 
			@Latitude, 
			@Speed,
			@Heading, 
			@Elevation, 
			@PDOP,
			@HDOP, 
			@VDOP, 
			@GPSMode,
			@SatellitesInView, 
			@SVN,
			@SNR,  
			@Temperature, 
			@BatteryVoltage,
			@PointStatus, 
			@MtdCallsRecID, 
			@DeviceStatus,
			@GeoRuleGraceMask, 
			@RulesInViolation)


		SELECT @RecID = SCOPE_IDENTITY() --MSSQL only


GO
/****** Object:  StoredProcedure [dbo].[LI_InsertRIAParams]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =========================================================================
-- Author:		Elena Roe
-- Create date: 06-21-2011
-- Description:	inserts into RIAParams
-- -------------------------------------------------------------------------
-- 8/12/2013 JPN - Added support for parameters to be passed a single string
--		String is formatted as [Type1]=[Value1];[Type2]=[Value2];...
-- 1/16/2014 JPN - Added lookup for PositionTimestamp to save with parameters
-- 7/08/2014 JPN - Duplicate assemblies were being found. Added a top 1 statement
-- =========================================================================
CREATE PROCEDURE [dbo].[LI_InsertRIAParams]

	@RulesInAlarmRecID	bigint,
	@ExtraTx			int	= null,
	@ParameterString	varchar(max) = null
    
AS
BEGIN
    SET NOCOUNT ON

	DECLARE @PositionTimestamp datetime

	--
	--	Find PositionTimestamp
	--
	SELECT	@PositionTimestamp = P.Timestamp
	FROM	RulesInAlarm	A 
	JOIN	MTD_Positions	P ON P.PositionRecID = A.PositionRecID
	WHERE	A.RulesInAlarmRecID = @RulesInAlarmRecID

	--
	--	Insert data
	--
	IF (@ExtraTx IS NOT NULL)
	BEGIN
		--
		--	Old Method (Store only ExtraTx parameter)
		--		Store the value using the new format as well
		--
		INSERT 
		INTO	[dbo].[RIAParams]
				(
					[RulesInAlarmRecID],
					[ExtraTx],
					[ParameterTypeLookupValue],
					[ParameterValue],
					[PositionTimestamp]
				)         
		 VALUES	(
					@RulesInAlarmRecID,
					@ExtraTx,
					1,
					@ExtraTx,
					@PositionTimestamp
				)
	END
	ELSE
	BEGIN
		--
		--	Parse the parameters string
		--		Type 1 parameters should also be stored in the ExtraTx column
		--		Type 7 parameters should be converted to type 1 with a serial number lookup
		--
		CREATE
		TABLE	#Values
				(
					ParameterType	int,
					ParameterValue	varchar(50),
					NewValue		varchar(50)
				)

		INSERT
		INTO	#Values
		SELECT	ParameterType =  (Select Value From dbo.Split(A.Value, '=') B Where B.Id = 1),
				ParameterValue = (Select Value From dbo.Split(A.Value, '=') B Where B.Id = 2),
				NULL
		FROM	dbo.Split(@ParameterString, ';') A
		WHERE	A.Value != ''

		--
		--	Convert type 7 to type 1 and store device id
		--
		UPDATE	#Values
		SET		NewValue =	(
								SELECT		TOP 1
											A.AssemblyRecID
								FROM		Protech..Assemblies	A (NOLOCK)
								WHERE		A.SerialNumber LIKE '078FC' + RIGHT('00000' + #Values.ParameterValue, 5)
								ORDER BY	A.ManufactureDate DESC
							)
		WHERE	ParameterType = '7'

		--
		--	If we were able to find a matching serial number, convert this to a type 1
		--
		UPDATE	#Values
		SET		ParameterType = 1,
				ParameterValue = NewValue
		WHERE	ParameterType = 7
		AND		NewValue IS NOT NULL

		--
		--	Store the values
		--	
		INSERT 
		INTO	[dbo].[RIAParams]
				(
					[RulesInAlarmRecID],
					[ExtraTx],
					[ParameterTypeLookupValue],
					[ParameterValue],
					[PositionTimestamp]
				)         
		SELECT	@RulesInAlarmRecID,
				CASE WHEN V.ParameterType = 1 THEN V.ParameterValue ELSE NULL END,
				V.ParameterType,
				V.ParameterValue,
				@PositionTimestamp
		FROM	#Values	V

	END
END
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertRulesInAlarm_001_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
-- =============================================
-- Author:		Randy Buffington
-- Create date: 02-08-2010
-- Description:	Insert RulesInAlarm record
-- =============================================
/*****Warning: this store procedure is shared with ProtechE. *************
******Please see DBA before modifying. ***********************************/

CREATE PROCEDURE [dbo].[LI_InsertRulesInAlarm_001_DEL]
	@PositionRecID numeric(13, 0),
	@RuleID int,
	@InGrace char(1),
	@HWRule int,
	@RuleStatus smallint,
	@OneTimeSchedID int
	
AS
	SET NOCOUNT ON
	
	INSERT INTO RulesInAlarm ( 
			PositionRecID, 
			RuleID, 
			InGrace,
			HWRule,
			RuleStatus,
			OneTimeSchedId)
	VALUES( 
			@PositionRecID,
			@RuleID,  
			@InGrace,
			@HWRule,
			@RuleStatus, 
			@OneTimeSchedID)
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertRulesInAlarm_002]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
-- =============================================
-- Author:		Randy Buffington
-- Create date: 02-08-2010
-- Description:	Insert RulesInAlarm record
-- 
-- Date           By     Description
-- -------------  ---    -----------------------------
-- June 29, 2011  RPB    Added the return of the recID needed for Extra TX
-- =============================================

/*****Warning: this store procedure is shared with ProtechE. *************
******Please see DBA before modifying. ***********************************/

CREATE PROCEDURE [dbo].[LI_InsertRulesInAlarm_002]
	@PositionRecID numeric(13, 0),
	@RuleID int,
	@InGrace char(1),
	@HWRule int,
	@RuleStatus smallint,
	@OneTimeSchedID int,
	@RecID int Output
	
AS
	SET NOCOUNT ON
	
	INSERT INTO RulesInAlarm ( 
			PositionRecID, 
			RuleID, 
			InGrace,
			HWRule,
			RuleStatus,
			OneTimeSchedId)
	VALUES( 
			@PositionRecID,
			@RuleID,  
			@InGrace,
			@HWRule,
			@RuleStatus, 
			@OneTimeSchedID)

SELECT @RecID = SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertRulesInAlarm_003]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO


-- =============================================
-- Author:		Randy Buffington
-- Create date: 02-08-2010
-- Description:	Insert RulesInAlarm record
-- 
-- Date           By     Description
-- -------------  ---    -----------------------------
-- June 29, 2011  RPB    Added the return of the recID needed for Extra TX
-- April 13, 2012 RPB    Added an extra prarameter for ZoneRecID
-- AUG 12 2013    RPB    Added HWRuleBitIndex
-- Aug 14 2013	  JPN	 Added ParameterString
-- =============================================

CREATE PROCEDURE [dbo].[LI_InsertRulesInAlarm_003]
	@PositionRecID numeric(13, 0),
	@RuleID int,
	@InGrace char(1),
	@HWRule int,
	@RuleStatus smallint,
	@OneTimeSchedID int,
	@ZoneRecID int,
	@HWRuleBitIndex int,
	@ParameterString varchar(MAX) = '',
	@RecID bigint Output
	
AS
BEGIN
	SET NOCOUNT ON
	
	INSERT INTO RulesInAlarm ( 
			PositionRecID, 
			RuleID, 
			InGrace,
			HWRule,
			RuleStatus,
			OneTimeSchedId,
			ZoneRecID,
			HWRuleBitIndex)
	VALUES( 
			@PositionRecID,
			@RuleID,  
			@InGrace,
			@HWRule,
			@RuleStatus, 
			@OneTimeSchedID,
			@ZoneRecId,
			@HWRuleBitIndex)

	SELECT @RecID = SCOPE_IDENTITY()

	--
	--	Parameters
	--
	IF (@ParameterString != '' AND ISNULL(@RecID, 0) > 0)
	BEGIN
		EXEC [dbo].[LI_InsertRIAParams] @RulesInAlarmRecID = @RecID, @ParameterString = @ParameterString
	END
END
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertRulesInAlarm_004]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Randy Buffington
-- Create date: 02-08-2010
-- Description:	Insert RulesInAlarm record
-- 
-- Date           By     Description
-- -------------  ---    -----------------------------
-- June 29, 2011  RPB    Added the return of the recID needed for Extra TX
-- April 13, 2012 RPB    Added an extra prarameter for ZoneRecID
-- AUG 12 2013    RPB    Added HWRuleBitIndex
-- Aug 14 2013	  JPN	 Added ParameterString
-- Apr 23 2014	  JPN	 Moved changes since 8/12/2013 to LI_InsertRulesInAlarm_004
-- =============================================

CREATE PROCEDURE [dbo].[LI_InsertRulesInAlarm_004]
	@PositionRecID numeric(13, 0),
	@RuleID int,
	@InGrace char(1),
	@HWRule int,
	@RuleStatus smallint,
	@OneTimeSchedID int,
	@ZoneRecID int,
	@HWRuleBitIndex int,
	@ParameterString varchar(MAX) = '',
	@RecID bigint Output
	
AS
BEGIN
	SET NOCOUNT ON
	
	INSERT INTO RulesInAlarm ( 
			PositionRecID, 
			RuleID, 
			InGrace,
			HWRule,
			RuleStatus,
			OneTimeSchedId,
			ZoneRecID,
			HWRuleBitIndex)
	VALUES( 
			@PositionRecID,
			@RuleID,  
			@InGrace,
			@HWRule,
			@RuleStatus, 
			@OneTimeSchedID,
			@ZoneRecId,
			@HWRuleBitIndex)

	SELECT @RecID = SCOPE_IDENTITY()

	--
	--	Parameters
	--
	IF (@ParameterString != '' AND ISNULL(@RecID, 0) > 0)
	BEGIN
		EXEC [dbo].[LI_InsertRIAParams] @RulesInAlarmRecID = @RecID, @ParameterString = @ParameterString
	END
END
GO
/****** Object:  StoredProcedure [dbo].[LI_InsertRulesInAlarm_005]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Randy Buffington
-- Create date: 02-08-2010
-- Description:	Insert RulesInAlarm record
--
-- Users:
--		DBLoadInfoUser Execute
-- 
-- Date           By     Description
-- -------------  ---    -----------------------------
-- June 29, 2011  RPB    Added the return of the recID needed for Extra TX
-- April 13, 2012 RPB    Added an extra prarameter for ZoneRecID
-- AUG 12 2013    RPB    Added HWRuleBitIndex
-- Aug 14 2013	  JPN	 Added ParameterString
-- Apr 23 2014	  JPN	 Moved changes since 8/12/2013 to LI_InsertRulesInAlarm_004
-- Sep 08 2014	  JPN	 Created _005 version to log negative rule id's
-- =============================================
CREATE PROCEDURE [dbo].[LI_InsertRulesInAlarm_005]
	
	@PositionRecID		NUMERIC(13, 0),
	@RuleID				INT,
	@InGrace			CHAR(1),
	@HWRule				INT,
	@RuleStatus			SMALLINT,
	@OneTimeSchedID		INT,
	@ZoneRecID			INT,	
	@HWRuleBitIndex		INT,
	@ParameterString	VARCHAR(MAX) = '',
	@RecID				BIGINT OUTPUT
	
AS
BEGIN
	
	SET NOCOUNT ON
	
	INSERT 
	INTO	RulesInAlarm 
			( 
				PositionRecID, 
				RuleID, 
				InGrace,
				HWRule,
				RuleStatus,
				OneTimeSchedId,
				ZoneRecID,
				HWRuleBitIndex
			)
	VALUES	( 
				@PositionRecID,
				@RuleID,  
				@InGrace,
				@HWRule,
				@RuleStatus, 
				@OneTimeSchedID,
				@ZoneRecId,
				@HWRuleBitIndex
			)

	SELECT @RecID = SCOPE_IDENTITY()

	--
	--	Parameters
	--
	IF (@ParameterString != '' AND ISNULL(@RecID, 0) > 0)
	BEGIN
		EXEC [dbo].[LI_InsertRIAParams] @RulesInAlarmRecID = @RecID, @ParameterString = @ParameterString
	END

	--
	--	Check for Invalid RuleID and log
	--
	IF (@RuleID < 0)
	BEGIN
		INSERT
		INTO	InvalidRulesInAlarm
				(
					RulesInAlarmRecID
				)
		VALUES	(
					@RecID
				)
	END
END
GO
/****** Object:  StoredProcedure [dbo].[LI_InsMtdLastPositions_001_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
-- =============================================
-- Author:		Randy Buffington
-- Create date: 03-22-2010
-- Description:	inserts into MTD_01:LI_InsMtdLastPositions_001 
-- =============================================/*****Warning: this store procedure is shared with ProtechE. *************
--******Please see DBA before modifying. ***********************************/

CREATE PROCEDURE [dbo].[LI_InsMtdLastPositions_001_DEL]
	@PositionsRecID Numeric(13, 0),
	@DemographicID int, 
	@DeviceID int, 
	@TimeStamp DateTime,
	@Longitude float, 
	@Latitude float, 
	@Speed smallint,
	@Heading smallint, 
	@Elevation int, 
	@PDOP real,
	@HDOP real, 
	@VDOP real, 
	@GPSMode tinyint,
	@SatellitesInView tinyint, 
	@SVN binary(12), 
	@SNR binary(12),  
	@Temperature smallint, 
	@BatteryVoltage smallint,
	@PointStatus int, 
	@GeoRuleGraceMask int, 
	@RulesInViolation tinyint,
	@MTDCallsRecID int,
	@DeviceStatus int 

AS
	SET NOCOUNT ON
	DECLARE @MaxDateTime DateTime
	
		
		SELECT  
			 @MaxDateTime = MAX(TimeStamp) 
		FROM 
			MTD_LastPositions 
		WHERE 
			DeviceID = @DeviceID and 
			DemographicID = @DemographicID 
			
		IF(@MaxDateTime is Null)
			Set @MaxDateTime = '1/1/2000'	
		
		IF(@TimeStamp > @MaxDateTime)
			BEGIN
		
				INSERT INTO MTD_LastPositions (
						PositionRecID,
						DemographicID, 
						DeviceID, 
						TimeStamp, 
						Longitude, 
						Latitude,
						Speed, 
						Heading, 
						Elevation, 
						PDOP, 
						HDOP, 
						VDOP, 
						GPSMode,
						SatellitesInView, 
						SVN, 
						SNR, 
						Temperature, 
						BatteryVoltage,
						PointStatus, 
						GeoRuleGraceMask, 
						RulesInViolation, 
						MTDCallsRecID,
						DeviceStatus)
				VALUES (@PositionsRecID,
						@DemographicID, 
						@DeviceID, 
						@TimeStamp,
						@Longitude, 
						@Latitude, 
						@Speed,
						@Heading, 
						@Elevation, 
						@PDOP,
						@HDOP, 
						@VDOP, 
						@GPSMode,
						@SatellitesInView, 
						@SVN,
						@SNR,  
						@Temperature, 
						@BatteryVoltage,
						@PointStatus, 
						@GeoRuleGraceMask, 
						@RulesInViolation, 
						@MTDCallsRecID, 
						@DeviceStatus)
			      
			END
GO
/****** Object:  StoredProcedure [dbo].[LI_InsMtdLastPositions_002]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
-- =============================================
-- Author:		Randy Buffington
-- Create date: 03-22-2010
-- Description:	inserts into MTD_01:LastPosition 
-- Revision RPB 09/23/2010 Change to new scheme for setting LastPosition
--          RPB 11/15/2010 Change to be >= instead of > when determining if point is newer V2.0.9.1 of LoadInfo
-- =============================================/*****Warning: this store procedure is shared with ProtechE. *************
--******Please see DBA before modifying. ***********************************/

CREATE PROCEDURE [dbo].[LI_InsMtdLastPositions_002]
	@PositionsRecID Numeric(13, 0),
	@DemographicID int, 
	@DeviceID int, 
	@DeviceType int,
	@ReportedSystemType int,
	@LastTimeStamp DateTime

AS
	SET NOCOUNT ON

Declare @MaxDateTime DateTime
		
		SELECT  
			 @MaxDateTime = MAX(TimeStamp) 
		FROM 
			MTD_LastPositions 
		WHERE 
			DeviceID = @DeviceID and 
			DemographicID = @DemographicID 
			
		IF(@MaxDateTime is Null)
			Set @MaxDateTime = '1/1/2000'	
		
		IF(@LastTimeStamp >= @MaxDateTime)
			BEGIN

				DELETE FROM MTD_LastPositions
				WHERE DemographicID = @DemographicID and
					  DeviceType = @DeviceType
					  
				IF (@@ERROR = 0)
				BEGIN	  
					INSERT INTO MTD_LastPositions (
							PositionRecID,
							DemographicID, 
							DeviceID, 
							DeviceType,
							ReportedSystemType,
							TimeStamp)
					VALUES (@PositionsRecID,
							@DemographicID, 
							@DeviceID, 
							@DeviceType,
							@ReportedSystemType,
							@LastTimeStamp)
				END
			END
GO
/****** Object:  StoredProcedure [dbo].[LI_LookupHWRule]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[LI_LookupHWRule]
@RuleID int,
@HWRule int out,
@HWRuleNumber smallint out


AS

BEGIN

SET NOCOUNT ON
	 
    SELECT @HWRule = HWRule, @HWRuleNumber = HWRuleNumber
	from Protech.dbo.Rules	
	WHERE @RuleID <> 0 and RuleID = @RuleID 
		 	
END

GO
/****** Object:  StoredProcedure [dbo].[LI_MTD_FuturePoints_Ins_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
-- =============================================
-- Author:		Elena Roe
-- Create date: 02-09-2010
-- Description:	Inserts into MTD_FuturePoints
-- =============================================


CREATE PROCEDURE [dbo].[LI_MTD_FuturePoints_Ins_001]
    @DemographicID int,
	@DeviceID int,
    @TimeStamp datetime,
    @Longitude float,
    @Latitude float,
    @Speed smallint, 
    @Heading smallint,
    @Elevation int,
    @PDOP real,
    @HDOP real,
    @VDOP real,
    @GPSMode tinyint,
    @SatellitesInView tinyint,
    @SVN binary(12),
    @SNR binary(12),
    @Temperature smallint,
    @BatteryVoltage smallint,
    @PointStatus int,
    @GeoRuleGraceMask int,
    @RulesInViolation tinyint,         
    @MTDCallsRecID int,
    @DeviceStatus int
	
AS
    BEGIN
	SET NOCOUNT ON
	INSERT INTO [dbo].[MTD_FuturePoints]
           ([DemographicID]
           ,[DeviceID]
           ,[TimeStamp]
           ,[Longitude]
           ,[Latitude]
           ,[Speed]
           ,[Heading]
           ,[Elevation]
           ,[PDOP]
           ,[HDOP]
           ,[VDOP]
           ,[GPSMode]
           ,[SatellitesInView]
           ,[SVN]
           ,[SNR]
           ,[Temperature]
           ,[BatteryVoltage]
           ,[PointStatus]
           ,[GeoRuleGraceMask]
           ,[RulesInViolation]          
           ,[MTDCallsRecID]
           ,[DeviceStatus])
     VALUES
           (@DemographicID
           ,@DeviceID
           ,@TimeStamp
           ,@Longitude
           ,@Latitude
           ,@Speed 
           ,@Heading
           ,@Elevation
           ,@PDOP
           ,@HDOP
           ,@VDOP
           ,@GPSMode
           ,@SatellitesInView
           ,@SVN
           ,@SNR
           ,@Temperature
           ,@BatteryVoltage
           ,@PointStatus
           ,@GeoRuleGraceMask
           ,@RulesInViolation          
           ,@MTDCallsRecID
           ,@DeviceStatus)
	END
GO
/****** Object:  StoredProcedure [dbo].[LI_MTD_FuturePoints_Ins_002]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		Elena Roe
-- Create date: 02-09-2010
-- Description:	Inserts into MTD_FuturePoints
-- =============================================
CREATE PROCEDURE [dbo].[LI_MTD_FuturePoints_Ins_002]
    @DemographicID int,
	@DeviceID int,
    @TimeStamp datetime,
    @Longitude float,
    @Latitude float,
    @Speed smallint, 
    @Heading smallint,
    @Elevation int,
    @PDOP real,
    @HDOP real,
    @VDOP real,
    @GPSMode tinyint,
    @SatellitesInView tinyint,
    @SVN binary(12),
    @SNR binary(12),
    @Temperature smallint,
    @BatteryVoltage smallint,
    @PointStatus int,
    @GeoRuleGraceMask int,
    @RulesInViolation tinyint,         
    @MTDCallsRecID bigint,
    @DeviceStatus int
	
AS
    BEGIN
	SET NOCOUNT ON
	INSERT INTO [dbo].[MTD_FuturePoints]
           ([DemographicID]
           ,[DeviceID]
           ,[TimeStamp]
           ,[Longitude]
           ,[Latitude]
           ,[Speed]
           ,[Heading]
           ,[Elevation]
           ,[PDOP]
           ,[HDOP]
           ,[VDOP]
           ,[GPSMode]
           ,[SatellitesInView]
           ,[SVN]
           ,[SNR]
           ,[Temperature]
           ,[BatteryVoltage]
           ,[PointStatus]
           ,[GeoRuleGraceMask]
           ,[RulesInViolation]          
           ,[MTDCallsRecID]
           ,[DeviceStatus])
     VALUES
           (@DemographicID
           ,@DeviceID
           ,@TimeStamp
           ,@Longitude
           ,@Latitude
           ,@Speed 
           ,@Heading
           ,@Elevation
           ,@PDOP
           ,@HDOP
           ,@VDOP
           ,@GPSMode
           ,@SatellitesInView
           ,@SVN
           ,@SNR
           ,@Temperature
           ,@BatteryVoltage
           ,@PointStatus
           ,@GeoRuleGraceMask
           ,@RulesInViolation          
           ,@MTDCallsRecID
           ,@DeviceStatus)
	END


GO
/****** Object:  StoredProcedure [dbo].[LI_MTD_MessageAndResp_Up_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Elena Roe
-- Create date: 01-20-2010
-- Description:	updates [dbo].[MTD_Messages]
-- =============================================
CREATE PROCEDURE [dbo].[LI_MTD_MessageAndResp_Up_001]
    @DemographicID int,
    @DeviceID int,
    @AcknowledgeUtcTime datetime,
    @DisplayTime datetime,
    @KeyPressed tinyint,
    @MessageRecId int,
     @RetCode int OUTPUT
   
AS
BEGIN
	SET NOCOUNT ON
	UPDATE [MTD_01].[dbo].[MTD_Messages] --MSSQL only
--	UPDATE [dbo].[MTD_Messages] --Sybase only
    SET [DemographicID] = @DemographicID
      ,[DeviceID] = @DeviceID    
      ,[AcknowledgeUtcTime] = @AcknowledgeUtcTime
      ,[DisplayTime] = @DisplayTime
      ,[KeyPressed] = @KeyPressed 
	WHERE MessageRecID = @MessageRecId	
	SET @RetCode = @@Error        
END
GO
/****** Object:  StoredProcedure [dbo].[LI_MTDActions_UpdateToN_001_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Elena Roe
-- Create date: 01-13-2010
-- Description:	Updates MTDActionInProgress to 'N'
-- =============================================
CREATE PROCEDURE [dbo].[LI_MTDActions_UpdateToN_001_DEL]
  AS
BEGIN
    SET NOCOUNT ON
    UPDATE [dbo].[MTDActions]
    SET ActionInProgress = 'N',
        DateCompleted = NULL
	WHERE ActionInProgress = 'P' and DATEDIFF(mi, DateCreated, GETDATE()) > 20
   
END

GO
/****** Object:  StoredProcedure [dbo].[LI_MTDActions_UpdateToN_002_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Elena Roe
-- Create date: 05-19-2011
-- Description:	Updates MTDActionInProgress to 'N' and checks for AppVer for XT and WMTD_2
-- =============================================
CREATE PROCEDURE [dbo].[LI_MTDActions_UpdateToN_002_DEL]
AS
BEGIN

DECLARE @MajorNumber int            -- Variable to hold Major Version
DECLARE @MinorNumber int            -- Variable to hold Minor Version
DECLARE @BuildNumber int            -- Variable to hold Build Number
DECLARE @RevisionNumber int         -- Variable to hold Revision Version
DECLARE @VerNumber Varchar(30)      -- Variable to hold VersionNumber 
DECLARE @Version varchar (30)
DECLARE @Pos1 int                   -- Posiion of first dot
DECLARE @Pos2 int                   -- Posiion of second dot
DECLARE @Pos3 int                   -- Posiion of third dot
DECLARE @Pos4 int                   -- Position of first letter in the RevisionSubRevisionNumber
DECLARE @Part varChar(1)            -- Variable to hold letter if it exist in Version Minor number
DECLARE @PartValue Decimal(18,4)    -- Number of the Ascii value 
DECLARE @HoldStr Int 
DECLARE @SubRevisionNumber varchar(15) -- Variable to hold subrevision Version
DECLARE @RevisionSubRevisionNumber VarChar(15) -- Variable to hold Revision and SubRevision

CREATE TABLE #TempVersion
(
   DeviceId int NOT NULL,
   MaxTimeStamp datetime not null,
   AppVer varchar(50) not null,
   VersionNumber varchar (50) null,
   DeviceType  varchar(20) null,
   MTDActionId int not null
 
   
   PRIMARY KEY CLUSTERED
   (
       MTDActionId
   )
)
    SET NOCOUNT ON
    insert #TempVersion (DeviceId, MaxTimeStamp, AppVer, MTDActionId) 
	SELECT a.DeviceID, s.TimeStamp, s.AppVer, a.MTDActionId
		FROM [dbo].[MTDActions] a
		join Protech.[dbo].SendCodesAudit s on s.MTDActionId = a.MTDActionID		
	WHERE a.ActionInProgress = 'P'and CommandNumber = 14 
	
	
	--update #TempVersion
	--set ActionInProgress = 'P'
	
	update #TempVersion 
	SET DeviceType = 
		(CASE
			--WHEN (DeviceId between 33559000 and 33579999) THEN 'MTD1010'
			--WHEN (DeviceId between 33580000 and 33999999) THEN 'MTD2000'
			WHEN (DeviceId between 34000000 and 34199999) THEN 'WMTD_0'
			WHEN (DeviceId between 34200000 and 34209999) THEN 'WMTD_2'
			WHEN (DeviceId between 35000000 and 35999999) THEN 'XT'
			--WHEN (DeviceId between 50400000 and 50499999) THEN 'Smartbase'
			ELSE 'OTHER'
		  END
		 )
			 
	
	WHILE EXISTS (SELECT DeviceID FROM  #TempVersion WHERE VersionNumber Is Null)
	BEGIN
	  
   
    set @Version =(select top 1 AppVer from #TempVersion where VersionNumber is null)
      
                              
-- Version Number parts are - Major.Minor.Build.Revision i.e. V4.10.5.3j  

    -- Get the positions of the dots from the Version Number               
      Select @Pos1 = CHARINDEX('.', @Version)   
      Select @Pos2 = CHARINDEX('.', @Version, @Pos1 + 1)
      Select @Pos3 = CHARINDEX('.', @Version, @Pos2 + 1)
      
    -- Calculate the Major Number from the Version number passed in 
      Select @MajorNumber = SUBSTRING(@Version, 2, @pos1-2) 
     
     
     IF @Pos2 > 0             
      BEGIN
    
     -- Calculate the Minor Number from the Version number passed in 
      Select @MinorNumber = SUBSTRING(@Version, @Pos1 + 1, @pos2 - @Pos1 - 1) 
      

	  
      IF @Pos3 > 0   
		BEGIN   
		-- Calculate the Build Number from the Version number passed in 
		Select @BuildNumber = SUBSTRING(@Version, @Pos2 + 1, @pos3 - @Pos2 - 1) 	
		-- Extracts RevisionSubRevisionNumber  
		Select @RevisionSubRevisionNumber = SUBSTRING(@Version, @Pos3 + 1, Len(@Version) - @Pos3)
		END	
      ELSE
      	BEGIN  
      	Select @BuildNumber = SUBSTRING(@Version, @Pos2 + 1, LEN(@Version))
		Select @RevisionSubRevisionNumber = 0
        END	
	  END	 
    ELSE
      BEGIN
      -- Calculate the Minor Number from the Version number passed in 
      select @MinorNumber = SUBSTRING(@Version, @Pos1 + 1, LEN(@Version))
      select @BuildNumber = 0 
      select @RevisionSubRevisionNumber = 0
        
      END  
         
   
      
       
    -- Finds position of the first non-numneric character in the RevisionSubRevisionNumber        
      Select @Pos4 = PATINDEX('%[^0-9]%', SUBSTRING(@RevisionSubRevisionNumber, 1, LEN(@RevisionSubRevisionNumber)))
    
    -- Calculates RevisionNumber and SubRevisionNumber  
      if @Pos4 > 0
            BEGIN
               	Select @RevisionNumber = SUBSTRING(@RevisionSubRevisionNumber, 1, @Pos4-1)
      
                Select @SubRevisionNumber = SUBSTRING(@RevisionSubRevisionNumber, @Pos4, LEN(@RevisionSubRevisionNumber))
            END
       ELSE 
             BEGIN 
				 Select @RevisionNumber = SUBSTRING(@RevisionSubRevisionNumber, 1, LEN(@RevisionSubRevisionNumber))
				 
				 Select @SubRevisionNumber = ''
			END	  
                     
      
     --  Calculates version number
     If @MajorNumber <> 5
        BEGIN  
			Select @VerNumber =  ((@MajorNumber * 256 + @MinorNumber) * 256 + @BuildNumber)* 256 + @RevisionNumber        
            Select @VerNumber = REPLICATE('0', 10 - LEN(@VerNumber))+ @VerNumber + @SubRevisionNumber
        END
    
     ELSE 
        BEGIN 
			Select @VerNumber = (@BuildNumber * 256) + @RevisionNumber	
			Select @VerNumber = REPLICATE('0', 10 - LEN(@VerNumber))+ @VerNumber + @SubRevisionNumber         
		END     
        
                   
           
    -- Update the VersionNumber
		update  top (1) #TempVersion
		set VersionNumber = @VerNumber
		from #TempVersion where VersionNumber is null
		
	END	
		


	
	
	
	-- WMTD V4.2.50.2 - VersionNum is 0067252738
	-- XT V5.x.3.4 - VersionNum is 772
	--select a.*,  t.*
    UPDATE [dbo].[MTDActions]  
    SET ActionInProgress = 'N',
	DateCompleted = NULL     
	FROM [dbo].[MTDActions] a 
		join #TempVersion t on a.MTDActionID = t.MTDActionId		    
	WHERE DATEDIFF(mi, a.DateCreated, GETDATE()) > 20 
	      and a.ActionInProgress = 'P'and a.CommandNumber = 14 
	      and ((t.DeviceType = 'WMTD_2' and t.VersionNumber < '0067252738') 
	      or (t.DeviceType = 'OTHER') or (t.DeviceType = 'XT' and t.VersionNumber < '0000000772'))
	
	
	--select * from #TempVersion
	drop table #TempVersion
   
END

GO
/****** Object:  StoredProcedure [dbo].[LI_MTDActions_UpdateToN_003]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Elena Roe
-- Create date: 05-19-2011
-- Description:	Updates MTDActionInProgress to 'N' and checks for AppVer for XT and WMTD_2
-- =============================================
CREATE PROCEDURE [dbo].[LI_MTDActions_UpdateToN_003]
AS
	SET NOCOUNT ON

	DECLARE @MajorNumber int            -- Variable to hold Major Version
	DECLARE @MinorNumber int            -- Variable to hold Minor Version
	DECLARE @BuildNumber int            -- Variable to hold Build Number
	DECLARE @RevisionNumber int         -- Variable to hold Revision Version
	DECLARE @VerNumber Varchar(30)      -- Variable to hold VersionNumber 
	DECLARE @Version varchar (30)
	DECLARE @Pos1 int                   -- Posiion of first dot
	DECLARE @Pos2 int                   -- Posiion of second dot
	DECLARE @Pos3 int                   -- Posiion of third dot
	DECLARE @Pos4 int                   -- Position of first letter in the RevisionSubRevisionNumber
	DECLARE @Part varChar(1)            -- Variable to hold letter if it exist in Version Minor number
	DECLARE @PartValue Decimal(18,4)    -- Number of the Ascii value 
	DECLARE @HoldStr Int 
	DECLARE @SubRevisionNumber varchar(15) -- Variable to hold subrevision Version
	DECLARE @RevisionSubRevisionNumber VarChar(15) -- Variable to hold Revision and SubRevision

	CREATE TABLE #TempVersion
	(
		DeviceId int NOT NULL,
		MaxTimeStamp datetime not null,
		AppVer varchar(50) not null,
		VersionNumber varchar (50) null,
		DeviceType  varchar(20) null,
		MTDActionId int not null
 
   
		PRIMARY KEY CLUSTERED
		(
			 MTDActionId
		)
	)

	/*
	The following INSERT statement retrieves all pending firmware uploads and places
	key data in the #TempVersion table.
	*/

	INSERT #TempVersion (
		DeviceId, 
		MaxTimeStamp, 
		AppVer, 
		MTDActionId
	) 
	SELECT 
		a.DeviceID, 
		s.TimeStamp, 
		s.AppVer, 
		a.MTDActionId
	FROM 
		[dbo].[MTDActions] a
		INNER JOIN Protech.[dbo].SendCodesAudit s 
			ON s.MTDActionId = a.MTDActionID		
	WHERE 
		(a.ActionInProgress = 'P')
		AND (CommandNumber = 14)
		--Rule out MEMS and DCU devices
		AND (((a.DeviceID & 0xFF000000) <> 0x04000000) AND ((a.DeviceID & 0xFF000000) <> 0x05000000))
	
	/*
	The following UPDATE statement modifies the rows in the #TempVersion table
	to more clearly identify the various device types.
	*/
	UPDATE #TempVersion SET 
		DeviceType = 
		(CASE
			--WHEN (DeviceId between 33559000 and 33579999) THEN 'MTD1010'
			--WHEN (DeviceId between 33580000 and 33999999) THEN 'MTD2000'
			WHEN (DeviceId between 34000000 and 34199999) THEN 'WMTD_0'
			WHEN (DeviceId between 34200000 and 34209999) THEN 'WMTD_2'
			WHEN (DeviceId between 35000000 and 35999999) THEN 'XT'
			--WHEN (DeviceId between 50400000 and 50499999) THEN 'Smartbase'
			ELSE 'OTHER'
			END
		)
			 
	/*
	The following section of SQL is a cursorless loop to update the VersionNumber column
	in the #TempVersion table.
	*/
	WHILE EXISTS (SELECT DeviceID FROM  #TempVersion WHERE VersionNumber IS NULL)
		BEGIN
			SET @Version = (SELECT TOP 1 AppVer FROM #TempVersion WHERE VersionNumber IS NULL)
      
                              
			-- Version Number parts are - Major.Minor.Build.Revision i.e. V4.10.5.3j  

			-- Get the positions of the dots from the Version Number               
			SELECT @Pos1 = CHARINDEX('.', @Version)   
			SELECT @Pos2 = CHARINDEX('.', @Version, @Pos1 + 1)
			SELECT @Pos3 = CHARINDEX('.', @Version, @Pos2 + 1)
      
		 -- Calculate the Major Number FROM the Version number passed in 
			SELECT @MajorNumber = SUBSTRING(@Version, 2, @pos1-2) 
     
     
			IF @Pos2 > 0             
				BEGIN
    			  -- Calculate the Minor Number FROM the Version number passed in 
					SELECT @MinorNumber = SUBSTRING(@Version, @Pos1 + 1, @pos2 - @Pos1 - 1) 

					IF @Pos3 > 0   
						BEGIN   
							-- Calculate the Build Number FROM the Version number passed in 
							SELECT @BuildNumber = SUBSTRING(@Version, @Pos2 + 1, @pos3 - @Pos2 - 1) 	
							-- Extracts RevisionSubRevisionNumber  
							SELECT @RevisionSubRevisionNumber = SUBSTRING(@Version, @Pos3 + 1, Len(@Version) - @Pos3)
						END	
					ELSE
      				BEGIN  
      					SELECT @BuildNumber = SUBSTRING(@Version, @Pos2 + 1, LEN(@Version))
							SELECT @RevisionSubRevisionNumber = 0
						END	
				END	 
			ELSE
				BEGIN
					-- Calculate the Minor Number FROM the Version number passed in 
					SELECT @MinorNumber = SUBSTRING(@Version, @Pos1 + 1, LEN(@Version))
					SELECT @BuildNumber = 0 
					SELECT @RevisionSubRevisionNumber = 0
				END  
       
		 -- Finds position of the first non-numneric character in the RevisionSubRevisionNumber        
			SELECT @Pos4 = PATINDEX('%[^0-9]%', SUBSTRING(@RevisionSubRevisionNumber, 1, LEN(@RevisionSubRevisionNumber)))
    
		 -- Calculates RevisionNumber and SubRevisionNumber  
			if @Pos4 > 0
				BEGIN
					SELECT @RevisionNumber = SUBSTRING(@RevisionSubRevisionNumber, 1, @Pos4-1)
					SELECT @SubRevisionNumber = SUBSTRING(@RevisionSubRevisionNumber, @Pos4, LEN(@RevisionSubRevisionNumber))
				END
			ELSE 
				BEGIN 
					SELECT @RevisionNumber = SUBSTRING(@RevisionSubRevisionNumber, 1, LEN(@RevisionSubRevisionNumber))
					SELECT @SubRevisionNumber = ''
				END	  
                     
      
			--  Calculates version number
			If @MajorNumber <> 5
				BEGIN  
					SELECT @VerNumber =  ((@MajorNumber * 256 + @MinorNumber) * 256 + @BuildNumber)* 256 + @RevisionNumber        
					SELECT @VerNumber = REPLICATE('0', 10 - LEN(@VerNumber))+ @VerNumber + @SubRevisionNumber
				END
			ELSE 
				BEGIN 
					SELECT @VerNumber = (@BuildNumber * 256) + @RevisionNumber	
					SELECT @VerNumber = REPLICATE('0', 10 - LEN(@VerNumber))+ @VerNumber + @SubRevisionNumber         
				END     
           
			-- UPDATE the VersionNumber
			UPDATE TOP (1) #TempVersion SET 
				VersionNumber = @VerNumber
			FROM 
				#TempVersion 
			WHERE 
				VersionNumber IS NULL
		END	

	/*
	After building the data in the table #TempVersion, the next UPDATE statement processes
	the pending uploads.  If the upload is taking too long, then the ActionInProgress is
	set back to N indicating that it is in a pending state once again.
	*/
	UPDATE [dbo].[MTDActions] SET 
		ActionInProgress = 'N',
		DateCompleted = NULL     
	FROM 
		[dbo].[MTDActions] a 
		INNER JOIN #TempVersion t 
			ON a.MTDActionID = t.MTDActionId		    
	WHERE 
		DATEDIFF(mi, a.DateCreated, GETDATE()) > 20 
		AND (a.ActionInProgress = 'P')
		AND (a.CommandNumber = 14) 
		AND (
			(t.DeviceType = 'WMTD_2' AND t.VersionNumber < '0067252738') 
			OR (t.DeviceType = 'OTHER') 
			OR (t.DeviceType = 'XT' and t.VersionNumber < '0000000772')
		)
	
		--SELECT * FROM #TempVersion
		DROP TABLE #TempVersion
GO
/****** Object:  StoredProcedure [dbo].[LI_MTDActions_UpdateToY_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Elena Roe
-- Create date: 01-20-2010
-- Description:	Updates MTDActionInProgress to 'Y'
-- =============================================
CREATE PROCEDURE [dbo].[LI_MTDActions_UpdateToY_001]
	@DeviceId int
AS
BEGIN
    SET NOCOUNT ON
    UPDATE [dbo].[MTDActions]
    SET ActionInProgress = 'Y',
        DateCompleted = GETDATE()
	WHERE ActionInProgress <> 'Y' and DeviceID = @DeviceId
   
END
GO
/****** Object:  StoredProcedure [dbo].[LI_MTDCallsExtension_Save_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[LI_MTDCallsExtension_Save_001]
	@CallRecId bigint,
	@DuplicatePositions int,
	@SourceApplication varchar(50),
	@SourceApplicationVersion varchar(40),
	@SourceApplicationHost varchar(50)
AS
	MERGE [dbo].[MTDCallsExtension] as dst
	USING (
		SELECT 
			@CallRecId,
			@DuplicatePositions,
			@SourceApplication,
			@SourceApplicationVersion,
			@SourceApplicationHost
		) as src (
			CallRecId,
			DuplicatePositions,
			SourceApplication,
			SourceApplicationVersion,
			SourceApplicationHost
		)
	ON
		(dst.CallRecId = src.CallRecId)
	WHEN MATCHED THEN
		UPDATE SET
			DuplicatePositions = src.DuplicatePositions,
			SourceApplication = src.SourceApplication,
			SourceApplicationVersion = src.SourceApplicationVersion,
			SourceApplicationHost = src.SourceApplicationHost
	WHEN NOT MATCHED THEN
		INSERT (
			CallRecId,
			DuplicatePositions,
			SourceApplication,
			SourceApplicationVersion,
			SourceApplicationHost
		) VALUES (
			src.CallRecId,
			src.DuplicatePositions,
			src.SourceApplication,
			src.SourceApplicationVersion,
			src.SourceApplicationHost
		);
GO
/****** Object:  StoredProcedure [dbo].[LI_MTDMessageRespons_Ins_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Elena Roe
-- Create date: 01-20-2010
-- Description:	inserts into [dbo].[MTD_MessageResponses]
-- =============================================
CREATE PROCEDURE [dbo].[LI_MTDMessageRespons_Ins_001]
	@DeviceID int,
    @DemographicID int,
    @RuleID int, 
    @ResponseButton tinyint, 
    @DisplayTime datetime,
    @AckTime datetime
AS
BEGIN
	SET NOCOUNT ON
    INSERT INTO [MTD_01].[dbo].[MTD_MessageResponses] --MSSQL only
--    INSERT INTO [dbo].[MTD_MessageResponses] --Sybase only
           ([DeviceID]
           ,[DemographicID]
           ,[RuleID]
           ,[ResponseButton]
           ,[DisplayTime]
           ,[AckTime])
     VALUES
           (@DeviceID,
            @DemographicID,
            @RuleID, 
            @ResponseButton, 
            @DisplayTime,
            @AckTime)
   
END
GO
/****** Object:  StoredProcedure [dbo].[LI_MTDPositionCounts_Update_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jeremy Nelson
-- Create date: 08/11/2015
-- Description:	Updates MTD_PositionCounts table
-- Notes:
--		PositionCount will be added to the record if one already exists since
--		one call will not deliver all the points for a single day
-- =============================================
CREATE 
PROCEDURE [dbo].[LI_MTDPositionCounts_Update_001] 
(
	@OffenderID		INT,
	@PositionDate	VARCHAR(11),
	@PositionCount	INT
)
AS
BEGIN
	SET NOCOUNT ON

	MERGE	MTD_PositionCounts AS target
	USING	(SELECT @OffenderID, @PositionDate, @PositionCount) AS source (OffenderID, PositionDate, PositionCount)
	ON		(target.OffenderID = source.OffenderID AND target.PositionDate = source.PositionDate)
	
	WHEN MATCHED THEN
		UPDATE SET target.PositionCount = target.PositionCount + source.PositionCount	
	
	WHEN NOT MATCHED THEN
		INSERT (OffenderID, PositionDate, PositionCount)
		VALUES (source.OffenderID, source.PositionDate, source.PositionCount);

END

GO
/****** Object:  StoredProcedure [dbo].[LI_MTDSMSMessages_Update_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Elena Roe
-- Create date: 01-13-2010
-- Description:	Updates ReplyTime in MTD_SMSMessages table
-- =============================================
CREATE PROCEDURE [dbo].[LI_MTDSMSMessages_Update_001]	
	@DeviceId int
AS
BEGIN
    SET NOCOUNT ON
    UPDATE [dbo].[MTD_SMSMessages]
    SET ReplyTime = GETDATE()    
	WHERE DeviceID = @DeviceId and ReplyTime is null
   
END
GO
/****** Object:  StoredProcedure [dbo].[LI_PositionKeys_Insert_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[LI_PositionKeys_Insert_001]
	@DeviceId int,
	@DemographicId int,
	@PositionTimeStamp datetime,
	@CRC bigint,
	@CallRecId bigint,
	@IsDuplicate bit OUTPUT
AS
	SET @IsDuplicate = 0
	BEGIN TRY
		INSERT INTO PositionKeys (
			DeviceId,
			DemographicId,
			PositionTimeStamp,
			CRC,
			CallRecId
		) VALUES (
			@DeviceId,
			@DemographicId,
			@PositionTimeStamp,
			@CRC,
			@CallRecId
		)
	END TRY
	BEGIN CATCH
		SET @IsDuplicate = 1
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[LI_RemoteEventIDs_Insert_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[LI_RemoteEventIDs_Insert_001] 
	@PositionRecId bigint,
	@AMSRemoteTestEventID varchar(50)
AS
	IF NOT EXISTS(SELECT * FROM dbo.RemoteEventIDs WHERE PositionRecID = @PositionRecId AND
		RemoteEventID = @AMSRemoteTestEventID)
		BEGIN
			INSERT INTO dbo.RemoteEventIDs (
				PositionRecId,
				RemoteEventID
			) VALUES (
				@PositionRecId,
				@AMSRemoteTestEventID
			)

		END
GO
/****** Object:  StoredProcedure [dbo].[LI_UpdateDeviceCalls_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Elena Roe copied existing stored proc dbl_UpdateDeviceCalls
-- Create date: 01-21-2010
-- Description:	updates VCommDeviceCalls
-- =============================================
CREATE Procedure [dbo].[LI_UpdateDeviceCalls_001] 
	@VCommUserRecID INT, @DeviceID INT
AS
BEGIN
	SET NOCOUNT ON
	Update VCommDeviceCalls WITH (ROWLOCK) --MSSQL only
--	Update VCommDeviceCalls --Sybase only
	SET DateCompleted = GetDate(), CompletedByUserRecID = @VCommUserRecID
	WHERE DeviceID = @DeviceID
	AND DateCompleted IS NULL
END
GO
/****** Object:  StoredProcedure [dbo].[LI_UpdateMtdActComplete_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		Elena Roe
-- Create date: 01-20-2010
-- Description:	Updates MTDActionInProgress to 'N' and checks for AppVer for XT and WMTD_2
-- =============================================
CREATE PROCEDURE [dbo].[LI_UpdateMtdActComplete_001]
@MtdActionID INT
AS
	DECLARE @MajorNumber int            -- Variable to hold Major Version
	DECLARE @MinorNumber int            -- Variable to hold Minor Version
	DECLARE @BuildNumber int            -- Variable to hold Build Number
	DECLARE @RevisionNumber int         -- Variable to hold Revision Version
	DECLARE @VerNumber Varchar(30)      -- Variable to hold VersionNumber 
	DECLARE @Version varchar (30)
	DECLARE @Pos1 int                   -- Posiion of first dot
	DECLARE @Pos2 int                   -- Posiion of second dot
	DECLARE @Pos3 int                   -- Posiion of third dot
	DECLARE @Pos4 int                   -- Position of first letter in the RevisionSubRevisionNumber
	DECLARE @Part varChar(1)            -- Variable to hold letter if it exist in Version Minor number
	DECLARE @PartValue Decimal(18,4)    -- Number of the Ascii value 
	DECLARE @HoldStr Int 
	DECLARE @SubRevisionNumber varchar(15) -- Variable to hold subrevision Version
	DECLARE @RevisionSubRevisionNumber VarChar(15) -- Variable to hold Revision and SubRevision
	DECLARE @PCLVersion varchar(50)
	DECLARE @PCLVersionId int
	
	SET @PCLVersionId = ((41*256)+20)
	SET @PCLVersion = CAST(@PCLVersionId AS varchar(50))
	
	WHILE (LEN(@PCLVersion) < 10)
	   SET @PCLVersion = '0' + @PCLVersion

	CREATE TABLE #TempVersion (
		DeviceId int NOT NULL,
		[TimeStamp] datetime null,
		AppVer varchar(50) null,
		VersionNumber varchar (50) null,
		DeviceType  varchar(20) null,
		MtdActionID int not null,
		PRIMARY KEY CLUSTERED (
			MtdActionID 
		)
	)

	SET NOCOUNT ON
	INSERT #TempVersion (
		DeviceId, 
		[TimeStamp], 
		AppVer, 
		MtdActionID
	) 
	SELECT 
		a.DeviceID, 
		s.[TimeStamp], 
		s.AppVer, 
		a.MtdActionID
	FROM 
		[dbo].[MTDActions] a
		LEFT JOIN Protech.[dbo].SendCodesAudit s 
			ON s.MTDActionId = a.MTDActionId		
	WHERE 
		a.MtdActionID = @MTDActionID
			
	UPDATE #TempVersion SET 
		DeviceType = 
			(CASE
				--WHEN (DeviceId between 33559000 and 33579999) THEN 'MTD1010'
				--WHEN (DeviceId between 33580000 and 33999999) THEN 'MTD2000'
				WHEN (DeviceId between 34000000 and 34199999) THEN 'WMTD_0'
				--WHEN (DeviceId between 34200000 and 34209999) THEN 'WMTD_2'
				WHEN (DeviceId between 34200000 and 34299999) THEN 'WMTD_2'
				WHEN (DeviceId between 35000000 and 35999999) THEN 'XT'
				--WHEN (DeviceId between 50400000 and 50499999) THEN 'Smartbase'
				WHEN (DeviceId between 50400000 and 59999999) THEN 'Smartbase'
				ELSE 'OTHER'
			  END
			 )
	
	
	SELECT 
		@Version = AppVer 
	FROM 
		#TempVersion 
	WHERE 
		VersionNumber is null

	IF @Version IS NOT NULL
		BEGIN
			-- Version Number parts are - Major.Minor.Build.Revision i.e. V4.10.5.3j  
			-- Get the positions of the dots from the Version Number               
			SET @Pos1 = CHARINDEX('.', @Version)   
			SET @Pos2 = CHARINDEX('.', @Version, @Pos1 + 1)
			SET @Pos3 = CHARINDEX('.', @Version, @Pos2 + 1)

			-- Calculate the Major Number from the Version number passed in 
			SET @MajorNumber = SUBSTRING(@Version, 2, @pos1-2) 
			IF @Pos2 > 0             
				BEGIN
					-- Calculate the Minor Number from the Version number passed in 
					SET @MinorNumber = SUBSTRING(@Version, @Pos1 + 1, @pos2 - @Pos1 - 1) 
					
					IF @Pos3 > 0   
						BEGIN   
							-- Calculate the Build Number from the Version number passed in 
							SET @BuildNumber = SUBSTRING(@Version, @Pos2 + 1, @pos3 - @Pos2 - 1) 	
							
							-- Extracts RevisionSubRevisionNumber  
							SET @RevisionSubRevisionNumber = SUBSTRING(@Version, @Pos3 + 1, Len(@Version) - @Pos3)
						END	
					ELSE
      				BEGIN  
      					SET @BuildNumber = SUBSTRING(@Version, @Pos2 + 1, LEN(@Version))
							SET @RevisionSubRevisionNumber = 0
						END	
				END	 
			ELSE
				BEGIN
					-- Calculate the Minor Number from the Version number passed in 
					SET @MinorNumber = SUBSTRING(@Version, @Pos1 + 1, LEN(@Version))
					SET @BuildNumber = 0 
					SET @RevisionSubRevisionNumber = 0
				END  
	       
			-- Finds position of the first non-numneric character in the RevisionSubRevisionNumber        
			SET @Pos4 = PATINDEX('%[^0-9]%', SUBSTRING(@RevisionSubRevisionNumber, 1, LEN(@RevisionSubRevisionNumber)))
	    
			-- Calculates RevisionNumber and SubRevisionNumber  
			IF @Pos4 > 0
				BEGIN
					SET @RevisionNumber = SUBSTRING(@RevisionSubRevisionNumber, 1, @Pos4-1)
					SET @SubRevisionNumber = SUBSTRING(@RevisionSubRevisionNumber, @Pos4, LEN(@RevisionSubRevisionNumber))
				END
			ELSE 
				BEGIN 
					SET @RevisionNumber = SUBSTRING(@RevisionSubRevisionNumber, 1, LEN(@RevisionSubRevisionNumber))
					SET @SubRevisionNumber = ''
				END	  
			--  Calculates version number
			IF @MajorNumber <> 5
				BEGIN  
					SET @VerNumber =  ((@MajorNumber * 256 + @MinorNumber) * 256 + @BuildNumber)* 256 + @RevisionNumber        
					SET @VerNumber = REPLICATE('0', 10 - LEN(@VerNumber))+ @VerNumber + @SubRevisionNumber
				END
			ELSE 
				BEGIN 
					SET @VerNumber = (@BuildNumber * 256) + @RevisionNumber	
					SET @VerNumber = REPLICATE('0', 10 - LEN(@VerNumber))+ @VerNumber + @SubRevisionNumber         
				END     
			
			-- Update the VersionNumber
			UPDATE #TempVersion SET 
				VersionNumber = @VerNumber
			FROM 
				#TempVersion 
			WHERE 
				VersionNumber is null
				
			

			-- WMTD V4.2.50.2 - VersionNum is 0067252738
			-- XT V5.x.3.4 - VersionNum is 772
			--select a.*, t.*
			UPDATE [dbo].[MTDActions] SET 
				DateCompleted = GETDATE(),   
				ActionInProgress = 'Y'
			FROM 
				[dbo].[MTDActions] a 
				JOIN #TempVersion t 
					ON a.MtdActionID = t.MtdActionID 		
			WHERE 
				a.MtdActionID = @MTDActionID 
				AND 
				(
					((t.DeviceType = 'WMTD_2') AND (t.VersionNumber < '0067252738'))
					OR 
					((t.DeviceType = 'Smartbase') AND (t.VersionNumber < @PCLVersion))
					OR 
					(t.DeviceType = 'OTHER')
					OR 
					((t.DeviceType = 'XT') AND (t.VersionNumber < '0000000772'))
				)
		END
	ELSE
		BEGIN 
			UPDATE [dbo].[MTDActions] SET 
			--	UPDATE MTDActions SET --Sybase only
				ActionInProgress = 'Y', 
				DateCompleted = GetDate()
		   WHERE 
				MtdActionID = @MtdActionID
		END

	--select * from #TempVersion
	DROP TABLE #TempVersion


GO
/****** Object:  StoredProcedure [dbo].[LI_UpdateMTDLstPositions_001_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[LI_UpdateMTDLstPositions_001_DEL]
	@DemographicID int, @DeviceID int, @TimeStamp DateTime,
	@Longitude float, @Latitude float, @Speed smallint,
	@Heading smallint, @Elevation int, @PDOP real,
	@HDOP real, @VDOP real, @GPSMode tinyint,
	@SatellitesInView tinyint, @SVN binary(12), @SNR binary(12),  
	@Temperature smallint, @BatteryVoltage smallint,
	@PointStatus int, @GeoRuleGraceMask int, 
	@DeviceStatus int,
	@RulesInViolation tinyint,
	@StandardTimeOffset int, @DaylightTimeOffset int, @HardwareType tinyint,
	@MTDCallsRecID int,
	@EMChargingStand int,
	@RecID NUMERIC(13,0),
	@AdjustedRIV TinyInt
	
AS
	SET NOCOUNT ON
	DECLARE @CHG_MASK int
	DECLARE @MTD_MASK int
	DECLARE @lastTimeStamp DateTime
	DECLARE @lastRecID NUMERIC(13,0)
	DECLARE @MinDeviceID int
	DECLARE @MaxDeviceID int

	SET @CHG_MASK = 0x03000000
	SET @MTD_MASK = 0x02000000

	IF( @DeviceID > @CHG_MASK)
	BEGIN
		SET @MinDeviceID = @CHG_MASK
		SET @MaxDeviceID = 0x03ffffff
	END
	ELSE
	BEGIN
		SET @MinDeviceID = @MTD_MASK
		SET @MaxDeviceID = 0x02ffffff
	END


	BEGIN
		SELECT @lastRecID = PositionRecID, @lastTimeStamp = TimeStamp 
		FROM MTD_LastPositions (NOLOCK) --MSSQL only
--		FROM MTD_LastPositions NOHOLDLOCK --Sybase only
		WHERE (DemographicID = @DemographicID) AND (DeviceID > @MinDeviceID AND DeviceID <= @MaxDeviceID)

		IF (@lastRecID>0)
		BEGIN
			IF ( @lastTimeStamp is NULL) OR ( @TimeStamp < DateAdd(hour, 24, GetDate()) AND @TimeStamp > @lastTimeStamp )
			BEGIN
				UPDATE MTD_LastPositions WITH (ROWLOCK) SET PositionRecID = @RecID, DemographicID=@DemographicID, DeviceID=@DeviceID, --MSSQL only
--				UPDATE MTD_LastPositions SET PositionRecID = @RecID, DemographicID=@DemographicID, DeviceID=@DeviceID, --Sybase only
					TimeStamp=@TimeStamp, Longitude=@Longitude, Latitude=@Latitude,
					Speed=@Speed, Heading=@Heading, Elevation=@Elevation, PDOP=@PDOP, HDOP=@HDOP, VDOP=@VDOP, 
					GPSMode=@GPSMode, SatellitesInView=@SatellitesInView, SVN=@SVN, SNR=@SNR, Temperature=@Temperature, 
					BatteryVoltage=@BatteryVoltage, PointStatus=@PointStatus, GeoRuleGraceMask=@GeoRuleGraceMask, 
					RulesInViolation=@AdjustedRIV, MTDCallsRecID=@MTDCallsRecID,DeviceStatus=@DeviceStatus, StoredTimeStamp=GetDate()
				WHERE PositionRecID=@lastRecID
			END
		END
		ELSE
		BEGIN
			INSERT INTO MTD_LastPositions  (PositionRecID, DemographicID, DeviceID, TimeStamp, Longitude, Latitude,
				Speed, Heading, Elevation, PDOP, HDOP, VDOP, GPSMode,
				SatellitesInView, SVN, SNR, Temperature, BatteryVoltage,
				PointStatus, GeoRuleGraceMask, RulesInViolation, MTDCallsRecID,
				DeviceStatus)
			VALUES (@RecID, @DemographicID, @DeviceID, @TimeStamp,
				@Longitude, @Latitude, @Speed,
				@Heading, @Elevation, @PDOP,
				@HDOP, @VDOP, @GPSMode,
				@SatellitesInView, @SVN,
				@SNR,  @Temperature, @BatteryVoltage,
				@PointStatus, @GeoRuleGraceMask, @AdjustedRIV, @MTDCallsRecID, @DeviceStatus)
		END
	END
GO
/****** Object:  StoredProcedure [dbo].[LI_UpdDeviceCallComplete]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[LI_UpdDeviceCallComplete] 
@CallRecID  INT
AS
BEGIN
      SET NOCOUNT ON 
	  UPDATE [dbo].[MTDCalls] 
	  SET 	CallProcessed = 1 
      WHERE CallRecID = @CallRecID
END

GO
/****** Object:  StoredProcedure [dbo].[LI_UpdDeviceCallComplete_002]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[LI_UpdDeviceCallComplete_002] 
@CallRecID  BIGINT
AS
BEGIN
      SET NOCOUNT ON 
	  UPDATE [dbo].[MTDCalls] 
	  SET 	CallProcessed = 1 
      WHERE CallRecID = @CallRecID
END

GO
/****** Object:  StoredProcedure [dbo].[LI_WriteInfoStats]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Randy Buffington
-- ALTER date: 5/21/2010
-- Description:	Write Record to the VCommLoadInfoStats Table
-- =============================================
CREATE PROCEDURE [dbo].[LI_WriteInfoStats]
@ServerIP varchar(18),
@ServerName varchar(50),
@ApplicationName varchar(50),
@Files int,
@Points int,
@Threads int,
@Errors int,
@Queued int,
@DebugPoints int,
@Egglets int,
@UTCStartTime datetime,
@UTCTimeStamp datetime

AS

INSERT INTO VCommLoadInfoStats
           (ServerIP,
           ServerName,
           ApplicationName,
           Files,
           Points,
           Threads,
           Errors,
           Queued,
           DebugPoints,
           Egglets,
           UTCStartTime,
           UTCTimeStamp)
    VALUES
           (@ServerIP,
           @ServerName,
           @ApplicationName,
           @Files,
           @Points,
           @Threads,
           @Errors,
           @Queued,
           @DebugPoints,
           @Egglets, 
           @UTCStartTime,
           @UTCTimeStamp)
GO
/****** Object:  StoredProcedure [dbo].[LI_WriteInfoStats_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Randy Buffington
-- ALTER date: 5/21/2010
-- Description:	Write Record to the VCommLoadInfoStats Table
--		RPB 10/6/2010 Added Database Retries to the statistics
--					  so we can track this information on LoadInfo
-- =============================================
CREATE PROCEDURE [dbo].[LI_WriteInfoStats_001]
@ServerIP varchar(18),
@ServerName varchar(50),
@ApplicationName varchar(50),
@Files int,
@Points int,
@Threads int,
@Errors int,
@Queued int,
@DebugPoints int,
@Egglets int,
@Retries int,
@UTCStartTime datetime,
@UTCTimeStamp datetime

AS

SET NOCOUNT ON

INSERT INTO VCommLoadInfoStats
           (ServerIP,
           ServerName,
           ApplicationName,
           Files,
           Points,
           Threads,
           Errors,
           Queued,
           DebugPoints,
           Egglets,
           Retries,
           UTCStartTime,
           UTCTimeStamp)
    VALUES
           (@ServerIP,
           @ServerName,
           @ApplicationName,
           @Files,
           @Points,
           @Threads,
           @Errors,
           @Queued,
           @DebugPoints,
           @Egglets, 
           @Retries,
           @UTCStartTime,
           @UTCTimeStamp)

GO
/****** Object:  StoredProcedure [dbo].[MtdDebugViewer_GetDebugInfo]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*********************************************************************
 *
 * FILE NAME	:	MtdDebugViewer_GetDebugInfo.sql
 *
 *
 * DESCRIPTION	:	Pull Back Debug Information and filter
 *                  by Time span, Demographic ID, Device ID,
 *                  And/Or Debug Type
 *
 * NOTES		:	
 *
 * ASSUMPTIONS	:
 *
 * HISTORY		:
 *
 * Date			Name		Modification
 * ----------------------------------------------------------------------
 * 09-Jan-2009	Randy B.	1st version in ProTech
 * 12-Jan-2009	Olga S.		Log into star team
 * ----------------------------------------------------------------------*/

CREATE PROCEDURE [dbo].[MtdDebugViewer_GetDebugInfo] 
	@TimeStart Datetime,
	@TimeEnd Datetime,
	@DemoID Int = NULL,
	@DeviceID Int = NULL,
	@DebugType SmallInt = NULL

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON

DECLARE @sSql varchar(1000)

	-- Build SQL statement for execution
	SET @sSql = 
			'SELECT Top 30000
				DemographicID,
				DeviceID,
				TimeStamp,
				DebugType,
				STimer,
				DebugInfo1,
				DebugInfo2,
				DebugInfo3,
				DebugInfo4,
				DebugInfo5,
				DebugInfo6,
				DebugInfo7,
				DebugInfo8, 
				MtdDebugRecID,
				MTDCallsRecID,
				StoredTimeStamp
			FROM 
				MTDDebug 
			WHERE 
				(Timestamp >= ''' +  Convert(varchar(30), @TimeStart, 109) + ''' AND
                Timestamp <= ''' + Convert(varchar(30), @TimeEnd , 109) + ''')'
		
	-- If Demographic ID passed in include it in where clause
	IF Not(isNull(@DemoID, 0)) = 0 
		SET @sSql = @sSql +	' And DemographicID = ' + Cast(@DemoID as Varchar(20))

    -- If Debug ID passed in include it in where clause
	IF Not(isNull(@DeviceID, 0)) = 0 
	SET @sSql = @sSql +	' And DeviceID = ' + Cast(@DeviceID as Varchar(20)) 

    -- If Debug Type passed in include it in where clause
	IF Not(isNull(@DebugType, 0)) = 0 
	SET @sSql = @sSql +	' And DebugType = ' + Cast(@DebugType as Varchar(20)) 

    -- Set the Order By Clause
	SET @sSql = @sSql  + ' ORDER BY MtdDebugRecID '

--Print @sSql

Exec (@sSql)END
GO
/****** Object:  StoredProcedure [dbo].[MtdDebugViewer_ValidateLogin]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*********************************************************************
 *
 * FILE NAME	:	MtdDebugViewer_ValidateLogin.sql
 *
 *
 * DESCRIPTION	:	Validates a User/Password is correct with a Enabled
 *                  flag set to 'Y' and returns -1 if correct or 0 if not. 
 *
 * NOTES		:	
 *
 * ASSUMPTIONS	:
 *
 * HISTORY		:
 *
 * Date			Name		Modification
 * ----------------------------------------------------------------------
 * 30-Mar-2009	Randy B.	First Version
 * ----------------------------------------------------------------------*/

CREATE PROCEDURE [dbo].[MtdDebugViewer_ValidateLogin]
	-- Add the parameters for the stored procedure here
 @UserLoginID varchar(8),
 @HashResult varchar(50),
 @RetCode int Output

AS
BEGIN

IF Exists
		(SELECT 
			Password 
		FROM 
			Protech..Users
		WHERE 
			UserLoginId = @UserLoginID AND
			Password = @HashResult AND
			Enabled = 'Y')

      SET @RetCode = -1	
ELSE
      SET @RetCode = 0

RETURN @RetCode

END
GO
/****** Object:  StoredProcedure [dbo].[Nagios_GetAlarmsNotProcessedCount]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Shannon Maness
-- Create date: 8/26/2022
-- Description:	Gets a count of unprocessed alarms and number of minutes since the stored timestamp for the oldest
--				unprocessed alarm.
-- Revisions:
-- mm/dd/yy (xxx) - Change history here.
-- =============================================
CREATE   PROCEDURE [dbo].[Nagios_GetAlarmsNotProcessedCount] 

AS
BEGIN
	SET NOCOUNT ON;

	SELECT COUNT(*) AS UnprocessedCount,
		DATEDIFF(MINUTE, MIN(StoredTimeStamp), GETDATE()) AS MinutesOld
	FROM
	(
		SELECT 
			P.AlarmRecID, StoredTimeStamp 
		FROM 
			MTD_Alarms AS P WITH (NOLOCK) 
		where
			Processed = 'N' 
			AND RuleID > 0 
			AND DemographicID <> 0
	) AS Source

END
GO
/****** Object:  StoredProcedure [dbo].[Nagios_GetCallStats]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE
    

 PROCEDURE [dbo].[Nagios_GetCallStats] @Minutes INT
AS
-- =============================================
-- Author:		Alfredo Inostroza
-- Create date: 2022-04-21
-- Description:	Returns Call Stats for the last specified minutes
-- =============================================
BEGIN
    --Nagios_GetCallStats 5	-- Works
    --Nagios_GetCallStats 600	-- Breaks
    DECLARE @tempMinutes INT

    SET @tempMinutes = - ABS(@Minutes)

    IF @tempMinutes < - 60
    BEGIN
        RAISERROR (
                15600
                , - 1
                , - 1
                , 'Minutes parameter must be less than 60'
                );

        RETURN
    END;

    WITH  calls
    AS (
        SELECT *
        FROM mtd_01.dbo.mtdcalls AS mtdc WITH (NOLOCK)
        WHERE starttime > dateadd(MINUTE, @tempMinutes, getdate())
        )
        , timediffs
    AS (
        SELECT datediff(SECOND, endtime, storedtimestamp) AS delta
            , endtime
            , ipaddress
            , CallRecID
        FROM calls mtdc
        WHERE Demographicid > 0
        )
        , mtdce
    AS (
        SELECT SourceApplicationHost
            , SourceApplication
            , ServerName
            , EndTime
            , delta
            , mtdc.CallRecID
        FROM  mtd_01.dbo.VcommList s
        LEFT JOIN timediffs mtdc ON [S].[IPAddress] = [MTDC].[IPAddress]
        LEFT JOIN mtd_01.dbo.MTDCallsExtension AS mtdce WITH (NOLOCK) ON mtdc.CallRecID = mtdce.CallRecId
        )
    SELECT SourceApplicationHost
        , ServerName
        , SourceApplication
        , count(DISTINCT callrecid) AS CallCount
    INTO #t
    FROM mtdce
    GROUP BY SourceApplicationHost
        , ServerName
        , SourceApplication
    ORDER BY 2
        , 1
    OPTION (OPTIMIZE FOR (@tempMinutes = - 20));

    WITH rpt
    AS (
        SELECT ServerName
            , SourceApplication
            , 'ServiceApi' AS ServiceType
            , sum(CallCount) AS CallCount
        FROM #t t
        WHERE isnull(SourceApplicationHost, '') != ServerName
            AND SourceApplication IS NOT NULL
        GROUP BY ServerName
            , SourceApplication
        
        UNION ALL
        
        SELECT ServerName
            , SourceApplication
            , 'VComm2' AS ServiceType
            , sum(CallCount) AS CallCount
        FROM #t t
        WHERE SourceApplicationHost = ServerName
        GROUP BY ServerName
            , SourceApplication
        
        UNION ALL
        
        SELECT SourceApplicationHost
            , SourceApplication
            , 'CommHost' AS ServiceType
            , sum(CallCount) AS CallCount
        FROM #t t
        WHERE SourceApplicationHost != ServerName
        GROUP BY SourceApplicationHost
            , SourceApplication
        )
        , outrep
    AS (
        SELECT hb.ServerName
            , hb.MachineName
            , CASE 
                WHEN isnull(SourceApplication, 'Vcomm') != 'Vcomm'
                    AND Active IS NULL
                    THEN 'Y'
                ELSE Active
                END AS Active
            , isnull(rpt.CallCount, 0) AS 'CallCount'
            , rpt.SourceApplication
            , rpt.ServiceType
        FROM protech.dbo.HeartBeat AS hb WITH (NOLOCK)
        FULL JOIN rpt ON rpt.servername = hb.ServerName
        WHERE isnull(left(machinename, 5), 'VComm') = 'VComm'
            AND isnull(MonitorApp, 'Y') != 'N'
        )
    SELECT o.ServerName
        , s.IPAddress
        , sum(CallCount) AS 'FileCount'
    FROM outrep o
	join  mtd_01.dbo.VcommList s on o.ServerName=s.servername
    GROUP BY o.ServerName
        , ipaddress
    ORDER BY ServerName
END
GO
/****** Object:  StoredProcedure [dbo].[Nagios_GetCallStatsFiveMinutes]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Nagios_GetCallStatsFiveMinutes]
AS
-- =============================================
-- Author:		Alfredo Inostroza
-- Create date: 2022-04-21
-- Description:	Returns Call Stats for the last 5 minutes
-- =============================================
BEGIN
    WITH s
    AS (
        SELECT *
        FROM mtd_01.dbo.VcommList
        )
        , calls
    AS (
        SELECT *
        FROM mtd_01.dbo.mtdcalls AS mtdc WITH (NOLOCK)
        WHERE starttime > dateadd(MINUTE, - 5, getdate())
        )
        , timediffs
    AS (
        SELECT datediff(SECOND, endtime, storedtimestamp) AS delta
            , endtime
            , ipaddress
            , CallRecID
        FROM calls mtdc
        WHERE Demographicid > 0
        )
        , mtdce
    AS (
        SELECT SourceApplicationHost
            , SourceApplication
            , ServerName
            , EndTime
            , delta
            , mtdc.CallRecID
        FROM s
        LEFT JOIN timediffs mtdc ON [S].[IPAddress] = [MTDC].[IPAddress]
        LEFT JOIN mtd_01.dbo.MTDCallsExtension AS mtdce WITH (NOLOCK) ON mtdc.CallRecID = mtdce.CallRecId
        )
    SELECT SourceApplicationHost
        , ServerName
        , SourceApplication
        , count(DISTINCT callrecid) AS CallCount
    INTO #t
    FROM mtdce
    GROUP BY SourceApplicationHost
        , ServerName
        , SourceApplication
    ORDER BY 2
        , 1;

    WITH rpt
    AS (
        SELECT ServerName
            , SourceApplication
            , 'ServiceApi' AS ServiceType
            , sum(CallCount) AS CallCount
        FROM #t t
        WHERE isnull(SourceApplicationHost, '') != ServerName
            AND SourceApplication IS NOT NULL
        GROUP BY ServerName
            , SourceApplication
        
        UNION ALL
        
        SELECT ServerName
            , SourceApplication
            , 'VComm2' AS ServiceType
            , sum(CallCount) AS CallCount
        FROM #t t
        WHERE SourceApplicationHost = ServerName
        GROUP BY ServerName
            , SourceApplication
        
        UNION ALL
        
        SELECT SourceApplicationHost
            , SourceApplication
            , 'CommHost' AS ServiceType
            , sum(CallCount) AS CallCount
        FROM #t t
        WHERE SourceApplicationHost != ServerName
        GROUP BY SourceApplicationHost
            , SourceApplication
        )
        , outrep
    AS (
        SELECT hb.ServerName
            , hb.MachineName
            , CASE 
                WHEN isnull(SourceApplication, 'Vcomm') != 'Vcomm'
                    AND Active IS NULL
                    THEN 'Y'
                ELSE Active
                END AS Active
            , isnull(rpt.CallCount, 0) AS 'CallCount'
            -- , rpt.ServerName
            , rpt.SourceApplication
            , rpt.ServiceType
        FROM protech.dbo.HeartBeat AS hb WITH (NOLOCK)
        FULL JOIN rpt ON rpt.servername = hb.ServerName
        WHERE isnull(left(machinename, 5), 'VComm') = 'VComm'
            AND isnull(MonitorApp, 'Y') = 'Y'
        )
    SELECT ServerName AS 'HeartbeatServiceName'
        , iif(min(ServiceType) = max(ServiceType), isnull(max(ServiceType), '*Nothing*'), 'Mixed') AS ServiceType
        , sum(CallCount) AS 'CallCount'
    FROM outrep
    GROUP BY ServerName
    ORDER BY ServiceType
        , ServerName
END
GO
/****** Object:  StoredProcedure [dbo].[Nagios_GetLoadInfoStats]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jeremy Nelson
-- Create date: 2/26/2016
-- Description:	Returns LoadInfo Stats for the last 5 minutes
-- =============================================
CREATE PROCEDURE [dbo].[Nagios_GetLoadInfoStats]

@Minutes	int

AS
BEGIN
	--Nagios_GetLoadInfoStats 5	-- Works
	--Nagios_GetLoadInfoStats 600	-- Breaks

	DECLARE @tempMinutes int
	Set @tempMinutes = -ABS(@Minutes)

	IF @tempMinutes < -60
	BEGIN
		RAISERROR (15600, -1, -1, 'Minutes parameter must be less than 60');
	END
	ELSE
	BEGIN
		--
		--	Grab a list of all ACTIVE LoadInfo servers that have updated their Heartbeat record
		--	in the requested timeframe
		--
		SELECT		ServerName
		INTO		#tmpServers
		FROM		Protech..Heartbeat (NOLOCK)
		WHERE		MachineName LIKE 'DBLoadPts%'
		AND			Active = 'Y'
		AND			DbTimeStamp > DATEADD(MINUTE, @tempMinutes, GETDATE())

		--
		--	Grab all LoadInfoStats for the above servers in the requested timeframe
		--
		SELECT		V.ServerName, 
					S.ServerIP, 
					FileCount = SUM(Files)
		INTO		#tmpStats
		FROM		#tmpServers			V
		JOIN		VCommLoadInfoStats	S (NOLOCK) ON S.ServerName = V.ServerName
		WHERE		S.UTCTimeStamp > DATEADD(MINUTE, @tempMinutes, GETDATE())
		GROUP BY	V.ServerName,
					S.ServerIP

		--
		--	Return the list of all servers from the first query with their stats
		--		**	This final query is required to show servers that are heartbeating, but not
		--			writing LoadInfoStat records
		--
		SELECT		V.ServerName,
					ServerIP = IsNull(S.ServerIP, ''),
					FileCount = IsNull(S.FileCount, 0)
		FROM		#tmpServers V 
		LEFT JOIN	#tmpStats S on S.ServerName = V.ServerName

		--
		--	Clean up after ourselves
		--
		DROP TABLE	#tmpServers
		DROP TABLE	#tmpStats

		--===========================================================
		--== Previous Version
		--===========================================================
		--SELECT	ServerIP, 
		--			ServerName = MAX(ServerName), 
		--			FileCount = SUM(Files)
		--FROM		VCommLoadInfoStats (NOLOCK)
		--WHERE		UTCTimeStamp > DATEADD(MINUTE, @tempMinutes, GETDATE())
		--GROUP BY	ServerIP
		--===========================================================
	END
END


GO
/****** Object:  StoredProcedure [dbo].[Nagios_GetSmsReplyTimeData]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jeff LaFay
-- Create date: 11/2/2016
-- Description:	Returns a single row with data on sent SMS messages that don't have a reply
--				time or where the difference between send time and reply time is greater 
--				than @ReplyMinutesThreshold.
-- =============================================
CREATE PROCEDURE [dbo].[Nagios_GetSmsReplyTimeData]
	@StartMinutes INT = 75,
    @EndMinutes INT = 15,
    @ReplyMinutesThreshold INT = 15
AS
BEGIN
	SET NOCOUNT ON;

	SET @ReplyMinutesThreshold = ABS(@ReplyMinutesThreshold)

	DECLARE @StartDate DATETIME = DATEADD(MINUTE, -ABS(@StartMinutes), GETDATE())
	DECLARE @EndDate DATETIME = DATEADD(MINUTE, -ABS(@EndMinutes), GETDATE())

	SELECT * 
	INTO #RecentSmsMessages
	FROM
	(
		   SELECT
				  s.RecID,
				  S.DeviceID,
				  s.SendTime,
				  s.ReplyTime,
				  DATEDIFF(MINUTE, s.SendTime, s.ReplyTime) as MinutesCalledBack
		   FROM dbo.MTD_SMSMessages s WITH(NOLOCK)
		   WHERE s.CreateTime BETWEEN @StartDate AND @EndDate
			AND s.SendTime IS NOT NULL
	) AS Source


	DECLARE @totalmessages FLOAT = (SELECT COUNT(*) FROM #RecentSmsMessages), 
		   @noreplycount FLOAT = (SELECT COUNT(*) FROM #RecentSmsMessages r WHERE r.ReplyTime IS NULL),
		   @latentreplycount FLOAT = (SELECT COUNT(*) FROM #RecentSmsMessages r WHERE r.ReplyTime IS NOT NULL AND r.MinutesCalledBack > @ReplyMinutesThreshold)

	SELECT @noreplycount AS [Never Replied], 
		@latentreplycount AS [Latent Replies],
		@totalmessages [Total Messages],
		FORMAT(((@noreplycount / @totalmessages) * 100), 'n2') AS [No Reply %],
		FORMAT(((@latentreplycount / @totalmessages) * 100), 'n2') AS [Latent %]


	DROP TABLE #RecentSmsMessages

END
GO
/****** Object:  StoredProcedure [dbo].[Nagios_GetSMSStats]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:    	Jeff LaFay
-- Create date: 6-15-2016
-- Description:	Fetches to record sets. The first one has a count of messages not sent that are older in minutes than
--				the parameter supplied. The second record set gives a summary for any SMS Message Service running.
-- 09/19/18 (DLE) - change to use CreateGMT and GetUTCDate()
-- =============================================
CREATE PROCEDURE [dbo].[Nagios_GetSMSStats] @minimumMinutesOld AS int
AS
BEGIN
  SET NOCOUNT ON;
  SET @minimumMinutesOld = -ABS(@minimumMinutesOld)
  IF @minimumMinutesOld < -120
  BEGIN
    RAISERROR (15600, -1, -1, 'Minutes parameter must be <= 120');	
  END
  ELSE
  BEGIN
    -- Gets a count of any records that are unsent as well as the oldest and newest unsent datetimes.
    SELECT
      COUNT(*) AS [Unsent Records],	 
      [Protech].[dbo].fn_GetLocalTime(MIN(CreateGmt),-300,-240) AS [Oldest Unsent], --return in EasternTime
      [Protech].[dbo].fn_GetLocalTime(MAX(CreateGmt),-300,-240) AS [Newest Unsent], --return in EasternTime
	  (SELECT max(SendTime) FROM dbo.MTD_SMSMessages WITH (NOLOCK)) as [Last Sent Time] 
    FROM dbo.MTD_SMSMessages WITH (NOLOCK)
    WHERE SendTime IS NULL
    AND ReplyTime IS NULL
    AND CreateGmt <= DATEADD(MINUTE, @minimumMinutesOld, GETUTCDATE())
    AND SendMethod = 'M'
    AND Status IS NULL

	-- below is more stats that were not used. Left code for possible future use

    ---- Gets a count of messages queued in each instance of SMS Message Service.
    --SELECT
    --  SMSMessageServiceHostName AS Hostname,
    --  COUNT(*) AS [Currently Queued] INTO #TempQueued
    --FROM dbo.MTD_SMSMessages WITH (NOLOCK)
    --WHERE SendMethod LIKE 'm'
    --AND SendTime IS NULL
    --AND ReplyTime IS NULL
    --AND SMSMessageServiceBatchId IS NOT NULL
    --GROUP BY SMSMessageServiceHostName

    ---- Get last successful sent message for each instance of SMS Message Service that is currently running.
    --SELECT
    --  S.SMSMessageServiceHostName Hostname,
    --  MAX(S.SendTime) [Last Msg Send Time] INTO #TempLastSent
    --FROM dbo.MTD_SMSMessages S WITH (NOLOCK)
    --INNER JOIN Protech.dbo.HeartBeat H WITH (NOLOCK)
    --  ON H.ServerName = S.SMSMessageServiceHostName
    --  AND H.Active LIKE 'y'
    --  AND H.MachineName LIKE 'SMSMessageService'
    --WHERE S.SendMethod LIKE 'm'
    --AND S.SendTime IS NOT NULL
    --AND S.SMSMessageServiceBatchId IS NOT NULL
    --GROUP BY S.SMSMessageServiceHostName
    --ORDER BY [Last Msg Send Time]


    ---- Join the temp tables and heart beat to get a summary for each SMS Message Service instance.
    --SELECT
    --  L.Hostname,
    --  IIF(Q.[Currently Queued] > 0, Q.[Currently Queued], 0) [Currently Queued],
    --  H.StartUpTime,
    --  L.[Last Msg Send Time],
    --  H.LastPulse [Last Heartbeat],
    --  H.StatusInfo [Heartbeat Status],
    --  IIF(H.HealthStatus = 6, 1, 0) [Has Heartbeat Error]
    --FROM #TempLastSent L
    --LEFT JOIN #TempQueued Q
    --  ON Q.Hostname = L.Hostname
    --LEFT JOIN Protech.dbo.HeartBeat H WITH (NOLOCK)
    --  ON H.ServerName = L.Hostname
    --  AND H.MachineName LIKE 'SMSMessageService'


    --DROP TABLE #TempQueued
    --DROP TABLE #TempLastSent
  END
END
GO
/****** Object:  StoredProcedure [dbo].[OffenderEventAlarms_Delete]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE   PROCEDURE [dbo].[OffenderEventAlarms_Delete]
(
@OffenderEventAlarmID int
)
AS
SET NOCOUNT OFF;
DELETE FROM [OffenderEventAlarms] WHERE (([OffenderEventAlarmID] = @OffenderEventAlarmID))
GO
/****** Object:  StoredProcedure [dbo].[OffenderEventAlarms_Insert]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE   PROCEDURE [dbo].[OffenderEventAlarms_Insert]
(
@DemographicID int,
@Timestamp datetime,
@UtcTimestamp datetime,
@RuleID int,
@OffenderEventTypeID int,
@OffenderEventID int
)
AS
SET NOCOUNT OFF;
INSERT INTO [OffenderEventAlarms] ([DemographicID], [Timestamp], [UtcTimestamp], [RuleID], [OffenderEventTypeID], [OffenderEventID]) VALUES (@DemographicID, @Timestamp, @UtcTimestamp,  @RuleID, @OffenderEventTypeID, @OffenderEventID);

SELECT OffenderEventAlarmID, DemographicID, Timestamp, UtcTimestamp, RuleID, OffenderEventTypeID, OffenderEventID FROM OffenderEventAlarms WHERE (OffenderEventAlarmID = SCOPE_IDENTITY())
GO
/****** Object:  StoredProcedure [dbo].[OffenderEventAlarms_Select]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE   PROCEDURE [dbo].[OffenderEventAlarms_Select]
(
@OffenderEventAlarmID int = -1,
@DemographicID int = -1
)
AS
SET NOCOUNT ON;
Select OffenderEventAlarmID, DemographicID, Timestamp, UtcTimestamp, RuleID, OffenderEventTypeID, OffenderEventID
from OffenderEventAlarms
where (@OffenderEventAlarmID = -1 OR OffenderEventAlarmID = @OffenderEventAlarmID) AND (@DemographicID = -1 OR DemographicID = @DemographicID)
GO
/****** Object:  StoredProcedure [dbo].[OffenderEventAlarms_Update]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[OffenderEventAlarms_Update]
(
@DemographicID int,
@Timestamp datetime,
@UtcTimestamp datetime,
@RuleID int,
@OffenderEventTypeID int,
@OffenderEventID int,
@OffenderEventAlarmID int
)
AS
SET NOCOUNT OFF;
UPDATE [OffenderEventAlarms] SET [DemographicID] = @DemographicID, [Timestamp] = @Timestamp, [UtcTimestamp] = @UtcTimestamp,  [RuleID] = @RuleID, [OffenderEventTypeID] = @OffenderEventTypeID, [OffenderEventID] = @OffenderEventID WHERE (([OffenderEventAlarmID] = @OffenderEventAlarmID));

SELECT OffenderEventAlarmID, DemographicID, Timestamp, UtcTimestamp, RuleID, OffenderEventTypeID, OffenderEventID FROM OffenderEventAlarms WHERE (OffenderEventAlarmID = @OffenderEventAlarmID)
GO
/****** Object:  StoredProcedure [dbo].[OffenderEventNotificationContacts_Delete]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[OffenderEventNotificationContacts_Delete]
(
@OffenderEventNotificationContactID int
)
AS
SET NOCOUNT OFF;
DELETE FROM [OffenderEventNotificationContacts] WHERE (([OffenderEventNotificationContactID] = @OffenderEventNotificationContactID))
GO
/****** Object:  StoredProcedure [dbo].[OffenderEventNotificationContacts_Insert]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[OffenderEventNotificationContacts_Insert]
(
@OffenderEventID int,
@ContactDemographicID int,
@SendEmail bit,
@SendText bit
)
AS
SET NOCOUNT OFF;
INSERT INTO [OffenderEventNotificationContacts] ([OffenderEventId], [ContactDemographicID], [SendEmail], [SendText]) VALUES (@OffenderEventID, @ContactDemographicID, @SendEmail, @SendText);

SELECT OffenderEventNotificationContactID, [OffenderEventId], ContactDemographicID, SendEmail, SendText FROM OffenderEventNotificationContacts WHERE (OffenderEventNotificationContactID = SCOPE_IDENTITY())
GO
/****** Object:  StoredProcedure [dbo].[OffenderEventNotificationContacts_Select]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[OffenderEventNotificationContacts_Select]
(
@OffenderEventNotificationContactID int = -1,
@OffenderEventID int = -1
)
AS
SET NOCOUNT ON;
Select OffenderEventNotificationContactID, OffenderEventID, ContactDemographicID, SendEmail, SendText
from OffenderEventNotificationContacts
WHERE (@OffenderEventNotificationContactID = -1 OR OffenderEventNotificationContactID = @OffenderEventNotificationContactID)
AND (@OffenderEventID = -1 OR OffenderEventID = @OffenderEventID)
GO
/****** Object:  StoredProcedure [dbo].[OffenderEventNotificationContacts_Update]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE   PROCEDURE [dbo].[OffenderEventNotificationContacts_Update]
(
@OffenderEventID int,
@ContactDemographicID int,
@SendEmail bit,
@SendText bit,
@OffenderEventNotificationContactID int
)
AS
SET NOCOUNT OFF;
UPDATE [OffenderEventNotificationContacts] SET  [OffenderEventID] = @OffenderEventID, [ContactDemographicID] = @ContactDemographicID, [SendEmail] = @SendEmail, [SendText] = @SendText WHERE (([OffenderEventNotificationContactID] = @OffenderEventNotificationContactID));

SELECT OffenderEventNotificationContactID, [OffenderEventId], ContactDemographicID, SendEmail, SendText FROM OffenderEventNotificationContacts WHERE (OffenderEventNotificationContactID = @OffenderEventNotificationContactID)
GO
/****** Object:  StoredProcedure [dbo].[PS_Maintain_DuplicatePositions]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[PS_Maintain_DuplicatePositions]
AS
	/*
	==============================================================================
	DuplicatePositions Maintenance
	==============================================================================
	Author: S. Cupstid
	Date Created: 09/08/2021
	------------------------------------------------------------------------------
	The DuplicatePositions table contains position egglets reported by devices 
	that have been identified as duplicate positions (positions that have 
	previously been recorded to the database).  This maintenance process will
	remove dated rows from the table to limit the impact of the table on the 
	available resources.  Currently, the stored procedure is hard-coded to a 90
	day limit.

	The process will delete 100,000 rows at a time with a 5 sec. delay between
	each batch.  This will minimize the impact the process has on the performance
	of systems requiring access to the DuplicatePositions table as well as the 
	overall impact the process will have on the server's performance.

	The process is executed by a SQL Server Agent job.  The job name is...

	LoadInfo_Maintain_DuplicatePositions

	The default execution schedule for the job is one time each day at 00:00.
	==============================================================================
	*/
	SET ROWCOUNT 100000
	DECLARE @Limit int = 0,
			@Delay varchar(255) = ''
	SELECT
		@Limit = CAST(p.ParamValue as int)
	FROM
		[Protech].[dbo].[ApplicationParameters] p
	WHERE
		p.AppName = 'LoadInfo' AND
		p.ParamName = 'DuplicatePositionsLimit'

	SELECT
		@Delay = p.ParamValue
	FROM
		[Protech].[dbo].[ApplicationParameters] p
	WHERE
		p.AppName = 'LoadInfo' AND
		p.ParamName = 'DuplicatePositionsDelay'

	DECLARE @TimeStamp datetime = DATEADD(DAY, @Limit, GETDATE())
	
	DELETE FROM [dbo].[DuplicatePositions] WITH (ROWLOCK) 
		WHERE PositionTimeStamp < @TimeStamp
	
	WHILE (@@ROWCOUNT > 0)
	BEGIN
		WAITFOR DELAY @Delay
		DELETE FROM [dbo].[DuplicatePositions] WITH (ROWLOCK) 
			WHERE PositionTimeStamp < @TimeStamp
	END
GO
/****** Object:  StoredProcedure [dbo].[PS_Maintain_PositionKeys]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[PS_Maintain_PositionKeys]
AS
	/*
	==============================================================================
	PositionKeys Maintenance
	==============================================================================
	Author: S. Cupstid
	Date Created: 09/08/2021
	------------------------------------------------------------------------------
	The PositionKeys table contains key data to assist LoadInfo in determining if
	position data being processed from an egg file is a duplicate position.  The 
	number of rows in this table will impact the performance of LoadInfo.  Keeping
	the size of the table to a minimal size is key to preventing significant 
	degradation in LoadInfo processing performance.

	The process will delete 100,000 rows at a time with a 5 sec. delay between
	each batch.  This will minimize the impact the process has on the performance
	of systems requiring access to the PositionKeys table as well as the overall 
	impact the process will have on the server's performance.

	The process is executed by a SQL Server Agent job.  The job name is...

	LoadInfo_Maintain_PositionKeys

	The default execution schedule for the job is one time each day at 00:00.
	==============================================================================
	*/
	SET ROWCOUNT 200000
	DECLARE @Limit int = 0,
			@Delay varchar(255) = ''

	SELECT
		@Limit = CAST(p.ParamValue as int)
	FROM
		[Protech].[dbo].[ApplicationParameters] p
	WHERE
		p.AppName = 'LoadInfo' AND
		p.ParamName = 'PositionKeysLimit'

	SELECT
		@Delay = p.ParamValue
	FROM
		[Protech].[dbo].[ApplicationParameters] p
	WHERE
		p.AppName = 'LoadInfo' AND
		p.ParamName = 'PositionKeysDelay'

	DECLARE @TimeStamp datetime = DATEADD(DAY, @Limit, GETDATE())

	DELETE FROM [dbo].[PositionKeys] WITH (ROWLOCK) 
		WHERE PositionTimeStamp < @TimeStamp

	WHILE (@@ROWCOUNT > 0)
	BEGIN
		WAITFOR DELAY @Delay
		DELETE FROM [dbo].[PositionKeys] WITH (ROWLOCK) 
			WHERE PositionTimeStamp < @TimeStamp
	END
GO
/****** Object:  StoredProcedure [dbo].[PS_Maintain_PositionKeysv2]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[PS_Maintain_PositionKeysv2]  
AS  
BEGIN
    /*  
    ==============================================================================  
    PositionKeys Maintenance - Optimized Version
    ==============================================================================  
    Author: S. Cupstid (Optimized by Claude)
    Date Created: 09/08/2021  
    Date Optimized: 09/03/2025
    ------------------------------------------------------------------------------  
    Maintains the PositionKeys table by removing old records in batches to optimize
    LoadInfo performance. Processes deletions in configurable batch sizes with
    delays to minimize system impact.
    
    Key Improvements:
    - Removed deprecated SET ROWCOUNT
    - Added proper error handling and logging
    - Fixed timestamp calculation logic
    - Optimized batch deletion with TOP clause
    - Added transaction management
    - Improved parameter validation
    - Added execution statistics
    ==============================================================================  
    */
    
    SET NOCOUNT ON;
    
    DECLARE 
        @RetentionDays int = 30,           -- Default retention period
        @BatchSize int = 100000,           -- Default batch size
        @DelayTime varchar(8) = '00:00:05', -- Default 5 second delay
        @CutoffDate datetime,
        @RowsDeleted bigint = 0,
        @TotalRowsDeleted bigint = 0,
        @BatchCount int = 0,
        @StartTime datetime = GETDATE(),
        @ErrorMessage nvarchar(4000);

    --BEGIN TRY
        -- Retrieve configuration parameters with defaults
        SELECT 
            @RetentionDays = ISNULL(CAST(p.ParamValue as int), 30)
        FROM [Protech].[dbo].[ApplicationParameters] p  WITH (NOLOCK)
        WHERE p.AppName = 'LoadInfo' 
          AND p.ParamName = 'PositionKeysRetentionDays';
        
        SELECT 
            @BatchSize = ISNULL(CAST(p.ParamValue as int), 100000)
        FROM [Protech].[dbo].[ApplicationParameters] p  WITH (NOLOCK)
        WHERE p.AppName = 'LoadInfo' 
          AND p.ParamName = 'PositionKeysBatchSize';
          
        SELECT 
            @DelayTime = ISNULL(p.ParamValue, '00:00:05')
        FROM [Protech].[dbo].[ApplicationParameters] p  WITH (NOLOCK)
        WHERE p.AppName = 'LoadInfo' 
          AND p.ParamName = 'PositionKeysDelay';

        -- Validate parameters
        IF @RetentionDays <= 0 OR @RetentionDays > 365
        BEGIN
            RAISERROR('Invalid retention days parameter. Must be between 1 and 365.', 16, 1);
            RETURN;
        END

        IF @BatchSize <= 0 OR @BatchSize > 1000000
        BEGIN
            RAISERROR('Invalid batch size parameter. Must be between 1 and 1,000,000.', 16, 1);
            RETURN;
        END

        -- Calculate cutoff date (subtract retention days from current date)
        SET @CutoffDate = DATEADD(DAY, -@RetentionDays, GETDATE());

        -- Log maintenance start
        PRINT 'PositionKeys maintenance started at ' + CONVERT(varchar, @StartTime, 120);
        PRINT 'Cutoff date: ' + CONVERT(varchar, @CutoffDate, 120);
        PRINT 'Batch size: ' + CAST(@BatchSize as varchar);
        
        -- Check if there are any records to delete
        IF NOT EXISTS (SELECT 1 FROM [dbo].[PositionKeys] WITH (NOLOCK) 
                      WHERE PositionTimeStamp < @CutoffDate)
        BEGIN
            PRINT 'No records found for deletion.';
            RETURN;
        END

        -- Batch deletion loop
        WHILE 1 = 1
        BEGIN
           -- BEGIN TRANSACTION;
            
            -- Delete batch using TOP clause (more efficient than SET ROWCOUNT)
            DELETE TOP (@BatchSize) 
            FROM [dbo].[PositionKeys] WITH (ROWLOCK, READPAST)
            WHERE PositionTimeStamp < @CutoffDate;
            
            SET @RowsDeleted = @@ROWCOUNT;
            SET @BatchCount = @BatchCount + 1;
            SET @TotalRowsDeleted = @TotalRowsDeleted + @RowsDeleted;
            
           -- COMMIT TRANSACTION;
            
            -- Log progress every 10 batches
            IF @BatchCount % 10 = 0
            BEGIN
                PRINT 'Batch ' + CAST(@BatchCount as varchar) + 
                      ' completed. Total rows deleted: ' + CAST(@TotalRowsDeleted as varchar);
            END
            
            -- Exit if no more rows to delete
            IF @RowsDeleted = 0 OR @RowsDeleted < @BatchSize
                BREAK;
            
            -- Wait between batches to reduce system impact
            WAITFOR DELAY @DelayTime;
        END

        -- Final logging
        DECLARE @Duration varchar(20) = CONVERT(varchar, GETDATE() - @StartTime, 114);
        PRINT 'PositionKeys maintenance completed successfully.';
        PRINT 'Total batches processed: ' + CAST(@BatchCount as varchar);
        PRINT 'Total rows deleted: ' + CAST(@TotalRowsDeleted as varchar);
        PRINT 'Duration: ' + @Duration;
        
        -- Optional: Update statistics on the table after large deletions
        --IF @TotalRowsDeleted > 50000
        --BEGIN
        --    PRINT 'Updating table statistics...';
        --    UPDATE STATISTICS [dbo].[PositionKeys];
        --END

    --END TRY
    --BEGIN CATCH
    --    -- Rollback transaction if in progress
    --    IF @@TRANCOUNT > 0
    --        ROLLBACK TRANSACTION;
            
    --    SET @ErrorMessage = 'Error in PositionKeys maintenance: ' + 
    --                       ERROR_MESSAGE() + ' (Line ' + CAST(ERROR_LINE() as varchar) + ')';
        
    --    -- Log error
    --    PRINT @ErrorMessage;
        
    --    -- Re-raise error for SQL Agent job failure detection
    --    RAISERROR(@ErrorMessage, 16, 1);
    --END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[ptmsvcs_MTD_Alarms_Insert]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ====================================================================
-- Author:		Michael Shupe
-- Create date: 6-03-2013
--  6-17-2013 MCS Prevent duplicate AlcoholTestIDs 
--                Just return 0 if record already exists
--  8-14-2013 DLE remove reference to deviceModelTypeValue
-- 11-20-2013 MCS Specifically prevent duplicate PICTURE MISMATCH Alarms
-- =====================================================================
CREATE PROCEDURE [dbo].[ptmsvcs_MTD_Alarms_Insert]
	@DemographicID INT,
	@Timestamp DATETIME,
	@PointStatus INT,
	@RuleID INT,
	@DeviceID INT,
	@HWRule INT,
	@RuleStatus INT,
	@MTDCallsRecID INT,
	@OneTimeSchedId INT,
	@DeviceStatus INT,
	@ActionStatus INT,
	@ZoneRecID INT,
	@AlcoholTestID INT,
	@HWRuleBitIndex INT,
	@AlcoholPictureMatchHistoryID INT,
	@DeviceStatus2 INT
AS
BEGIN
	IF NOT EXISTS (SELECT * FROM MTD_Alarms 
	               WHERE AlcoholTestID = @AlcoholTestID 
				     AND @HwRuleBitIndex = 202	-- Picture Mismatch
					 AND HwRuleBitIndex = 202)
		BEGIN
			INSERT INTO MTD_Alarms 
				( DemographicID, [TimeStamp], PointStatus, RuleID, DeviceID, HWRule, RuleStatus, MTDCallsRecID,
				  OneTimeSchedId, DeviceStatus, ActionStatus, ZoneRecID, AlcoholTestID, HWRuleBitIndex, 
				  AlcoholPictureMatchHistoryID, DeviceStatus2)
			VALUES (@DemographicID, @Timestamp, @PointStatus, @RuleID, @DeviceID, @HWRule, @RuleStatus,
					@MTDCallsRecID, @OneTimeSchedId, @DeviceStatus, @ActionStatus, @ZoneRecID, @AlcoholTestID,
					@HWRuleBitIndex, @AlcoholPictureMatchHistoryID, @DeviceStatus2)
			SELECT SCOPE_IDENTITY()
		END
	ELSE
		SELECT 0
END



GO
/****** Object:  StoredProcedure [dbo].[ptmsvcs_MTD_LastPositions_GetByDemoID]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=============================================================================
-- Procedure Name: ptmsvcs_MTD_LastPositions_GetByDemoID
-- Description...: Retrieves the timestamp for the last position.
-- Author........: Phillip R. Hickman
-- Date Created..: 2015-09-01
-------------------------------------------------------------------------------
-- Revisions
--	2015-09-01 - PRH - Initial procedure created.
--=============================================================================
CREATE PROC [dbo].[ptmsvcs_MTD_LastPositions_GetByDemoID]
	@DemographicID			INT
AS
BEGIN

	SET NOCOUNT ON

	SELECT [TimeStamp] FROM MTD_LastPositions 
	WHERE DemographicID = @DemographicID
END
GO
/****** Object:  StoredProcedure [dbo].[ptmsvcs_OffenderPositionsReviewed_Backfill]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--=============================================================================
-- Script Name.: ptmsvcs_OffenderPositionsReviewed_Backfill
-- Description.: Updates the OffenderPositionsReviewed table with the table
--                         data passed in.
-- Author......: Don E
-- Date Created: 2018-12-18
-------------------------------------------------------------------------------
-- Revisions
-- 2018-12-318- DLE - Initial script created.
--=============================================================================
CREATE PROC [dbo].[ptmsvcs_OffenderPositionsReviewed_Backfill]
       @TableData MyOffenderPositionsReviewedTable READONLY
AS
BEGIN

       SET NOCOUNT OFF      -- We want to know how many rows were affected.

    --   MERGE  OffenderPositionsReviewed  AS OPR

    --   USING @TableData
    --          --(
    --          --select OffenderID, PositionRecID, UserRecID, min(ReviewedDate) as ReviewedDate, AppID, DeviceType, PositionDate 
    --          --from @TableData
    --          --group by OffenderID, PositionRecID, UserRecID, AppID, DeviceType, PositionDate
    --          --) 
    --          AS TD 
    --   ON TD.PositionRecID = OPR.PositionRecID AND TD.UserRecID = OPR.UserRecID AND TD.AppID = OPR.APPID and td.DeviceType = OPR.DeviceType 
       
    --   WHEN MATCHED AND  TD.ReviewedDate < OPR.ReviewedDate  THEN
    --   UPDATE SET OPR.ReviewedDate = TD.ReviewedDate

    --WHEN NOT MATCHED  THEN
    --          --     We only want to insert new records.
    --          INSERT (OffenderID, PositionRecID, UserRecID, ReviewedDate, AppID, DeviceType, PositionDate)
    --          VALUES (TD.OffenderID, TD.PositionRecID, TD.UserRecID, td.ReviewedDate, TD.AppID, TD.DeviceType, TD.PositionDate);

BEGIN TRANSACTION T1; 
UPDATE OPR  
	SET ReviewedDate = TD.ReviewedDate
	from OffenderPositionsReviewed  AS OPR
	join @TableData td 
	ON TD.PositionRecID = OPR.PositionRecID AND TD.UserRecID = OPR.UserRecID AND TD.AppID = OPR.APPID and td.DeviceType = OPR.DeviceType 
	and td.ReviewedDate < OPR.ReviewedDate

INSERT INTO OffenderPositionsReviewed
select td.[OffenderID],td.[PositionRecID],td.[UserRecID],td.[ReviewedDate],td.[AppID],td.[PositionDate],td.[DeviceType]
from @TableData as td
left join OffenderPositionsReviewed as opr
	ON TD.PositionRecID = OPR.PositionRecID AND TD.UserRecID = OPR.UserRecID AND TD.AppID = OPR.APPID and td.DeviceType = OPR.DeviceType 
where opr.OffenderPositionsReviewedRecID is null
COMMIT TRANSACTION T1;

END
GO
/****** Object:  StoredProcedure [dbo].[ptmsvcs_OffenderPositionsReviewed_Save]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--=============================================================================
-- Script Name.: ptmsvcs_OffenderPositionsReviewed_Save
-- Description.: Updates the OffenderPositionsReviewed table with the table
--                         data passed in.
-- Author......: Phillip R. Hickman
-- Date Created: 2015-07-30
-------------------------------------------------------------------------------
-- Revisions
-- 03/26/2019 SLM - Removed temporary check for TDCJ contract
-- 11/30/2018 SLM - Added a temporary check for contract option so we do not store points reviewed if not enabled
-- 10/09/2018 UO  - Changed ReviewedDate column to a GETUTCDATE()variable called @ReviewedDate
-- 07/19/16 (SLM) Restored PositionReviewed functionality
-- 2015-07-30 - PRH - Initial script created.
--=============================================================================
CREATE PROC [dbo].[ptmsvcs_OffenderPositionsReviewed_Save]
@TableData MyOffenderPositionsReviewedTable READONLY
AS
DECLARE @ReviewedDate datetime
SET     @ReviewedDate = GETUTCDATE()
BEGIN
SET NOCOUNT OFF      -- We want to know how many rows were affected.

MERGE INTO OffenderPositionsReviewed AS OPR

USING @TableData AS TD ON TD.OffenderID = OPR.OffenderID
AND TD.PositionRecID = OPR.PositionRecID
AND TD.UserRecID = OPR.UserRecID
AND TD.AppID = OPR.AppID
AND TD.DeviceType = OPR.DeviceType
AND TD.PositionDate = OPR.PositionDate

WHEN NOT MATCHED THEN
--     We only want to insert new records.
INSERT (OffenderID, PositionRecID, UserRecID, ReviewedDate, AppID, DeviceType, PositionDate)
VALUES (TD.OffenderID, TD.PositionRecID, TD.UserRecID, @ReviewedDate, TD.AppID, TD.DeviceType, TD.PositionDate);

END
GO
/****** Object:  StoredProcedure [dbo].[ptmsvcs_Users_GetNotificationCenterMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
=============================================
Author:		Girish L. Ukarande
Create date:
Description:	Returns Notification messages for a given criteria
08/27/24 (GLU)  - Initial creation
05/16/2025 (GLU) - updated isEscalation flag - only 'E' and 'M' are escalated alarms
05/22/2025 (AEI) - Rewrite with a per-alarmID perspective and presentation
06/19/2025 (AEI) - Rewrite allNotifications to capture first/clears as pairs to add
isClearNotification and hasAlarmCleared columns, one per
notification and one per alarm for Hopper 96145
07/02/2025 (GLU) - Added logic to get offender local time for DateSent and acknowledgeTime
09/03/2025 (AEI) - Use DateCreated as fallback to null DateSent, use DateTimeOffset to simplify query logic
=============================================
*/
CREATE   PROCEDURE [dbo].[ptmsvcs_Users_GetNotificationCenterMessages] (
    @UserRecID INT
    , @StartDate DATETIME = NULL
    , @EndDate DATETIME = NULL
    )
AS
BEGIN
    DECLARE @lUserRecID INT = @UserRecID
    DECLARE @CurrentDate DATETIME = GETDATE()
    -- Run this if server timezone ever changes
    -- DECLARE @SystemTimeZoneInfo VARCHAR(50);
    -- EXEC MASTER.dbo.xp_regread 'HKEY_LOCAL_MACHINE', 'SYSTEM\CurrentControlSet\Control\TimeZoneInformation', 'TimeZoneKeyName', @SystemTimeZoneInfo OUT;
    -- Run this if server timezone is eastern
    DECLARE @SystemTimeZoneInfo VARCHAR(50) = 'Eastern Standard Time'

    IF @StartDate IS NULL
        OR @EndDate IS NULL
    BEGIN
        SET @StartDate = DATEADD(HOUR, - 48, @CurrentDate)
        SET @EndDate = @CurrentDate
    END;

    -- set it to midnight of the next day, e.g.: end of day today
    -- SET @EndDate = cast(cast(dateadd(day, 1, @EndDate) AS DATE) AS DATETIME)
    SET @EndDate = Protech.dbo.EndOfDayDate(@EndDate)

    DECLARE @StartDateTimeOffset DATETIMEOFFSET = @StartDate at TIME zone @SystemTimeZoneInfo
        , @EndDateTimeOffset DATETIMEOFFSET = @EndDate at TIME zone @SystemTimeZoneInfo
    DECLARE @QueryStartDate DATETIMEOFFSET = DATEADD(DD, - 1, @StartDateTimeOffset)
    DECLARE @QueryEndDate DATETIMEOFFSET = DATEADD(DD, 1, @EndDateTimeOffset);

    WITH myAlarmRecIds
    AS (
        SELECT DISTINCT eml.AlarmRecId
        FROM Protech.dbo.Contacts AS C WITH (NOLOCK)
        INNER JOIN Protech.dbo.Demographics AS D WITH (NOLOCK) ON D.DemographicID = C.DemographicID
        INNER JOIN MTD_01.dbo.MTD_EmailMessages AS eml WITH (NOLOCK) ON eml.ContactDemoID = C.demographicID
        WHERE C.UserRecId = @lUserRecID
            AND isnull(DateSent, DateCreated) at TIME zone @SystemTimeZoneInfo BETWEEN @QueryStartDate
                AND @QueryEndDate
        )
        , myRptRecIdPairs
    AS (
        /* first mtd */
        SELECT alm.AlarmRecID firstAlarmRecID
            , almc.AlarmRecID AS clearAlarmRecId
            , v.RecID AS firstRptId
            , c.RecID AS clearRptId
            , 'Report_MTDPositions' AS sourceTable
        FROM myAlarmRecIds mar
        INNER JOIN MTD_01..MTD_Alarms alm ON mar.AlarmRecID = alm.AlarmRecID
        INNER JOIN Reporting..Report_MTDPositions AS V WITH (NOLOCK) ON alm.RuleID = v.RuleID
            AND alm.RuleStatus = v.RuleStatus
            AND alm.DemographicID = v.DemographicID
            AND alm.[TimeStamp] = v.[TimeStamp]
        INNER JOIN Reporting..Report_MTD_SummaryData AS S WITH (NOLOCK) ON S.StartRptRecID = V.RecID
        LEFT JOIN Reporting..Report_MTDPositions AS C WITH (NOLOCK) ON C.RecID = S.EndRptRecID
        LEFT JOIN MTD_01..MTD_Alarms AS almc WITH (NOLOCK) ON almc.RuleID = c.RuleID
            AND almc.RuleStatus = c.RuleStatus
            AND almc.DemographicID = c.DemographicID
            AND almc.[TimeStamp] = c.[TimeStamp]
        
        UNION
        
        /* clear mtd */
        SELECT alm.AlarmRecID AS firstAlarmRecID
            , almc.AlarmRecID AS clearAlarmRecId
            , v.RecID AS firstRptId
            , c.RecID AS clearRptId
            , 'Report_MTDPositions' AS sourceTable
        FROM myAlarmRecIds mar
        INNER JOIN MTD_01..MTD_Alarms almc ON mar.AlarmRecID = almc.AlarmRecID
        INNER JOIN Reporting..Report_MTDPositions AS c WITH (NOLOCK) ON almc.RuleID = c.RuleID
            AND almc.RuleStatus = c.RuleStatus
            AND almc.DemographicID = c.DemographicID
            AND almc.[TimeStamp] = c.[TimeStamp]
        INNER JOIN Reporting..Report_MTD_SummaryData AS S WITH (NOLOCK) ON S.EndRptRecID = c.RecID
        INNER JOIN Reporting..Report_MTDPositions AS v WITH (NOLOCK) ON v.RecID = S.StartRptRecID
        INNER JOIN MTD_01..MTD_Alarms alm ON alm.RuleID = v.RuleID
            AND alm.RuleStatus = v.RuleStatus
            AND alm.DemographicID = v.DemographicID
            AND alm.[TimeStamp] = v.[TimeStamp]
        
        UNION
        
        /* first em */
        SELECT alm.AlarmRecID firstAlarmRecID
            , almc.AlarmRecID AS clearAlarmRecId
            , v.RecID AS firstRptId
            , c.RecID AS clearRptId
            , 'Report_EM_Positions' AS sourceTable
        FROM myAlarmRecIds mar
        INNER JOIN MTD_01..MTD_Alarms alm ON mar.AlarmRecID = alm.AlarmRecID
        INNER JOIN Reporting..Report_EM_Positions AS V WITH (NOLOCK) ON alm.RuleID = v.RuleID
            AND alm.RuleStatus = v.RuleStatus
            AND alm.DemographicID = v.DemographicID
            AND alm.[TimeStamp] = v.[TimeStamp]
        INNER JOIN Reporting..Report_EM_SummaryData AS S WITH (NOLOCK) ON S.StartRptRecID = V.RecID
        LEFT JOIN Reporting..Report_EM_Positions AS C WITH (NOLOCK) ON C.RecID = S.EndRptRecID
        LEFT JOIN MTD_01..MTD_Alarms AS almc WITH (NOLOCK) ON almc.RuleID = c.RuleID
            AND almc.RuleStatus = c.RuleStatus
            AND almc.DemographicID = c.DemographicID
            AND almc.[TimeStamp] = c.[TimeStamp]
        
        UNION
        
        /* clear em */
        SELECT alm.AlarmRecID AS firstAlarmRecID
            , almc.AlarmRecID AS clearAlarmRecId
            , v.RecID AS firstRptId
            , c.RecID AS clearRptId
            , 'Report_EM_Positions' AS sourceTable
        FROM myAlarmRecIds mar
        INNER JOIN MTD_01..MTD_Alarms almc ON mar.AlarmRecID = almc.AlarmRecID
        INNER JOIN Reporting..Report_EM_Positions AS c WITH (NOLOCK) ON almc.RuleID = c.RuleID
            AND almc.RuleStatus = c.RuleStatus
            AND almc.DemographicID = c.DemographicID
            AND almc.[TimeStamp] = c.[TimeStamp]
        INNER JOIN Reporting..Report_EM_SummaryData AS S WITH (NOLOCK) ON S.EndRptRecID = c.RecID
        INNER JOIN Reporting..Report_EM_Positions AS v WITH (NOLOCK) ON v.RecID = S.StartRptRecID
        INNER JOIN MTD_01..MTD_Alarms alm ON alm.RuleID = v.RuleID
            AND alm.RuleStatus = v.RuleStatus
            AND alm.DemographicID = v.DemographicID
            AND alm.[TimeStamp] = v.[TimeStamp]
        )
        , allNotifications
    AS (
        SELECT 0 AS isClearNotification
            , CASE 
                WHEN mp.clearRptId IS NULL
                    THEN 0
                ELSE 1
                END AS hasAlarmCleared
            , mp.*
            , eml.*
        FROM myRptRecIdPairs mp
        INNER JOIN MTD_01.dbo.MTD_EmailMessages AS eml WITH (NOLOCK) ON mp.firstAlarmRecID = eml.AlarmRecId
        
        UNION ALL
        
        SELECT 1 AS isClearNotification
            , 1 AS hasAlarmCleared
            , mp.*
            , eml.*
        FROM myRptRecIdPairs mp
        INNER JOIN MTD_01.dbo.MTD_EmailMessages AS eml WITH (NOLOCK) ON mp.clearAlarmRecId = eml.AlarmRecId
        )
    SELECT mn.firstAlarmRecID AS AlarmRecId
        , isClearNotification
        , hasAlarmCleared AS AlarmCleared
        , CASE 
            WHEN [AcknowledgeStatus] = 'A'
                THEN 1
            ELSE 0
            END AS IsAcknowledged
        , [RuleName]
        , [OffenderDemoID]
        , [OffenderName]
        , [ActionType]
        , [ContactDemoID]
        , mn.ContactType
        , [ContactName]
        , [AcknowledgeStatus]
        --[DateSentLocal]
        , [DateSent] = [Protech].[dbo].[fn_GetLocalTime](isnull(DateSent, DateCreated) at TIME zone @SystemTimeZoneInfo at TIME zone 'utc', o.StandardTimeOffset, o.DaylightTimeOffset)
        , [TimeOfViolation]
        , [AcknowledgeId]
        , [AcknowledgeTime] = [Protech].[dbo].[fn_GetLocalTime]([AcknowledgeTime] at TIME zone @SystemTimeZoneInfo at TIME zone 'utc', o.StandardTimeOffset, o.DaylightTimeOffset)
        , D.StandardTimeOffset
        , O.StandardTimeOffset
        , IsEscalated = CASE 
            WHEN mn.AcknowledgeStatus IN (
                    'E' -- escalated
                    , 'M' -- escalated to monitoring center
                    --,'F' -- failed
                    --,'R' -- renotification
                    )
                THEN 1
            ELSE 0
            END
        , c.UserRecId
        , mn.[RuleStatus]
        , mn.AlarmRecId AS notificationSourceAlarmRecId
    FROM allNotifications mn
    INNER JOIN MTD_01..MTD_Alarms AS mtda ON mn.AlarmRecId = mtda.AlarmRecID
    INNER JOIN Protech.dbo.Contacts AS C WITH (NOLOCK) ON mn.ContactDemoID = c.DemographicID
    INNER JOIN Protech.dbo.Demographics d WITH (NOLOCK) ON d.DemographicID = mn.ContactDemoID
    INNER JOIN Protech.dbo.Demographics o WITH (NOLOCK) ON o.DemographicID = mn.OffenderDemoID
    WHERE isnull(DateSent, DateCreated) at TIME zone @SystemTimeZoneInfo BETWEEN @StartDateTimeOffset
            AND @EndDateTimeOffset
END
GO
/****** Object:  StoredProcedure [dbo].[RecompileAllProcedures_MTD_01]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[RecompileAllProcedures_MTD_01]
as
begin
    declare cur cursor for 
    (
        select quotename(s.name) + '.' + quotename(o.name) as procname
        from 
           sys.objects o
           inner join sys.schemas s on o.schema_id = s.schema_id
        where  o.[type] in ('P', 'FN', 'IF')
    );

    declare @procname sysname;

    open cur;
    fetch next from cur into @procname;
    while @@fetch_status=0 
    begin
        exec sp_recompile @procname;
        fetch next from cur into @procname;
    end;
    close cur;
    deallocate cur;
end;
GO
/****** Object:  StoredProcedure [dbo].[scram_GetLastOffenderPoint]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

----=============================================================================
---- Procedure Name: dbo.scram_GetLastOffenderPoint
---- Description...: Gets the last device point for offender.  Used to determine if last point is a first violation and may need to be cleared.
---- Author........: John Merritt
---- Date Created..: 06/02/2022
---------------------------------------------------------------------------------
---- Revisions
----	06/02/2022 - JMM - Initial procedure created.
---- 08/4/2025 -UO Added local varaible for Parameter sniffing and WITH RECOMPILE
----=============================================================================
CREATE     PROCEDURE [dbo].[scram_GetLastOffenderPoint]
 
@DeviceID int, 
@DemographicID int 
WITH RECOMPILE
--@DeviceID int =1429297,
--@DemographicID int =286007540
AS
BEGIN
SET NOCOUNT ON
-- local variables
DECLARE @l_deviceID int = @DeviceID,
        @l_DemographicID int = @DemographicID


DECLARE @RS_FIRST_VIOLATION int = 16

SELECT P.DemographicID, P.DeviceID, P.TimeStamp, RIA.RuleID, RIA.HWRule, HwRuleBitIndex, RIA.RuleStatus
FROM MTD_01.dbo.MTD_LastPositions LP (NOLOCK)
JOIN MTD_01.dbo.MTD_Positions P (NOLOCK) ON P.PositionRecID = LP.PositionRecID
JOIN MTD_01.dbo.RulesInAlarm RIA (NOLOCK) ON RIA.PositionRecID = LP.PositionRecID
WHERE LP.DemographicID = @l_DemographicID
AND LP.DeviceID = @l_deviceID
AND RIA.RuleStatus & @RS_FIRST_VIOLATION = @RS_FIRST_VIOLATION

END

GO
/****** Object:  StoredProcedure [dbo].[scram_LastPositionStatus_Select]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--=============================================================================
-- Procedure Name: scram_ScheduledTest_Insert
-- Description...: Last known status for device. Based on cam_LastPositionStatus_Select by Jeremy Nelson
-- Author........: John Merritt
-- Date Created..: 05-10-2022
-------------------------------------------------------------------------------
-- Revisions
--	05-10-2022 - JM - Initial procedure created.
--=============================================================================

CREATE   PROCEDURE [dbo].[scram_LastPositionStatus_Select]
@DeviceId int

AS
BEGIN
SET NOCOUNT ON
-- use this if we endup needing last battery level from an acohol test. For now assuming CAM will send battery with tamper as well
--Select top(1) p.DeviceStatus,
--			p.DeviceID,
--			p.DemographicID,
--			p.BatteryVoltage,
--			a.DeviceBattery
--	FROM MTD_LastPositions l (NOLOCK)
--	JOIN Protech..OffenderDevices o (NOLOCK) on l.DemographicID = o.DemographicID and l.DeviceID = o.DeviceID
--	JOIN MTD_Positions p (NOLOCK) on l.PositionRecID = p.PositionRecID
--	LEFT JOIN Alcohol..AlcoholTest a (NOLOCK) on a.DemographicID = o.DemographicID and a.DeviceID = o.DeviceID
--	WHERE l.DeviceID = @DeviceId
--	AND		o.UnassignmentDate IS NULL
--	AND		o.DeactivationDate IS NULL
--	order by a.AlcoholTestID

--using this for now without joining to alcohol test
Select p.DeviceStatus,
p.DeviceID,
p.DemographicID,
p.BatteryVoltage
FROM MTD_LastPositions l (NOLOCK)
JOIN Protech..OffenderDevices o on l.DemographicID = o.DemographicID and l.DeviceID = o.DeviceID
JOIN MTD_Positions p on l.PositionRecID = p.PositionRecID
WHERE l.DeviceID = @DeviceId
AND		o.UnassignmentDate IS NULL
AND		o.DeactivationDate IS NULL
END
GO
/****** Object:  StoredProcedure [dbo].[sms_FetchSMSMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sms_FetchSMSMessages] 
	@SMSMessageServiceHostName varchar(100),
	@ServiceStart datetime,
	@RetryFromDate datetime = NULL,
	@RetryToDate datetime = NULL,
	@QueuedMessages xml
AS
/*
-------------------------------------------------------------------------------
History
-------------------------------------------------------------------------------
11/16/2015 - JSC - Created
12/02/2015 - JSC - Modified the stored procedure to include the service start
						 time so that a recovery from a service restart could be
						 performed.
-------------------------------------------------------------------------------
*/
	DECLARE @SMSMessageServiceFetchDate datetime
	DECLARE @SMSMessageServiceBatchId uniqueidentifier

	--Use the date/time stamp value from the SQL Server instance to specify the
	--time when the selected SMS messages were identified for processing
	SET @SMSMessageServiceFetchDate = GETDATE()

	--Use a GUID to uniquely identify all of the messages in the batch retrieved
	--for processing.
	SET @SMSMessageServiceBatchId = newid()

	-- Mark the messages to be processed by the service.  Use a transaction to
	-- prevent two or more consumers of the stored procedure from retrieving
	-- the same SMS messages for processing.
	BEGIN TRANSACTION
	UPDATE MTD_SMSMessages SET
		SMSMessageServiceHostName = @SMSMessageServiceHostName,
		SMSMessageServiceFetchDate = @SMSMessageServiceFetchDate,
		SMSMessageServiceBatchId = @SMSMessageServiceBatchId
	WHERE
		RecId IN (
	SELECT 
		m.RecId
	FROM
		MTD_SMSMessages m
	WHERE
		(
			---------------------------------------------------------------------------- 
			-- New SMS Messages
			---------------------------------------------------------------------------- 
			(
				(ISNULL(m.SMSMessageServiceHostName,'NOT ASSIGNED') = 'NOT ASSIGNED') 
				AND
				(m.SMSMessageServiceFetchDate IS NULL) 
			) 
			---------------------------------------------------------------------------- 
			OR
			---------------------------------------------------------------------------- 
			-- Outage/Restart Recovery for Specified Service Instance
			---------------------------------------------------------------------------- 
			(
				(ISNULL(m.SMSMessageServiceHostName,'NOT ASSIGNED') = @SMSMessageServiceHostName) 
				AND
				(ISNULL(m.SMSMessageServiceFetchDate, GETDATE()) < @ServiceStart)
			)
			---------------------------------------------------------------------------- 
			OR
			---------------------------------------------------------------------------- 
			-- Outage/Restart Recovery for Other/Alternate Service Instances
			---------------------------------------------------------------------------- 
			(
				(ISNULL(m.SMSMessageServiceHostName,'NOT ASSIGNED') <> @SMSMessageServiceHostName) 
				AND
				(
					((@RetryToDate IS NOT NULL) AND (@RetryFromDate IS NULL) AND (ISNULL(m.SMSMessageServiceFetchDate, GETDATE()) <= @RetryToDate))
					OR 
					((@RetryToDate IS NULL) AND (@RetryFromDate IS NOT NULL) AND (ISNULL(m.SMSMessageServiceFetchDate, GETDATE()) >= @RetryFromDate))
					OR 
					((@RetryFromDate IS NOT NULL) AND (@RetryToDate IS NOT NULL) AND (m.SMSMessageServiceFetchDate BETWEEN @RetryFromDate AND @RetryToDate))
				)
			)
			---------------------------------------------------------------------------- 
		) 
		AND
		(m.ReplyTime IS NULL)
		AND
		(ISNULL(m.SendMethod,'') IN ('M','E'))
		AND
		(m.CompletedSend IS NULL)
	)
	COMMIT TRANSACTION

	--Return the marked messages to the consumer of the stored procedure
	SELECT 
		m.RecID,
		m.DeviceID,
		m.Action,
		m.Parameter,
		m.PhoneNumber,
		m.Gateway,
		m.CreateGMT,
		m.CreateTime,
		m.SendTime,
		m.ReplyTime,
		m.APN,
		m.NetworkUserId,
		m.NetworkPassword,
		m.SendMethod,
		m.EncryptType,
		m.MessageType,
		m.IPAddress,
		m.Port,
		m.CSD,
		m.LL,
		m.DemographicId,
		m.EmailFormat,
		m.SMSMessageServiceFetchDate,
		m.SMSMessageServiceBatchId,
		m.SMSMessageServiceHostName,
		m.DispatchAttempts,
		m.SendAttempts,
		m.[Status],
		m.StartedSend,
		m.CompletedSend,
		m.Response,
		m.ExceptionMessage,
		m.QueuedDate
	FROM 
		MTD_SMSMessages m (nolock)
	WHERE 
		SMSMessageServiceBatchId = @SMSMessageServiceBatchId

	--Retrieve the list of messages to remove from the queue
	
	--@QueuedMessages is a list of SMSMessageId values that are in the queue
	--for the specified service instance.  Query the database to determine
	--if any of the messages need to be removed from the queue.

	SELECT
		m.RecID as RecID,
		CASE 
			WHEN m.ReplyTime IS NOT NULL THEN 1
			WHEN m.SMSMessageServiceHostName <> @SMSMessageServiceHostName THEN 2
		END as RemovalReason,
		m.ReplyTime as ReplyTime,
		m.SMSMessageServiceHostName as SMSMessageServiceHostName
	FROM
		MTD_SMSMessages m (nolock)
	WHERE
		m.RecID IN (SELECT x.v.value('RecID[1]', 'int') FROM  @QueuedMessages.nodes('/SMSMessageMementos/SMSMessageMemento') x(v))
		AND 
		((m.ReplyTime IS NOT NULL)
		OR
		(m.SMSMessageServiceHostName <> @SMSMessageServiceHostName))
GO
/****** Object:  StoredProcedure [dbo].[sms_FetchSMSMessages_002]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [dbo].[sms_FetchSMSMessages_002] 
	@SMSMessageServiceHostName varchar(100),
	@ServiceStart datetime,
	@RetryFromDate datetime = NULL,
	@RetryToDate datetime = NULL
AS
/*
-------------------------------------------------------------------------------
History
-------------------------------------------------------------------------------
11/16/2015 - JSC - Created
12/02/2015 - JSC - Modified the stored procedure to include the service start
						 time so that a recovery from a service restart could be
						 performed.
-------------------------------------------------------------------------------
*/
	DECLARE @SMSMessageServiceFetchDate datetime
	DECLARE @SMSMessageServiceBatchId uniqueidentifier

	--Use the date/time stamp value from the SQL Server instance to specify the
	--time when the selected SMS messages were identified for processing
	SET @SMSMessageServiceFetchDate = GETDATE()

	--Use a GUID to uniquely identify all of the messages in the batch retrieved
	--for processing.
	SET @SMSMessageServiceBatchId = newid()

	-- Mark the messages to be processed by the service.  Use a transtion to
	-- prevent two or more consumers of the stored procedure from retrieving
	-- the one or more of the same SMS messages for processing.
	BEGIN TRANSACTION
	UPDATE MTD_SMSMessages SET
		SMSMessageServiceHostName = @SMSMessageServiceHostName,
		SMSMessageServiceFetchDate = @SMSMessageServiceFetchDate,
		SMSMessageServiceBatchId = @SMSMessageServiceBatchId
	WHERE
		RecId IN (
	SELECT 
		m.RecId
	FROM
		MTD_SMSMessages m
	WHERE
		(
			---------------------------------------------------------------------------- 
			-- New SMS Messages
			---------------------------------------------------------------------------- 
			(
				(ISNULL(m.SMSMessageServiceHostName,'NOT ASSIGNED') = 'NOT ASSIGNED') 
				AND
				(m.SMSMessageServiceFetchDate IS NULL) 
			) 
			---------------------------------------------------------------------------- 
			OR
			---------------------------------------------------------------------------- 
			-- Outage/Restart Recovery for Specified Service Instance
			---------------------------------------------------------------------------- 
			(
				(ISNULL(m.SMSMessageServiceHostName,'NOT ASSIGNED') = @SMSMessageServiceHostName) 
				AND
				(ISNULL(m.SMSMessageServiceFetchDate, GETDATE()) < @ServiceStart)
			)
			---------------------------------------------------------------------------- 
			OR
			---------------------------------------------------------------------------- 
			-- Outage/Restart Recovery for Other/Alternate Service Instances
			---------------------------------------------------------------------------- 
			(
				(ISNULL(m.SMSMessageServiceHostName,'NOT ASSIGNED') <> @SMSMessageServiceHostName) 
				AND
				(
					((@RetryToDate IS NOT NULL) AND (@RetryFromDate IS NULL) AND (ISNULL(m.SMSMessageServiceFetchDate, GETDATE()) <= @RetryToDate))
					OR 
					((@RetryToDate IS NULL) AND (@RetryFromDate IS NOT NULL) AND (ISNULL(m.SMSMessageServiceFetchDate, GETDATE()) >= @RetryFromDate))
					OR 
					((@RetryFromDate IS NOT NULL) AND (@RetryToDate IS NOT NULL) AND (m.SMSMessageServiceFetchDate BETWEEN @RetryFromDate AND @RetryToDate))
				)
			)
			---------------------------------------------------------------------------- 
		) 
		AND
		(m.ReplyTime IS NULL)
		AND
		(m.SendMethod = 'M')
		AND
		(m.CompletedSend IS NULL)
	)
	COMMIT TRANSACTION

	--Return the marked messages to the consumer of the stored procedure
	SELECT 
		m.RecID,
		m.DeviceID,
		m.Action,
		LTRIM(RTRIM(m.Parameter)) AS Parameter,
		LTRIM(RTRIM(m.PhoneNumber)) AS PhoneNumber,
		m.Gateway,
		m.CreateGMT,
		m.CreateTime,
		m.SendTime,
		m.ReplyTime,
		m.APN,
		m.NetworkUserId,
		m.NetworkPassword,
		m.SendMethod,
		m.EncryptType,
		m.MessageType,
		m.IPAddress,
		m.Port,
		m.CSD,
		m.LL,
		m.DemographicId,
		m.EmailFormat,
		m.SMSMessageServiceFetchDate,
		m.SMSMessageServiceBatchId,
		m.SMSMessageServiceHostName,
		m.DispatchAttempts,
		m.SendAttempts,
		m.[Status],
		m.StartedSend,
		m.CompletedSend,
		m.Response,
		m.ExceptionMessage,
		m.QueuedDate
	FROM 
		MTD_SMSMessages m
	WHERE 
		SMSMessageServiceBatchId = @SMSMessageServiceBatchId
GO
/****** Object:  StoredProcedure [dbo].[sms_FetchSMSMessages_002v2]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE   PROCEDURE [dbo].[sms_FetchSMSMessages_002v2] 
	@SMSMessageServiceHostName varchar(100),
	@ServiceStart datetime,
	@RetryFromDate datetime = NULL,
	@RetryToDate datetime = NULL
AS
/*
-------------------------------------------------------------------------------
History
-------------------------------------------------------------------------------
11/16/2015 - JSC - Created
12/02/2015 - JSC - Modified the stored procedure to include the service start
						 time so that a recovery from a service restart could be
						 performed.
-------------------------------------------------------------------------------
*/
	DECLARE @SMSMessageServiceFetchDate datetime
	DECLARE @SMSMessageServiceBatchId uniqueidentifier

--Introduce Local variables to avoid parameter sniffing
  DECLARE @l_SMSMessageServiceHostName varchar(100) = @SMSMessageServiceHostName
  DECLARE @l_ServiceStart datetime = @ServiceStart
  DECLARE @l_RetryFromDate datetime = @RetryFromDate
  DECLARE @l_RetryToDate datetime = @RetryToDate 



	--Use the date/time stamp value from the SQL Server instance to specify the
	--time when the selected SMS messages were identified for processing
	SET @SMSMessageServiceFetchDate = GETDATE()

	--Use a GUID to uniquely identify all of the messages in the batch retrieved
	--for processing.
	SET @SMSMessageServiceBatchId = newid()

	-- Mark the messages to be processed by the service.  Use a transtion to
	-- prevent two or more consumers of the stored procedure from retrieving
	-- the one or more of the same SMS messages for processing.
	BEGIN TRANSACTION
	UPDATE MTD_SMSMessages SET
		SMSMessageServiceHostName = @l_SMSMessageServiceHostName,
		SMSMessageServiceFetchDate = @SMSMessageServiceFetchDate,
		SMSMessageServiceBatchId = @SMSMessageServiceBatchId
	WHERE
		RecId IN (
	SELECT 
		m.RecId
	FROM
		MTD_SMSMessages m (NOLOCK)
	WHERE
		(
			---------------------------------------------------------------------------- 
			-- New SMS Messages
			---------------------------------------------------------------------------- 
			(
				(ISNULL(m.SMSMessageServiceHostName,'NOT ASSIGNED') = 'NOT ASSIGNED') 
				AND
				(m.SMSMessageServiceFetchDate IS NULL) 
			) 
			---------------------------------------------------------------------------- 
			OR
			---------------------------------------------------------------------------- 
			-- Outage/Restart Recovery for Specified Service Instance
			---------------------------------------------------------------------------- 
			(
				(ISNULL(m.SMSMessageServiceHostName,'NOT ASSIGNED') = @l_SMSMessageServiceHostName) 
				AND
				(ISNULL(m.SMSMessageServiceFetchDate, GETDATE()) < @l_ServiceStart)
			)
			---------------------------------------------------------------------------- 
			OR
			---------------------------------------------------------------------------- 
			-- Outage/Restart Recovery for Other/Alternate Service Instances
			---------------------------------------------------------------------------- 
			(
				(ISNULL(m.SMSMessageServiceHostName,'NOT ASSIGNED') <> @l_SMSMessageServiceHostName) 
				AND
				(
					((@l_RetryToDate IS NOT NULL) AND (@l_RetryFromDate IS NULL) AND (ISNULL(m.SMSMessageServiceFetchDate, GETDATE()) <= @l_RetryToDate))
					OR 
					((@l_RetryToDate IS NULL) AND (@l_RetryFromDate IS NOT NULL) AND (ISNULL(m.SMSMessageServiceFetchDate, GETDATE()) >= @RetryFromDate))
					OR 
					((@l_RetryFromDate IS NOT NULL) AND (@l_RetryToDate IS NOT NULL) AND (m.SMSMessageServiceFetchDate BETWEEN @RetryFromDate AND @l_RetryToDate))
				)
			)
			---------------------------------------------------------------------------- 
		) 
		AND
		(m.ReplyTime IS NULL)
		AND
		(m.SendMethod = 'M')
		AND
		(m.CompletedSend IS NULL)
	)
	COMMIT TRANSACTION

	--Return the marked messages to the consumer of the stored procedure
	SELECT 
		m.RecID,
		m.DeviceID,
		m.Action,
		LTRIM(RTRIM(m.Parameter)) AS Parameter,
		LTRIM(RTRIM(m.PhoneNumber)) AS PhoneNumber,
		m.Gateway,
		m.CreateGMT,
		m.CreateTime,
		m.SendTime,
		m.ReplyTime,
		m.APN,
		m.NetworkUserId,
		m.NetworkPassword,
		m.SendMethod,
		m.EncryptType,
		m.MessageType,
		m.IPAddress,
		m.Port,
		m.CSD,
		m.LL,
		m.DemographicId,
		m.EmailFormat,
		m.SMSMessageServiceFetchDate,
		m.SMSMessageServiceBatchId,
		m.SMSMessageServiceHostName,
		m.DispatchAttempts,
		m.SendAttempts,
		m.[Status],
		m.StartedSend,
		m.CompletedSend,
		m.Response,
		m.ExceptionMessage,
		m.QueuedDate
	FROM 
		MTD_SMSMessages m WITH(NOLOCK)
	WHERE 
		SMSMessageServiceBatchId = @SMSMessageServiceBatchId
GO
/****** Object:  StoredProcedure [dbo].[sms_ResetSMSMessages_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [dbo].[sms_ResetSMSMessages_DEL] 
	@RecIDs varchar(MAX)
AS
	UPDATE MTD_SMSMessages SET
		SendTime = NULL,
		ReplyTime = NULL,
		SMSMessageServiceHostName = NULL,
		SMSMessageServiceFetchDate = NULL,
		SMSMessageServiceBatchId =NULL,
		CompletedSend = NULL
	WHERE
		RecId IN (SELECT CAST(Value as int) FROM dbo.Split(@RecIDs, ','))
GO
/****** Object:  StoredProcedure [dbo].[sms_SaveSMSMessageStatus]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [dbo].[sms_SaveSMSMessageStatus] 
	@RecID INT,
	@DispatchAttempts int,
	@SendAttempts int,
	@Status varchar(100),
	@StartedSend datetime = NULL,
	@CompletedSend datetime = NULL,
	@ResponseXML xml = NULL,
	@ExceptionMessage varchar(MAX) = NULL,
	@QueuedDate datetime = NULL
AS
	SET NOCOUNT ON

	UPDATE MTD_SMSMessages SET
		SendTime = @StartedSend,
		DispatchAttempts = @DispatchAttempts,
		SendAttempts = @SendAttempts,
		[Status] = @Status,
		StartedSend = @StartedSend,
		CompletedSend = @CompletedSend,
		ResponseXML = @ResponseXML,
		ExceptionMessage = @ExceptionMessage,
		QueuedDate = @QueuedDate
	WHERE 
		RecID = @RecID

GO
/****** Object:  StoredProcedure [dbo].[sms_SaveSMSMessageStatus_002]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO




CREATE PROCEDURE [dbo].[sms_SaveSMSMessageStatus_002] 
	@RecID INT,
	@DispatchAttempts int,
	@SendAttempts int,
	@Status varchar(100),
	@StartedSend datetime = NULL,
	@CompletedSend datetime = NULL,
	@ResponseXML xml = NULL,
	@ExceptionMessage varchar(MAX) = NULL,
	@QueuedDate datetime = NULL
AS
	SET NOCOUNT ON

	UPDATE MTD_SMSMessages SET
		SendTime = @StartedSend,
		DispatchAttempts = @DispatchAttempts,
		SendAttempts = @SendAttempts,
		[Status] = @Status,
		StartedSend = @StartedSend,
		CompletedSend = @CompletedSend,
		ResponseXML = @ResponseXML,
		ExceptionMessage = @ExceptionMessage,
		QueuedDate = @QueuedDate,
		ReplyTime = CASE WHEN [Action] = 2 THEN @CompletedSend ELSE ReplyTime END 
	WHERE 
		RecID = @RecID

GO
/****** Object:  StoredProcedure [dbo].[SMSCarrierMessages_Insert]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
--      Author: UO
-- Create date: 6/15/2021
-- Description: Insert into [dbo].[SMSCarrierMessages]
--  Unit Tests:
-- =============================================
CREATE   PROC [dbo].[SMSCarrierMessages_Insert]
    @DeviceID [int] ,
	@Parameter [varchar](64) ,
	@PhoneNumber [varchar](16) ,
	@RequestId [varchar](100) ,
	@DateTimeUTC [datetime] ,
	@Status [varchar](20) ,
	@Message [varchar](100),
	@MTD_SMSMessagesRecID INT,
	@CallbackIntervalSeconds INT

AS
BEGIN
SET NOCOUNT ON;
INSERT INTO [dbo].[SMSCarrierMessages]
(
	[DeviceID] ,
	[Parameter] ,
	[PhoneNumber] ,
	[RequestId] ,
	[DateTimeUTC] ,
	[Status] ,
	[Message],
	[MTD_SMSMessagesRecID],
	[CallbackIntervalSeconds]
)
VALUES
(
	@DeviceID ,
	@Parameter ,
	@PhoneNumber ,
	@RequestId ,
	@DateTimeUTC ,
	@Status ,
	@Message,
	@MTD_SMSMessagesRecID,
	@CallbackIntervalSeconds
);


END
GO
/****** Object:  StoredProcedure [dbo].[sndcds_CancelAllCL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Ulises Sala
-- Create date: 3/9/11
-- Description:	Cancel all pending Code Load 
--              from the SendCodes application
-- =============================================
CREATE PROCEDURE [dbo].[sndcds_CancelAllCL]
AS
	SET NOCOUNT ON;
	
	DECLARE @MEMSDCUDevices TABLE (
		DeviceID int
	)

	INSERT INTO @MEMSDCUDevices (
		DeviceID
	)
	SELECT
		DeviceID
	FROM
		MTDActions act
		INNER JOIN Protech.dbo.Assemblies a
			ON act.DeviceID = a.AssemblyRecID
	WHERE
		a.HardwareTypeRecID IN (110,111) AND
		act.CommandNumber = 14 AND
		act.ActionInProgress <> 'Y'

	UPDATE dbo.MTDActions SET 
		ActionInProgress ='Y' 
	WHERE 
		CommandNumber = 14 AND
		ActionInProgress <> 'Y'

	UPDATE Protech.dbo.DCCRequests SET
		FirmwareUpgrade = 0, 
		UploadNow = 1
	WHERE
		DeviceID IN (SELECT DeviceID FROM @MEMSDCUDevices) AND	
		DeviceConfirmedTimestamp = NULL
GO
/****** Object:  StoredProcedure [dbo].[SndCds_CancelDeviceCL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Ulises Sala
-- Create date: 3/9/11
-- Description:	Cancel a device's pending Code Load 
--              from the SendCodes application
-- =============================================
CREATE PROCEDURE [dbo].[SndCds_CancelDeviceCL]
	-- Add the parameters for the stored procedure here
	@DeviceID  int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	update dbo.MTDActions set ActionInProgress ='Y' 
	where DeviceID = @DeviceID
	and CommandNumber = 14
END
GO
/****** Object:  StoredProcedure [dbo].[SndCds_CancelDevTypeCLoad]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Ulises Sala
-- Create date: 3/9/11
-- Description:	Cancel all pending Code Load 
--              from the SendCodes application
--              by device number range
-- =============================================
CREATE PROCEDURE [dbo].[SndCds_CancelDevTypeCLoad]
	-- Add the parameters for the stored procedure here
	@DeviceID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--MTD's DeviceID range
	declare @MtdLow int = 33000000
	declare @MtdHigh int = 33999999

	--MCS's and SmartBases DeviceID range
	declare @McsLow int = 50000000
	declare @McsHigh int = 54999999

	--WMTD's DeviceID range
	declare @WmtdLow int = 34000000
	declare @WmtdHigh int = 34999999
	
	--XT's DeviceID range
	declare @XtLow int = 35000000
	declare @XtHigh int = 35999999
	-------------------------------------------------------

    --MTD's DeviceID range
	IF ( @DeviceID >= @MtdLow and @DeviceID <= @MtdHigh )
	BEGIN
		-- Insert statements for procedure here
		update dbo.MTDActions set ActionInProgress ='N' 
		where ( DeviceID >= @MtdLow and DeviceID <= @MtdHigh )  
		and CommandNumber = 14
	END
	
	--MCS's and SmartBases DeviceID range
	IF ( @DeviceID >= @McsLow and @DeviceID <= @McsHigh )
	BEGIN
		-- Insert statements for procedure here
		update dbo.MTDActions set ActionInProgress ='N' 
		where ( DeviceID >= @McsLow and DeviceID <= @McsHigh )  
		and CommandNumber = 14
	END
	
	--WMTD's DeviceID range
	IF ( @DeviceID >= @WmtdLow and @DeviceID <= @WmtdHigh )
	BEGIN
		-- Insert statements for procedure here
		update dbo.MTDActions set ActionInProgress ='N' 
		where ( DeviceID >= @WmtdHigh and DeviceID <= @WmtdHigh )  
		and CommandNumber = 14
	END
	
	--XT's DeviceID range
	IF ( @DeviceID >= @XtLow and @DeviceID <= @XtHigh )
	BEGIN
		-- Insert statements for procedure here
		update dbo.MTDActions set ActionInProgress ='N' 
		where ( DeviceID >= @XtLow and DeviceID <= @XtHigh )  
		and CommandNumber = 14
	END

END

GO
/****** Object:  StoredProcedure [dbo].[sp_AutomatedCallBack_SMSRespsonseTimeTesting]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[sp_AutomatedCallBack_SMSRespsonseTimeTesting]
AS
/*
===============================================================================
Date Created: 01/20/2020
Developer: Scott Cupstid
-------------------------------------------------------------------------------
This stored procedure has been created to test the SMS message response time 
for devices. The stored procedure depends upon one control table...

	- AutomatedCallBackDevices - the devices to test

The stored procedure will only create SMS messages for the test devices in
the control table that have a TestSMSMessageId = NULL if the device has called
within the last 30 seconds.  To reset the test devices, run the following SQL
statement...

UPDATE AutomatedCallBackDevices SET SMSMessageId = NULL

===============================================================================
*/

	DECLARE @DeviceID int = 0,
			@Action smallint = 1,
			@Parameter varchar(64) = 'CALLSDC',
			@PhoneNumber varchar(16) = '',
			@Gateway varchar(64) = 'vtext.com', 
			@CreateGmt datetime = GETUTCDATE(),
			@CreateTime datetime = GETDATE(),
			@SendMethod char(1) = 'M',
			@DemographicID int = 0,
			@EmailFormat char(1) = 'N',
			@DevicesId int = 0,
			@MaxDevicesId int = 0,
			@PceAuditUserRecId int = 0,
			@SMSMessageId bigint = 0

	--Get the user id to use when recording the PceAudit row
	SELECT
		@PceAuditUserRecId = u.UserRecID
	FROM	
		Protech.dbo.[Users] u (NOLOCK)
	WHERE
		u.FirstName = 'SQL JOB'

	--Update the demographic ID values for the test devices where a 
	--SMS message has not been created
	UPDATE dbo.AutomatedCallBackDevices SET	
		DemographicId = od.DemographicID
	FROM
		dbo.AutomatedCallBackDevices d
		INNER JOIN Protech.dbo.OffenderDevices od (NOLOCK)
			ON d.DeviceId = od.DeviceID AND
				od.AssignmentDate IS NOT NULL AND
				od.ActivationDate IS NOT NULL AND
				od.UnassignmentDate IS NULL AND
				od.DeactivationDate IS NULL
	WHERE
		SMSMessageId IS NULL

	--Make sure there are no open SMS messages for any of the devices
	UPDATE dbo.AutomatedCallBackDevices SET	
		SMSMessageId = s.RecID
	FROM
		dbo.AutomatedCallBackDevices d (NOLOCK)
		INNER JOIN dbo.MTD_SMSMessages s (NOLOCK)
			ON s.DeviceID = s.DeviceID AND
				d.DemographicId = s.DemographicId AND
				s.ReplyTime IS NULL

	--Create the loop control table
	DECLARE @Devices TABLE (
		Id int IDENTITY(1,1),
		DeviceId int,
		DemographicId int,
		PhoneNumber varchar(16),
		TestSMSMessageId int
	)

	--Load the loop control table
	INSERT INTO @Devices (
		DeviceId,
		DemographicId,
		PhoneNumber
	)
	SELECT
		acbd.DeviceId,
		acbd.DemographicID,
		msi.PhoneNumber
	FROM 
		MTD_01.dbo.AutomatedCallBackDevices acbd (NOLOCK)
		INNER JOIN Protech.dbo.SubAssemblies sass (NOLOCK)
			ON sass.AssyDeviceRecId = acbd.DeviceID AND
				sass.TypeRecID = 6 --Only need the SIM modem subassembly for the device
		INNER JOIN Protech.dbo.ModemSimIds msi (NOLOCK)
			ON msi.AssignedDeviceId = sass.SubAssemblyRecID
		INNER JOIN MTD_01.dbo.DeviceCallsLastNormal dcln (NOLOCK)
			ON dcln.DeviceID = acbd.DeviceID AND
				dcln.DemoGraphicID = acbd.DemographicID
	WHERE
		--Any of the test devices that called in the last 30 seconds
		--(ISNULL(dcln.StartTime, GETDATE()) > DATEADD(SECOND,-30,GETDATE())) AND 
		--Any of the devices that have not already been handled
		acbd.SMSMessageId IS NULL AND
		acbd.DemographicID IS NOT NULL
	ORDER BY 
		acbd.DeviceID

	--Get the maximum id value from the loop control table
	SELECT @MaxDevicesId = MAX(Id) FROM @Devices

	--Starting with the first loop control table row, create the test SMS messages
	SET @DevicesId = 1
	WHILE (@DevicesId <= @MaxDevicesId)
	BEGIN
		SELECT
			@DeviceID = d.DeviceID,
			@PhoneNumber = d.PhoneNumber,
			@CreateGmt = GETUTCDATE(),
			@CreateTime = GETDATE(),
			@DemographicID = d.DemographicId
		FROM
			@Devices d
		WHERE
			d.Id = @DevicesId

		BEGIN TRANSACTION
		BEGIN TRY
			INSERT INTO MTD_01.dbo.MTD_SMSMessages (
				DeviceID,
				[Action],
				Parameter,
				PhoneNumber,
				Gateway,
				CreateGmt,
				CreateTime,
				SendMethod,
				DemographicID,
				EmailFormat
			) VALUES (
				@DeviceID,
				@Action,
				@Parameter,
				@PhoneNumber,
				@Gateway,
				@CreateGmt,
				@CreateTime,
				@SendMethod,
				@DemographicID,
				@EmailFormat
			)

			--Get the new SMS message id to use when updating the control table
			--and witing the PceAudit row
			SELECT @SMSMessageId = SCOPE_IDENTITY()

			--Update the control table
			UPDATE dbo.AutomatedCallBackDevices SET
				SMSMessageId = @SMSMessageId
			WHERE
				DeviceId = @DeviceID

			--Create the PceAudit row
			INSERT INTO Protech.dbo.PceAudit (
				UserRecID,
				[TimeStamp],
				TableName,
				EventType,
				DemographicID,
				TableRecID,
				[Message],
				SmartView,
				[Application]
			) VALUES (
				@PceAuditUserRecId,
				GETDATE(),
				'MTD_SMSMessages',
				'ADDNEW',
				@DemographicID,
				@SMSMessageId,
				'Create SMS Message: ' + CAST(@DeviceId as varchar(10)) + ', 1, CALLSDC',
				NULL,
				NULL
			)

			COMMIT TRANSACTION
		END TRY
		BEGIN CATCH
			ROLLBACK TRANSACTION
		END CATCH

		SET @DevicesId = @DevicesId + 1
	END
GO
/****** Object:  StoredProcedure [dbo].[sp_AutomatedCallBack_SMSRespsonseTimeTesting_Reset]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[sp_AutomatedCallBack_SMSRespsonseTimeTesting_Reset]
AS
/*
===============================================================================
Date Created: 01/20/2020
Developer: Scott Cupstid
-------------------------------------------------------------------------------
This stored procedure has been created to reset the testing of the SMS message 
response time for devices. The stored procedure depends upon one control 
table...

	- AutomatedCallBackDevices - the devices to test

===============================================================================
*/
	UPDATE AutomatedCallBackDevices SET 
		SMSMessageId = NULL,
		DemographicID = NULL
GO
/****** Object:  StoredProcedure [dbo].[sp_BlitzIndex]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_BlitzIndex]
    @DatabaseName NVARCHAR(128) = NULL, /*Defaults to current DB if not specified*/
    @SchemaName NVARCHAR(128) = NULL, /*Requires table_name as well.*/
    @TableName NVARCHAR(128) = NULL,  /*Requires schema_name as well.*/
    @Mode TINYINT=0, /*0=Diagnose, 1=Summarize, 2=Index Usage Detail, 3=Missing Index Detail, 4=Diagnose Details*/
        /*Note:@Mode doesn't matter if you're specifying schema_name and @TableName.*/
    @Filter TINYINT = 0, /* 0=no filter (default). 1=No low-usage warnings for objects with 0 reads. 2=Only warn for objects >= 500MB */
        /*Note:@Filter doesn't do anything unless @Mode=0*/
    @SkipPartitions BIT	= 0,
    @SkipStatistics BIT	= 1,
    @GetAllDatabases BIT = 0,
    @BringThePain BIT = 0,
    @IgnoreDatabases NVARCHAR(MAX) = NULL, /* Comma-delimited list of databases you want to skip */
    @ThresholdMB INT = 250 /* Number of megabytes that an object must be before we include it in basic results */,
	@OutputType VARCHAR(20) = 'TABLE' ,
    @OutputServerName NVARCHAR(256) = NULL ,
    @OutputDatabaseName NVARCHAR(256) = NULL ,
    @OutputSchemaName NVARCHAR(256) = NULL ,
    @OutputTableName NVARCHAR(256) = NULL ,
    @Help TINYINT = 0,
	@Debug BIT = 0,
    @Version     VARCHAR(30) = NULL OUTPUT,
	@VersionDate DATETIME = NULL OUTPUT,
    @VersionCheckMode BIT = 0
WITH RECOMPILE
AS
SET NOCOUNT ON;
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

SELECT @Version = '7.92', @VersionDate = '20200123';
SET @OutputType  = UPPER(@OutputType);

IF(@VersionCheckMode = 1)
BEGIN
	RETURN;
END;

IF @Help = 1 PRINT '
/*
sp_BlitzIndex from http://FirstResponderKit.org
	
This script analyzes the design and performance of your indexes.

To learn more, visit http://FirstResponderKit.org where you can download new
versions for free, watch training videos on how it works, get more info on
the findings, contribute your own code, and more.

Known limitations of this version:
 - Only Microsoft-supported versions of SQL Server. Sorry, 2005 and 2000.
 - The @OutputDatabaseName parameters are not functional yet. To check the
   status of this enhancement request, visit:
   https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/issues/221
 - Does not analyze columnstore, spatial, XML, or full text indexes. If you
   would like to contribute code to analyze those, head over to Github and
   check out the issues list: http://FirstResponderKit.org
 - Index create statements are just to give you a rough idea of the syntax. It includes filters and fillfactor.
 --        Example 1: index creates use ONLINE=? instead of ONLINE=ON / ONLINE=OFF. This is because it is important 
           for the user to understand if it is going to be offline and not just run a script.
 --        Example 2: they do not include all the options the index may have been created with (padding, compression
           filegroup/partition scheme etc.)
 --        (The compression and filegroup index create syntax is not trivial because it is set at the partition 
           level and is not trivial to code.)
 - Does not advise you about data modeling for clustered indexes and primary keys (primarily looks for signs of insanity.)

Unknown limitations of this version:
 - We knew them once, but we forgot.


MIT License

Copyright (c) 2020 Brent Ozar Unlimited

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
';


DECLARE @ScriptVersionName NVARCHAR(50);
DECLARE @DaysUptime NUMERIC(23,2);
DECLARE @DatabaseID INT;
DECLARE @ObjectID INT;
DECLARE @dsql NVARCHAR(MAX);
DECLARE @params NVARCHAR(MAX);
DECLARE @msg NVARCHAR(4000);
DECLARE @ErrorSeverity INT;
DECLARE @ErrorState INT;
DECLARE @Rowcount BIGINT;
DECLARE @SQLServerProductVersion NVARCHAR(128);
DECLARE @SQLServerEdition INT;
DECLARE @FilterMB INT;
DECLARE @collation NVARCHAR(256);
DECLARE @NumDatabases INT;
DECLARE @LineFeed NVARCHAR(5);
DECLARE @DaysUptimeInsertValue NVARCHAR(256);
DECLARE @DatabaseToIgnore NVARCHAR(MAX);

SET @LineFeed = CHAR(13) + CHAR(10);
SELECT @SQLServerProductVersion = CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128));
SELECT @SQLServerEdition =CAST(SERVERPROPERTY('EngineEdition') AS INT); /* We default to online index creates where EngineEdition=3*/
SET @FilterMB=250;
SELECT @ScriptVersionName = 'sp_BlitzIndex(TM) v' + @Version + ' - ' + DATENAME(MM, @VersionDate) + ' ' + RIGHT('0'+DATENAME(DD, @VersionDate),2) + ', ' + DATENAME(YY, @VersionDate);
SET @IgnoreDatabases = REPLACE(REPLACE(LTRIM(RTRIM(@IgnoreDatabases)), CHAR(10), ''), CHAR(13), '');

RAISERROR(N'Starting run. %s', 0,1, @ScriptVersionName) WITH NOWAIT;
																					
IF(@OutputType NOT IN ('TABLE','NONE'))
BEGIN
    RAISERROR('Invalid value for parameter @OutputType. Expected: (TABLE;NONE)',12,1);
    RETURN;
END;
                       
IF(@OutputType = 'NONE')
BEGIN
    IF(@OutputTableName IS NULL OR @OutputSchemaName IS NULL OR @OutputDatabaseName IS NULL)
    BEGIN
        RAISERROR('This procedure should be called with a value for @Output* parameters, as @OutputType is set to NONE',12,1);
        RETURN;
    END;
    IF(@BringThePain = 1)
    BEGIN
        RAISERROR('Incompatible Parameters: @BringThePain set to 1 and @OutputType set to NONE',12,1);
        RETURN;
    END;
	/* Eventually limit by mode																			   
    IF(@Mode not in (0,4)) 
	BEGIN
        RAISERROR('Incompatible Parameters: @Mode set to %d and @OutputType set to NONE',12,1,@Mode);
        RETURN;
	END;
	*/
END;

IF OBJECT_ID('tempdb..#IndexSanity') IS NOT NULL 
    DROP TABLE #IndexSanity;

IF OBJECT_ID('tempdb..#IndexPartitionSanity') IS NOT NULL 
    DROP TABLE #IndexPartitionSanity;

IF OBJECT_ID('tempdb..#IndexSanitySize') IS NOT NULL 
    DROP TABLE #IndexSanitySize;

IF OBJECT_ID('tempdb..#IndexColumns') IS NOT NULL 
    DROP TABLE #IndexColumns;

IF OBJECT_ID('tempdb..#MissingIndexes') IS NOT NULL 
    DROP TABLE #MissingIndexes;

IF OBJECT_ID('tempdb..#ForeignKeys') IS NOT NULL 
    DROP TABLE #ForeignKeys;

IF OBJECT_ID('tempdb..#BlitzIndexResults') IS NOT NULL 
    DROP TABLE #BlitzIndexResults;
        
IF OBJECT_ID('tempdb..#IndexCreateTsql') IS NOT NULL    
    DROP TABLE #IndexCreateTsql;

IF OBJECT_ID('tempdb..#DatabaseList') IS NOT NULL 
    DROP TABLE #DatabaseList;

IF OBJECT_ID('tempdb..#Statistics') IS NOT NULL 
    DROP TABLE #Statistics;

IF OBJECT_ID('tempdb..#PartitionCompressionInfo') IS NOT NULL 
    DROP TABLE #PartitionCompressionInfo;

IF OBJECT_ID('tempdb..#ComputedColumns') IS NOT NULL 
    DROP TABLE #ComputedColumns;
	
IF OBJECT_ID('tempdb..#TraceStatus') IS NOT NULL
	DROP TABLE #TraceStatus;

IF OBJECT_ID('tempdb..#TemporalTables') IS NOT NULL
	DROP TABLE #TemporalTables;

IF OBJECT_ID('tempdb..#CheckConstraints') IS NOT NULL
	DROP TABLE #CheckConstraints;

IF OBJECT_ID('tempdb..#FilteredIndexes') IS NOT NULL
	DROP TABLE #FilteredIndexes;
		
IF OBJECT_ID('tempdb..#Ignore_Databases') IS NOT NULL 
    DROP TABLE #Ignore_Databases

        RAISERROR (N'Create temp tables.',0,1) WITH NOWAIT;
        CREATE TABLE #BlitzIndexResults
            (
              blitz_result_id INT IDENTITY PRIMARY KEY,
              check_id INT NOT NULL,
              index_sanity_id INT NULL,
              Priority INT NULL,
              findings_group NVARCHAR(4000) NOT NULL,
              finding NVARCHAR(200) NOT NULL,
              [database_name] NVARCHAR(128) NULL,
              URL NVARCHAR(200) NOT NULL,
              details NVARCHAR(MAX) NOT NULL,
              index_definition NVARCHAR(MAX) NOT NULL,
              secret_columns NVARCHAR(MAX) NULL,
              index_usage_summary NVARCHAR(MAX) NULL,
              index_size_summary NVARCHAR(MAX) NULL,
              create_tsql NVARCHAR(MAX) NULL,
              more_info NVARCHAR(MAX)NULL
            );

        CREATE TABLE #IndexSanity
            (
              [index_sanity_id] INT IDENTITY PRIMARY KEY CLUSTERED,
              [database_id] SMALLINT NOT NULL ,
              [object_id] INT NOT NULL ,
              [index_id] INT NOT NULL ,
              [index_type] TINYINT NOT NULL,
              [database_name] NVARCHAR(128) NOT NULL ,
              [schema_name] NVARCHAR(128) NOT NULL ,
              [object_name] NVARCHAR(128) NOT NULL ,
              index_name NVARCHAR(128) NULL ,
              key_column_names NVARCHAR(MAX) NULL ,
              key_column_names_with_sort_order NVARCHAR(MAX) NULL ,
              key_column_names_with_sort_order_no_types NVARCHAR(MAX) NULL ,
              count_key_columns INT NULL ,
              include_column_names NVARCHAR(MAX) NULL ,
              include_column_names_no_types NVARCHAR(MAX) NULL ,
              count_included_columns INT NULL ,
              partition_key_column_name NVARCHAR(MAX) NULL,
              filter_definition NVARCHAR(MAX) NOT NULL ,
              is_indexed_view BIT NOT NULL ,
              is_unique BIT NOT NULL ,
              is_primary_key BIT NOT NULL ,
              is_XML BIT NOT NULL,
              is_spatial BIT NOT NULL,
              is_NC_columnstore BIT NOT NULL,
              is_CX_columnstore BIT NOT NULL,
              is_disabled BIT NOT NULL ,
              is_hypothetical BIT NOT NULL ,
              is_padded BIT NOT NULL ,
              fill_factor SMALLINT NOT NULL ,
              user_seeks BIGINT NOT NULL ,
              user_scans BIGINT NOT NULL ,
              user_lookups BIGINT NOT  NULL ,
              user_updates BIGINT NULL ,
              last_user_seek DATETIME NULL ,
              last_user_scan DATETIME NULL ,
              last_user_lookup DATETIME NULL ,
              last_user_update DATETIME NULL ,
              is_referenced_by_foreign_key BIT DEFAULT(0),
              secret_columns NVARCHAR(MAX) NULL,
              count_secret_columns INT NULL,
              create_date DATETIME NOT NULL,
              modify_date DATETIME NOT NULL,
              filter_columns_not_in_index NVARCHAR(MAX),
            [db_schema_object_name] AS [schema_name] + N'.' + [object_name]  ,
            [db_schema_object_indexid] AS [schema_name] + N'.' + [object_name]
                + CASE WHEN [index_name] IS NOT NULL THEN N'.' + index_name
                ELSE N''
                END + N' (' + CAST(index_id AS NVARCHAR(20)) + N')' ,
            first_key_column_name AS CASE    WHEN count_key_columns > 1
                THEN LEFT(key_column_names, CHARINDEX(',', key_column_names, 0) - 1)
                ELSE key_column_names
                END ,
            index_definition AS 
            CASE WHEN partition_key_column_name IS NOT NULL 
                THEN N'[PARTITIONED BY:' + partition_key_column_name +  N']' 
                ELSE '' 
                END +
                CASE index_id
                    WHEN 0 THEN N'[HEAP] '
                    WHEN 1 THEN N'[CX] '
                    ELSE N'' END + CASE WHEN is_indexed_view = 1 THEN N'[VIEW] '
                    ELSE N'' END + CASE WHEN is_primary_key = 1 THEN N'[PK] '
                    ELSE N'' END + CASE WHEN is_XML = 1 THEN N'[XML] '
                    ELSE N'' END + CASE WHEN is_spatial = 1 THEN N'[SPATIAL] '
                    ELSE N'' END + CASE WHEN is_NC_columnstore = 1 THEN N'[COLUMNSTORE] '
                    ELSE N'' END + CASE WHEN is_disabled = 1 THEN N'[DISABLED] '
                    ELSE N'' END + CASE WHEN is_hypothetical = 1 THEN N'[HYPOTHETICAL] '
                    ELSE N'' END + CASE WHEN is_unique = 1 AND is_primary_key = 0 THEN N'[UNIQUE] '
                    ELSE N'' END + CASE WHEN count_key_columns > 0 THEN 
                        N'[' + CAST(count_key_columns AS NVARCHAR(10)) + N' KEY' 
                            + CASE WHEN count_key_columns > 1 THEN  N'S' ELSE N'' END
                            + N'] ' + LTRIM(key_column_names_with_sort_order)
                    ELSE N'' END + CASE WHEN count_included_columns > 0 THEN 
                        N' [' + CAST(count_included_columns AS NVARCHAR(10))  + N' INCLUDE' + 
                            + CASE WHEN count_included_columns > 1 THEN  N'S' ELSE N'' END                    
                            + N'] ' + include_column_names
                    ELSE N'' END + CASE WHEN filter_definition <> N'' THEN N' [FILTER] ' + filter_definition
                    ELSE N'' END ,
            [total_reads] AS user_seeks + user_scans + user_lookups,
            [reads_per_write] AS CAST(CASE WHEN user_updates > 0
                THEN ( user_seeks + user_scans + user_lookups )  / (1.0 * user_updates)
                ELSE 0 END AS MONEY) ,
            [index_usage_summary] AS N'Reads: ' + 
                REPLACE(CONVERT(NVARCHAR(30),CAST((user_seeks + user_scans + user_lookups) AS MONEY), 1), N'.00', N'')
                + CASE WHEN user_seeks + user_scans + user_lookups > 0 THEN
                    N' (' 
                        + RTRIM(
                        CASE WHEN user_seeks > 0 THEN REPLACE(CONVERT(NVARCHAR(30),CAST((user_seeks) AS MONEY), 1), N'.00', N'') + N' seek ' ELSE N'' END
                        + CASE WHEN user_scans > 0 THEN REPLACE(CONVERT(NVARCHAR(30),CAST((user_scans) AS MONEY), 1), N'.00', N'') + N' scan '  ELSE N'' END
                        + CASE WHEN user_lookups > 0 THEN  REPLACE(CONVERT(NVARCHAR(30),CAST((user_lookups) AS MONEY), 1), N'.00', N'') + N' lookup' ELSE N'' END
                        )
                        + N') '
                    ELSE N' ' END 
                + N'Writes:' + 
                REPLACE(CONVERT(NVARCHAR(30),CAST(user_updates AS MONEY), 1), N'.00', N''),
            [more_info] AS N'EXEC dbo.sp_BlitzIndex @DatabaseName=' + QUOTENAME([database_name],N'''') + 
                N', @SchemaName=' + QUOTENAME([schema_name],N'''') + N', @TableName=' + QUOTENAME([object_name],N'''') + N';'
		);
        RAISERROR (N'Adding UQ index on #IndexSanity (database_id, object_id, index_id)',0,1) WITH NOWAIT;
        IF NOT EXISTS(SELECT 1 FROM tempdb.sys.indexes WHERE name='uq_database_id_object_id_index_id') 
            CREATE UNIQUE INDEX uq_database_id_object_id_index_id ON #IndexSanity (database_id, object_id, index_id);


        CREATE TABLE #IndexPartitionSanity
            (
              [index_partition_sanity_id] INT IDENTITY,
              [index_sanity_id] INT NULL ,
              [database_id] INT NOT NULL ,
              [object_id] INT NOT NULL ,
			  [schema_name] NVARCHAR(128) NOT NULL,
              [index_id] INT NOT NULL ,
              [partition_number] INT NOT NULL ,
              row_count BIGINT NOT NULL ,
              reserved_MB NUMERIC(29,2) NOT NULL ,
              reserved_LOB_MB NUMERIC(29,2) NOT NULL ,
              reserved_row_overflow_MB NUMERIC(29,2) NOT NULL ,
              leaf_insert_count BIGINT NULL ,
              leaf_delete_count BIGINT NULL ,
              leaf_update_count BIGINT NULL ,
              range_scan_count BIGINT NULL ,
              singleton_lookup_count BIGINT NULL , 
              forwarded_fetch_count BIGINT NULL ,
              lob_fetch_in_pages BIGINT NULL ,
              lob_fetch_in_bytes BIGINT NULL ,
              row_overflow_fetch_in_pages BIGINT NULL ,
              row_overflow_fetch_in_bytes BIGINT NULL ,
              row_lock_count BIGINT NULL ,
              row_lock_wait_count BIGINT NULL ,
              row_lock_wait_in_ms BIGINT NULL ,
              page_lock_count BIGINT NULL ,
              page_lock_wait_count BIGINT NULL ,
              page_lock_wait_in_ms BIGINT NULL ,
              index_lock_promotion_attempt_count BIGINT NULL ,
              index_lock_promotion_count BIGINT NULL,
              data_compression_desc NVARCHAR(60) NULL,
			  page_latch_wait_count BIGINT NULL,
			  page_latch_wait_in_ms BIGINT NULL,
			  page_io_latch_wait_count BIGINT NULL,
			  page_io_latch_wait_in_ms BIGINT NULL
            );

        CREATE TABLE #IndexSanitySize
            (
              [index_sanity_size_id] INT IDENTITY NOT NULL ,
              [index_sanity_id] INT NULL ,
              [database_id] INT NOT NULL,
			  [schema_name] NVARCHAR(128) NOT NULL,
              partition_count INT NOT NULL ,
              total_rows BIGINT NOT NULL ,
              total_reserved_MB NUMERIC(29,2) NOT NULL ,
              total_reserved_LOB_MB NUMERIC(29,2) NOT NULL ,
              total_reserved_row_overflow_MB NUMERIC(29,2) NOT NULL ,
              total_leaf_delete_count BIGINT NULL,
              total_leaf_update_count BIGINT NULL,
              total_range_scan_count BIGINT NULL,
              total_singleton_lookup_count BIGINT NULL,
              total_forwarded_fetch_count BIGINT NULL,
              total_row_lock_count BIGINT NULL ,
              total_row_lock_wait_count BIGINT NULL ,
              total_row_lock_wait_in_ms BIGINT NULL ,
              avg_row_lock_wait_in_ms BIGINT NULL ,
              total_page_lock_count BIGINT NULL ,
              total_page_lock_wait_count BIGINT NULL ,
              total_page_lock_wait_in_ms BIGINT NULL ,
              avg_page_lock_wait_in_ms BIGINT NULL ,
               total_index_lock_promotion_attempt_count BIGINT NULL ,
              total_index_lock_promotion_count BIGINT NULL ,
              data_compression_desc NVARCHAR(4000) NULL,
			  page_latch_wait_count BIGINT NULL,
			  page_latch_wait_in_ms BIGINT NULL,
			  page_io_latch_wait_count BIGINT NULL,
			  page_io_latch_wait_in_ms BIGINT NULL,
              index_size_summary AS ISNULL(
                CASE WHEN partition_count > 1
                        THEN N'[' + CAST(partition_count AS NVARCHAR(10)) + N' PARTITIONS] '
                        ELSE N''
                END + REPLACE(CONVERT(NVARCHAR(30),CAST([total_rows] AS MONEY), 1), N'.00', N'') + N' rows; '
                + CASE WHEN total_reserved_MB > 1024 THEN 
                    CAST(CAST(total_reserved_MB/1024. AS NUMERIC(29,1)) AS NVARCHAR(30)) + N'GB'
                ELSE 
                    CAST(CAST(total_reserved_MB AS NUMERIC(29,1)) AS NVARCHAR(30)) + N'MB'
                END
                + CASE WHEN total_reserved_LOB_MB > 1024 THEN 
                    N'; ' + CAST(CAST(total_reserved_LOB_MB/1024. AS NUMERIC(29,1)) AS NVARCHAR(30)) + N'GB LOB'
                WHEN total_reserved_LOB_MB > 0 THEN
                    N'; ' + CAST(CAST(total_reserved_LOB_MB AS NUMERIC(29,1)) AS NVARCHAR(30)) + N'MB LOB'
                ELSE ''
                END
                 + CASE WHEN total_reserved_row_overflow_MB > 1024 THEN
                    N'; ' + CAST(CAST(total_reserved_row_overflow_MB/1024. AS NUMERIC(29,1)) AS NVARCHAR(30)) + N'GB Row Overflow'
                WHEN total_reserved_row_overflow_MB > 0 THEN
                    N'; ' + CAST(CAST(total_reserved_row_overflow_MB AS NUMERIC(29,1)) AS NVARCHAR(30)) + N'MB Row Overflow'
                ELSE ''
                END ,
                    N'Error- NULL in computed column'),
            index_op_stats AS ISNULL(
                (
                    REPLACE(CONVERT(NVARCHAR(30),CAST(total_singleton_lookup_count AS MONEY), 1),N'.00',N'') + N' singleton lookups; '
                    + REPLACE(CONVERT(NVARCHAR(30),CAST(total_range_scan_count AS MONEY), 1),N'.00',N'') + N' scans/seeks; '
                    + REPLACE(CONVERT(NVARCHAR(30),CAST(total_leaf_delete_count AS MONEY), 1),N'.00',N'') + N' deletes; '
                    + REPLACE(CONVERT(NVARCHAR(30),CAST(total_leaf_update_count AS MONEY), 1),N'.00',N'') + N' updates; '
                    + CASE WHEN ISNULL(total_forwarded_fetch_count,0) >0 THEN
                        REPLACE(CONVERT(NVARCHAR(30),CAST(total_forwarded_fetch_count AS MONEY), 1),N'.00',N'') + N' forward records fetched; '
                    ELSE N'' END

                    /* rows will only be in this dmv when data is in memory for the table */
                ), N'Table metadata not in memory'),
            index_lock_wait_summary AS ISNULL(
                CASE WHEN total_row_lock_wait_count = 0 AND  total_page_lock_wait_count = 0 AND
                    total_index_lock_promotion_attempt_count = 0 THEN N'0 lock waits.'
                ELSE
                    CASE WHEN total_row_lock_wait_count > 0 THEN
                        N'Row lock waits: ' + REPLACE(CONVERT(NVARCHAR(30),CAST(total_row_lock_wait_count AS MONEY), 1), N'.00', N'')
                        + N'; total duration: ' + 
                            CASE WHEN total_row_lock_wait_in_ms >= 60000 THEN /*More than 1 min*/
                                REPLACE(CONVERT(NVARCHAR(30),CAST((total_row_lock_wait_in_ms/60000) AS MONEY), 1), N'.00', N'') + N' minutes; '
                            ELSE                         
                                REPLACE(CONVERT(NVARCHAR(30),CAST(ISNULL(total_row_lock_wait_in_ms/1000,0) AS MONEY), 1), N'.00', N'') + N' seconds; '
                            END
                        + N'avg duration: ' + 
                            CASE WHEN avg_row_lock_wait_in_ms >= 60000 THEN /*More than 1 min*/
                                REPLACE(CONVERT(NVARCHAR(30),CAST((avg_row_lock_wait_in_ms/60000) AS MONEY), 1), N'.00', N'') + N' minutes; '
                            ELSE                         
                                REPLACE(CONVERT(NVARCHAR(30),CAST(ISNULL(avg_row_lock_wait_in_ms/1000,0) AS MONEY), 1), N'.00', N'') + N' seconds; '
                            END
                    ELSE N''
                    END +
                    CASE WHEN total_page_lock_wait_count > 0 THEN
                        N'Page lock waits: ' + REPLACE(CONVERT(NVARCHAR(30),CAST(total_page_lock_wait_count AS MONEY), 1), N'.00', N'')
                        + N'; total duration: ' + 
                            CASE WHEN total_page_lock_wait_in_ms >= 60000 THEN /*More than 1 min*/
                                REPLACE(CONVERT(NVARCHAR(30),CAST((total_page_lock_wait_in_ms/60000) AS MONEY), 1), N'.00', N'') + N' minutes; '
                            ELSE                         
                                REPLACE(CONVERT(NVARCHAR(30),CAST(ISNULL(total_page_lock_wait_in_ms/1000,0) AS MONEY), 1), N'.00', N'') + N' seconds; '
                            END
                        + N'avg duration: ' + 
                            CASE WHEN avg_page_lock_wait_in_ms >= 60000 THEN /*More than 1 min*/
                                REPLACE(CONVERT(NVARCHAR(30),CAST((avg_page_lock_wait_in_ms/60000) AS MONEY), 1), N'.00', N'') + N' minutes; '
                            ELSE                         
                                REPLACE(CONVERT(NVARCHAR(30),CAST(ISNULL(avg_page_lock_wait_in_ms/1000,0) AS MONEY), 1), N'.00', N'') + N' seconds; '
                            END
                    ELSE N''
                    END +
                    CASE WHEN total_index_lock_promotion_attempt_count > 0 THEN
                        N'Lock escalation attempts: ' + REPLACE(CONVERT(NVARCHAR(30),CAST(total_index_lock_promotion_attempt_count AS MONEY), 1), N'.00', N'')
                        + N'; Actual Escalations: ' + REPLACE(CONVERT(NVARCHAR(30),CAST(ISNULL(total_index_lock_promotion_count,0) AS MONEY), 1), N'.00', N'') + N'.'
                    ELSE N''
                    END
                END                  
                    ,'Error- NULL in computed column')
            );

        CREATE TABLE #IndexColumns
            (
              [database_id] INT NOT NULL,
			  [schema_name] NVARCHAR(128),
              [object_id] INT NOT NULL ,
              [index_id] INT NOT NULL ,
              [key_ordinal] INT NULL ,
              is_included_column BIT NULL ,
              is_descending_key BIT NULL ,
              [partition_ordinal] INT NULL ,
              column_name NVARCHAR(256) NOT NULL ,
              system_type_name NVARCHAR(256) NOT NULL,
              max_length SMALLINT NOT NULL,
              [precision] TINYINT NOT NULL,
              [scale] TINYINT NOT NULL,
              collation_name NVARCHAR(256) NULL,
              is_nullable BIT NULL,
              is_identity BIT NULL,
              is_computed BIT NULL,
              is_replicated BIT NULL,
              is_sparse BIT NULL,
              is_filestream BIT NULL,
              seed_value BIGINT NULL,
              increment_value INT NULL ,
              last_value BIGINT NULL,
              is_not_for_replication BIT NULL
            );
        CREATE CLUSTERED INDEX CLIX_database_id_object_id_index_id ON #IndexColumns
            (database_id, object_id, index_id);

        CREATE TABLE #MissingIndexes
            ([database_id] INT NOT NULL,
			[object_id] INT NOT NULL,
            [database_name] NVARCHAR(128) NOT NULL ,
            [schema_name] NVARCHAR(128) NOT NULL ,
            [table_name] NVARCHAR(128),
            [statement] NVARCHAR(512) NOT NULL,
            magic_benefit_number AS (( user_seeks + user_scans ) * avg_total_user_cost * avg_user_impact),
            avg_total_user_cost NUMERIC(29,4) NOT NULL,
            avg_user_impact NUMERIC(29,1) NOT NULL,
            user_seeks BIGINT NOT NULL,
            user_scans BIGINT NOT NULL,
            unique_compiles BIGINT NULL,
            equality_columns NVARCHAR(4000), 
            inequality_columns NVARCHAR(4000),
            included_columns NVARCHAR(4000),
			is_low BIT,
                [index_estimated_impact] AS 
                    REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(
                                    (user_seeks + user_scans)
                                     AS BIGINT) AS MONEY), 1), '.00', '') + N' use' 
                        + CASE WHEN (user_seeks + user_scans) > 1 THEN N's' ELSE N'' END
                         +N'; Impact: ' + CAST(avg_user_impact AS NVARCHAR(30))
                        + N'%; Avg query cost: '
                        + CAST(avg_total_user_cost AS NVARCHAR(30)),
                [missing_index_details] AS
                    CASE WHEN equality_columns IS NOT NULL THEN N'EQUALITY: ' + equality_columns + N' '
                         ELSE N''
                    END + CASE WHEN inequality_columns IS NOT NULL THEN N'INEQUALITY: ' + inequality_columns + N' '
                       ELSE N''
                    END + CASE WHEN included_columns IS NOT NULL THEN N'INCLUDES: ' + included_columns + N' '
                        ELSE N''
                    END,
                [create_tsql] AS N'CREATE INDEX [IX_' 
                    + REPLACE(REPLACE(REPLACE(REPLACE(
                        ISNULL(equality_columns,N'')+ 
                        CASE WHEN equality_columns IS NOT NULL AND inequality_columns IS NOT NULL THEN N'_' ELSE N'' END
                        + ISNULL(inequality_columns,''),',','')
                        ,'[',''),']',''),' ','_') 
                    + CASE WHEN included_columns IS NOT NULL THEN N'_Includes' ELSE N'' END + N'] ON ' 
                    + [statement] + N' (' + ISNULL(equality_columns,N'')
                    + CASE WHEN equality_columns IS NOT NULL AND inequality_columns IS NOT NULL THEN N', ' ELSE N'' END
                    + CASE WHEN inequality_columns IS NOT NULL THEN inequality_columns ELSE N'' END + 
                    ') ' + CASE WHEN included_columns IS NOT NULL THEN N' INCLUDE (' + included_columns + N')' ELSE N'' END
                    + N' WITH (' 
                        + N'FILLFACTOR=100, ONLINE=?, SORT_IN_TEMPDB=?, DATA_COMPRESSION=?' 
                    + N')'
                    + N';'
                    ,
                [more_info] AS N'EXEC dbo.sp_BlitzIndex @DatabaseName=' + QUOTENAME([database_name],'''') + 
                    N', @SchemaName=' + QUOTENAME([schema_name],'''') + N', @TableName=' + QUOTENAME([table_name],'''') + N';'
            );

        CREATE TABLE #ForeignKeys (
			[database_id] INT NOT NULL,
            [database_name] NVARCHAR(128) NOT NULL ,
			[schema_name] NVARCHAR(128) NOT NULL ,
            foreign_key_name NVARCHAR(256),
            parent_object_id INT,
            parent_object_name NVARCHAR(256),
            referenced_object_id INT,
            referenced_object_name NVARCHAR(256),
            is_disabled BIT,
            is_not_trusted BIT,
            is_not_for_replication BIT,
            parent_fk_columns NVARCHAR(MAX),
            referenced_fk_columns NVARCHAR(MAX),
            update_referential_action_desc NVARCHAR(16),
            delete_referential_action_desc NVARCHAR(60)
        );
        
        CREATE TABLE #IndexCreateTsql (
            index_sanity_id INT NOT NULL,
            create_tsql NVARCHAR(MAX) NOT NULL
        );

        CREATE TABLE #DatabaseList (
			DatabaseName NVARCHAR(256),
            secondary_role_allow_connections_desc NVARCHAR(50)

        );

		CREATE TABLE #PartitionCompressionInfo (
			[index_sanity_id] INT NULL,
			[partition_compression_detail] NVARCHAR(4000) NULL
        );

		CREATE TABLE #Statistics (
		  database_id INT NOT NULL,
		  database_name NVARCHAR(256) NOT NULL,
		  table_name NVARCHAR(128) NULL,
		  schema_name NVARCHAR(128) NULL,
		  index_name  NVARCHAR(128) NULL,
		  column_names  NVARCHAR(MAX) NULL,
		  statistics_name NVARCHAR(128) NULL,
		  last_statistics_update DATETIME NULL,
		  days_since_last_stats_update INT NULL,
		  rows BIGINT NULL,
		  rows_sampled BIGINT NULL,
		  percent_sampled DECIMAL(18, 1) NULL,
		  histogram_steps INT NULL,
		  modification_counter BIGINT NULL,
		  percent_modifications DECIMAL(18, 1) NULL,
		  modifications_before_auto_update INT NULL,
		  index_type_desc NVARCHAR(128) NULL,
		  table_create_date DATETIME NULL,
		  table_modify_date DATETIME NULL,
		  no_recompute BIT NULL,
		  has_filter BIT NULL,
		  filter_definition NVARCHAR(MAX) NULL
		); 

		CREATE TABLE #ComputedColumns
		(
		  index_sanity_id INT IDENTITY(1, 1) NOT NULL,
		  database_name NVARCHAR(128) NULL,
		  database_id INT NOT NULL,
		  table_name NVARCHAR(128) NOT NULL,
		  schema_name NVARCHAR(128) NOT NULL,
		  column_name NVARCHAR(128) NULL,
		  is_nullable BIT NULL,
		  definition NVARCHAR(MAX) NULL,
		  uses_database_collation BIT NOT NULL,
		  is_persisted BIT NOT NULL,
		  is_computed BIT NOT NULL,
		  is_function INT NOT NULL,
		  column_definition NVARCHAR(MAX) NULL
		);
		
		CREATE TABLE #TraceStatus
		(
		 TraceFlag NVARCHAR(10) ,
		 status BIT ,
		 Global BIT ,
		 Session BIT
		);

        CREATE TABLE #TemporalTables
        (
            index_sanity_id INT IDENTITY(1, 1) NOT NULL,
            database_name NVARCHAR(128) NOT NULL,
            database_id INT NOT NULL,
            schema_name NVARCHAR(128) NOT NULL,
            table_name NVARCHAR(128) NOT NULL,
            history_table_name NVARCHAR(128) NOT NULL,
            history_schema_name NVARCHAR(128) NOT NULL,
            start_column_name NVARCHAR(128) NOT NULL,
            end_column_name NVARCHAR(128) NOT NULL,
            period_name NVARCHAR(128) NOT NULL
        );

		CREATE TABLE #CheckConstraints
		(
		  index_sanity_id INT IDENTITY(1, 1) NOT NULL,
		  database_name NVARCHAR(128) NULL,
		  database_id INT NOT NULL,
		  table_name NVARCHAR(128) NOT NULL,
		  schema_name NVARCHAR(128) NOT NULL,
		  constraint_name NVARCHAR(128) NULL,
		  is_disabled BIT NULL,
		  definition NVARCHAR(MAX) NULL,
		  uses_database_collation BIT NOT NULL,
		  is_not_trusted BIT NOT NULL,
		  is_function INT NOT NULL,
		  column_definition NVARCHAR(MAX) NULL
		);

		CREATE TABLE #FilteredIndexes
		(
		  index_sanity_id INT IDENTITY(1, 1) NOT NULL,
		  database_name NVARCHAR(128) NULL,
		  database_id INT NOT NULL,
		  schema_name NVARCHAR(128) NOT NULL,
		  table_name NVARCHAR(128) NOT NULL,
		  index_name NVARCHAR(128) NULL,
		  column_name NVARCHAR(128) NULL
		);

        CREATE TABLE #Ignore_Databases 
        (
          DatabaseName NVARCHAR(128), 
          Reason NVARCHAR(100)
        );

/* Sanitize our inputs */
SELECT
	@OutputServerName = QUOTENAME(@OutputServerName),
	@OutputDatabaseName = QUOTENAME(@OutputDatabaseName),
	@OutputSchemaName = QUOTENAME(@OutputSchemaName),
	@OutputTableName = QUOTENAME(@OutputTableName);
					
					
IF @GetAllDatabases = 1
    BEGIN
        INSERT INTO #DatabaseList (DatabaseName)
        SELECT  DB_NAME(database_id)
        FROM    sys.databases
        WHERE user_access_desc = 'MULTI_USER'
        AND state_desc = 'ONLINE'
        AND database_id > 4
        AND DB_NAME(database_id) NOT LIKE 'ReportServer%'
        AND DB_NAME(database_id) NOT LIKE 'rdsadmin%'
        AND is_distributor = 0
		OPTION    ( RECOMPILE );

        /* Skip non-readable databases in an AG - see Github issue #1160 */
        IF EXISTS (SELECT * FROM sys.all_objects o INNER JOIN sys.all_columns c ON o.object_id = c.object_id AND o.name = 'dm_hadr_availability_replica_states' AND c.name = 'role_desc')
            BEGIN
            SET @dsql = N'UPDATE #DatabaseList SET secondary_role_allow_connections_desc = ''NO'' WHERE DatabaseName IN (
                        SELECT d.name 
                        FROM sys.dm_hadr_availability_replica_states rs
                        INNER JOIN sys.databases d ON rs.replica_id = d.replica_id
                        INNER JOIN sys.availability_replicas r ON rs.replica_id = r.replica_id
                        WHERE rs.role_desc = ''SECONDARY''
                        AND r.secondary_role_allow_connections_desc = ''NO'')
						OPTION    ( RECOMPILE );';
            EXEC sp_executesql @dsql;

            IF EXISTS (SELECT * FROM #DatabaseList WHERE secondary_role_allow_connections_desc = 'NO')
                BEGIN
                INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, database_name, URL, details, index_definition,
                                                index_usage_summary, index_size_summary )
                VALUES  ( 1, 
				          0, 
		                  N'Skipped non-readable AG secondary databases.',
                          N'You are running this on an AG secondary, and some of your databases are configured as non-readable when this is a secondary node.',
				          N'To analyze those databases, run sp_BlitzIndex on the primary, or on a readable secondary.',
                          'http://FirstResponderKit.org', '', '', '', ''
                        );        
                END;
            END;

        IF @IgnoreDatabases IS NOT NULL
            AND LEN(@IgnoreDatabases) > 0
            BEGIN
                RAISERROR(N'Setting up filter to ignore databases', 0, 1) WITH NOWAIT;
                SET @DatabaseToIgnore = '';

                WHILE LEN(@IgnoreDatabases) > 0
                BEGIN
                    IF PATINDEX('%,%', @IgnoreDatabases) > 0
                    BEGIN  
                        SET @DatabaseToIgnore = SUBSTRING(@IgnoreDatabases, 0, PATINDEX('%,%',@IgnoreDatabases)) ;
                        
                        INSERT INTO #Ignore_Databases (DatabaseName, Reason)
                        SELECT LTRIM(RTRIM(@DatabaseToIgnore)), 'Specified in the @IgnoreDatabases parameter'
                        OPTION (RECOMPILE) ;
                        
                        SET @IgnoreDatabases = SUBSTRING(@IgnoreDatabases, LEN(@DatabaseToIgnore + ',') + 1, LEN(@IgnoreDatabases)) ;
                    END;
                    ELSE
                    BEGIN
                        SET @DatabaseToIgnore = @IgnoreDatabases ;
                        SET @IgnoreDatabases = NULL ;

                        INSERT INTO #Ignore_Databases (DatabaseName, Reason)
                        SELECT LTRIM(RTRIM(@DatabaseToIgnore)), 'Specified in the @IgnoreDatabases parameter'
                        OPTION (RECOMPILE) ;
                    END;
            END;
                
        END

    END;
ELSE
    BEGIN
        INSERT INTO #DatabaseList
                ( DatabaseName )
        SELECT CASE 
		            WHEN @DatabaseName IS NULL OR @DatabaseName = N'' 
		            THEN DB_NAME()
                    ELSE @DatabaseName END;
               END;

SET @NumDatabases = (SELECT COUNT(*) FROM #DatabaseList);
SET @msg = N'Number of databases to examine: ' + CAST(@NumDatabases AS NVARCHAR(50));
RAISERROR (@msg,0,1) WITH NOWAIT;



/* Running on 50+ databases can take a reaaallly long time, so we want explicit permission to do so (and only after warning about it) */


BEGIN TRY
        IF @NumDatabases >= 50 AND @BringThePain != 1 AND @TableName IS NULL
        BEGIN

            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,
                                            index_usage_summary, index_size_summary )
            VALUES  ( -1, 
			          0 , 
		              @ScriptVersionName,
                      CASE WHEN @GetAllDatabases = 1 THEN N'All Databases' ELSE N'Database ' + QUOTENAME(@DatabaseName) + N' as of ' + CONVERT(NVARCHAR(16), GETDATE(), 121) END, 
                      N'From Your Community Volunteers',   
					  N'http://FirstResponderKit.org',
                      N'',
                      N'',
					  N''
                    );
            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, database_name, URL, details, index_definition,
                                            index_usage_summary, index_size_summary )
            VALUES  ( 1, 
			          0, 
		              N'You''re trying to run sp_BlitzIndex on a server with ' + CAST(@NumDatabases AS NVARCHAR(8)) + N' databases. ',
                      N'Running sp_BlitzIndex on a server with 50+ databases may cause temporary insanity for the server and/or user.',
				      N'If you''re sure you want to do this, run again with the parameter @BringThePain = 1.',
                      'http://FirstResponderKit.org', 
					  '', 
					  '', 
					  '', 
					  ''
                    );        
            
			if(@OutputType <> 'NONE')
			BEGIN
				SELECT bir.blitz_result_id,
					   bir.check_id,
					   bir.index_sanity_id,
					   bir.Priority,
					   bir.findings_group,
					   bir.finding,
					   bir.database_name,
					   bir.URL,
					   bir.details,
					   bir.index_definition,
					   bir.secret_columns,
					   bir.index_usage_summary,
					   bir.index_size_summary,
					   bir.create_tsql,
					   bir.more_info 
					   FROM #BlitzIndexResults AS bir;
				RAISERROR('Running sp_BlitzIndex on a server with 50+ databases may cause temporary insanity for the server', 12, 1);
			END;

		RETURN;

		END;
END TRY
BEGIN CATCH
        RAISERROR (N'Failure to execute due to number of databases.', 0,1) WITH NOWAIT;

        SELECT  @msg = ERROR_MESSAGE(), 
		          @ErrorSeverity = ERROR_SEVERITY(), 
				  @ErrorState = ERROR_STATE();

        RAISERROR (@msg, @ErrorSeverity, @ErrorState);
        
        WHILE @@trancount > 0 
            ROLLBACK;

        RETURN;
    END CATCH;


RAISERROR (N'Checking partition counts to exclude databases with over 100 partitions',0,1) WITH NOWAIT;
IF @BringThePain = 0 AND @SkipPartitions = 0 AND @TableName IS NULL
    BEGIN   
        DECLARE partition_cursor CURSOR FOR
        SELECT dl.DatabaseName
        FROM #DatabaseList dl
        LEFT OUTER JOIN #Ignore_Databases i ON dl.DatabaseName = i.DatabaseName
        WHERE COALESCE(dl.secondary_role_allow_connections_desc, 'OK') <> 'NO' 
        AND i.DatabaseName IS NULL

        OPEN partition_cursor
        FETCH NEXT FROM partition_cursor INTO @DatabaseName
        
        WHILE @@FETCH_STATUS = 0
        BEGIN
            /* Count the total number of partitions */
            SET @dsql = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
                    SELECT @RowcountOUT = SUM(1) FROM ' + QUOTENAME(@DatabaseName) + '.sys.partitions WHERE partition_number > 1 OPTION    ( RECOMPILE );';
            EXEC sp_executesql @dsql, N'@RowcountOUT BIGINT OUTPUT', @RowcountOUT = @Rowcount OUTPUT;
            IF @Rowcount > 100
                BEGIN
                   RAISERROR (N'Skipping database %s because > 100 partitions were found. To check this database, you must set @BringThePain = 1.',0,1,@DatabaseName) WITH NOWAIT;
				INSERT INTO #Ignore_Databases (DatabaseName, Reason)
				SELECT @DatabaseName, 'Over 100 partitions found - use @BringThePain = 1 to analyze'
                END;
            FETCH NEXT FROM partition_cursor INTO @DatabaseName
        END;
        CLOSE partition_cursor
        DEALLOCATE partition_cursor

    END;					

INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,
                                index_usage_summary, index_size_summary )
SELECT  1, 0 , 
        'Database Skipped',
        i.DatabaseName,
        'http://FirstResponderKit.org',
        i.Reason, '', '', ''
FROM #Ignore_Databases i;


/* Last startup */
SELECT  @DaysUptime = CAST(DATEDIFF(HOUR, create_date, GETDATE()) / 24. AS NUMERIC (23,2))
FROM    sys.databases
WHERE   database_id = 2;

IF @DaysUptime = 0 OR @DaysUptime IS NULL 
  SET @DaysUptime = .01;

SELECT @DaysUptimeInsertValue = 'Server: ' + (CONVERT(VARCHAR(256), (SERVERPROPERTY('ServerName')))) + ' Days Uptime: ' + RTRIM(@DaysUptime);


/* Permission granted or unnecessary? Ok, let's go! */

RAISERROR (N'Starting loop through databases',0,1) WITH NOWAIT;
DECLARE c1 CURSOR 
LOCAL FAST_FORWARD 
FOR 
SELECT dl.DatabaseName 
FROM #DatabaseList dl
LEFT OUTER JOIN #Ignore_Databases i ON dl.DatabaseName = i.DatabaseName
WHERE COALESCE(dl.secondary_role_allow_connections_desc, 'OK') <> 'NO' 
  AND i.DatabaseName IS NULL
ORDER BY dl.DatabaseName;

OPEN c1;
FETCH NEXT FROM c1 INTO @DatabaseName;
     WHILE @@FETCH_STATUS = 0

BEGIN
    
    RAISERROR (@LineFeed, 0, 1) WITH NOWAIT;
    RAISERROR (@LineFeed, 0, 1) WITH NOWAIT;
    RAISERROR (@DatabaseName, 0, 1) WITH NOWAIT;

SELECT   @DatabaseID = [database_id]
FROM     sys.databases
         WHERE [name] = @DatabaseName
         AND user_access_desc='MULTI_USER'
         AND state_desc = 'ONLINE';

----------------------------------------
--STEP 1: OBSERVE THE PATIENT
--This step puts index information into temp tables.
----------------------------------------
BEGIN TRY
    BEGIN

        --Validate SQL Server Version

        IF (SELECT LEFT(@SQLServerProductVersion,
              CHARINDEX('.',@SQLServerProductVersion,0)-1
              )) <= 9
        BEGIN
            SET @msg=N'sp_BlitzIndex is only supported on SQL Server 2008 and higher. The version of this instance is: ' + @SQLServerProductVersion;
            RAISERROR(@msg,16,1);
        END;

        --Short circuit here if database name does not exist.
        IF @DatabaseName IS NULL OR @DatabaseID IS NULL
        BEGIN
            SET @msg='Database does not exist or is not online/multi-user: cannot proceed.';
            RAISERROR(@msg,16,1);
        END;    

        --Validate parameters.
        IF (@Mode NOT IN (0,1,2,3,4))
        BEGIN
            SET @msg=N'Invalid @Mode parameter. 0=diagnose, 1=summarize, 2=index detail, 3=missing index detail, 4=diagnose detail';
            RAISERROR(@msg,16,1);
        END;

        IF (@Mode <> 0 AND @TableName IS NOT NULL)
        BEGIN
            SET @msg=N'Setting the @Mode doesn''t change behavior if you supply @TableName. Use default @Mode=0 to see table detail.';
            RAISERROR(@msg,16,1);
        END;

        IF ((@Mode <> 0 OR @TableName IS NOT NULL) AND @Filter <> 0)
        BEGIN
            SET @msg=N'@Filter only applies when @Mode=0 and @TableName is not specified. Please try again.';
            RAISERROR(@msg,16,1);
        END;

        IF (@SchemaName IS NOT NULL AND @TableName IS NULL) 
        BEGIN
            SET @msg='We can''t run against a whole schema! Specify a @TableName, or leave both NULL for diagnosis.';
            RAISERROR(@msg,16,1);
        END;


        IF  (@TableName IS NOT NULL AND @SchemaName IS NULL)
        BEGIN
            SET @SchemaName=N'dbo';
            SET @msg='@SchemaName wasn''t specified-- assuming schema=dbo.';
            RAISERROR(@msg,1,1) WITH NOWAIT;
        END;

        --If a table is specified, grab the object id.
        --Short circuit if it doesn't exist.
        IF @TableName IS NOT NULL
        BEGIN
            SET @dsql = N'
                    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
                    SELECT  @ObjectID= OBJECT_ID
                    FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.objects AS so
                    JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS sc on 
                        so.schema_id=sc.schema_id
                    where so.type in (''U'', ''V'')
                    and so.name=' + QUOTENAME(@TableName,'''')+ N'
                    and sc.name=' + QUOTENAME(@SchemaName,'''')+ N'
                    /*Has a row in sys.indexes. This lets us get indexed views.*/
                    and exists (
                        SELECT si.name
                        FROM ' + QUOTENAME(@DatabaseName) + '.sys.indexes AS si 
                        WHERE so.object_id=si.object_id)
                    OPTION (RECOMPILE);';

            SET @params='@ObjectID INT OUTPUT';                

            IF @dsql IS NULL 
                RAISERROR('@dsql is null',16,1);

            EXEC sp_executesql @dsql, @params, @ObjectID=@ObjectID OUTPUT;
            
            IF @ObjectID IS NULL
                    BEGIN
                        SET @msg=N'Oh, this is awkward. I can''t find the table or indexed view you''re looking for in that database.' + CHAR(10) +
                            N'Please check your parameters.';
                        RAISERROR(@msg,1,1);
                        RETURN;
                    END;
        END;

        --set @collation
        SELECT @collation=collation_name
        FROM sys.databases
        WHERE database_id=@DatabaseID;

        --insert columns for clustered indexes and heaps
        --collect info on identity columns for this one
        SET @dsql = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
                SELECT ' + CAST(@DatabaseID AS NVARCHAR(16)) + ',
					s.name,    
                    si.object_id, 
                    si.index_id, 
                    sc.key_ordinal, 
                    sc.is_included_column, 
                    sc.is_descending_key,
                    sc.partition_ordinal,
                    c.name as column_name, 
                    st.name as system_type_name,
                    c.max_length,
                    c.[precision],
                    c.[scale],
                    c.collation_name,
                    c.is_nullable,
                    c.is_identity,
                    c.is_computed,
                    c.is_replicated,
                    ' + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN N'c.is_sparse' ELSE N'NULL as is_sparse' END + N',
                    ' + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN N'c.is_filestream' ELSE N'NULL as is_filestream' END + N',
                    CAST(ic.seed_value AS BIGINT),
                    CAST(ic.increment_value AS INT),
                    CAST(ic.last_value AS BIGINT),
                    ic.is_not_for_replication
                FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.indexes si
                JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.columns c ON
                    si.object_id=c.object_id
                LEFT JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.index_columns sc ON 
                    sc.object_id = si.object_id
                    and sc.index_id=si.index_id
                    AND sc.column_id=c.column_id
                LEFT JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.identity_columns ic ON
                    c.object_id=ic.object_id and
                    c.column_id=ic.column_id
                JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.types st ON 
                    c.system_type_id=st.system_type_id
                    AND c.user_type_id=st.user_type_id
				JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects AS so  ON si.object_id = so.object_id
																		  AND so.is_ms_shipped = 0
				JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS s ON s.schema_id = so.schema_id
                WHERE si.index_id in (0,1) ' 
                    + CASE WHEN @ObjectID IS NOT NULL 
                        THEN N' AND si.object_id=' + CAST(@ObjectID AS NVARCHAR(30)) 
                    ELSE N'' END 
                + N'OPTION (RECOMPILE);';

        IF @dsql IS NULL 
            RAISERROR('@dsql is null',16,1);

        RAISERROR (N'Inserting data into #IndexColumns for clustered indexes and heaps',0,1) WITH NOWAIT;
        IF @Debug = 1
            BEGIN
                PRINT SUBSTRING(@dsql, 0, 4000);
                PRINT SUBSTRING(@dsql, 4000, 8000);
                PRINT SUBSTRING(@dsql, 8000, 12000);
                PRINT SUBSTRING(@dsql, 12000, 16000);
                PRINT SUBSTRING(@dsql, 16000, 20000);
                PRINT SUBSTRING(@dsql, 20000, 24000);
                PRINT SUBSTRING(@dsql, 24000, 28000);
                PRINT SUBSTRING(@dsql, 28000, 32000);
                PRINT SUBSTRING(@dsql, 32000, 36000);
                PRINT SUBSTRING(@dsql, 36000, 40000);
            END;
        INSERT    #IndexColumns ( database_id, [schema_name], [object_id], index_id, key_ordinal, is_included_column, is_descending_key, partition_ordinal,
            column_name, system_type_name, max_length, precision, scale, collation_name, is_nullable, is_identity, is_computed,
            is_replicated, is_sparse, is_filestream, seed_value, increment_value, last_value, is_not_for_replication )
                EXEC sp_executesql @dsql;

        --insert columns for nonclustered indexes
        --this uses a full join to sys.index_columns
        --We don't collect info on identity columns here. They may be in NC indexes, but we just analyze identities in the base table.
        SET @dsql = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
                SELECT ' + CAST(@DatabaseID AS NVARCHAR(16)) + ', 
					s.name,    
                    si.object_id, 
                    si.index_id, 
                    sc.key_ordinal, 
                    sc.is_included_column, 
                    sc.is_descending_key,
                    sc.partition_ordinal,
                    c.name as column_name, 
                    st.name as system_type_name,
                    c.max_length,
                    c.[precision],
                    c.[scale],
                    c.collation_name,
                    c.is_nullable,
                    c.is_identity,
                    c.is_computed,
                    c.is_replicated,
                    ' + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN N'c.is_sparse' ELSE N'NULL AS is_sparse' END + N',
                    ' + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN N'c.is_filestream' ELSE N'NULL AS is_filestream' END + N'                
                FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.indexes AS si
                JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.columns AS c ON
                    si.object_id=c.object_id
                JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.index_columns AS sc ON 
                    sc.object_id = si.object_id
                    and sc.index_id=si.index_id
                    AND sc.column_id=c.column_id
                JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.types AS st ON 
                    c.system_type_id=st.system_type_id
                    AND c.user_type_id=st.user_type_id
				JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects AS so  ON si.object_id = so.object_id
																		  AND so.is_ms_shipped = 0
				JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS s ON s.schema_id = so.schema_id
                WHERE si.index_id not in (0,1) ' 
                    + CASE WHEN @ObjectID IS NOT NULL 
                        THEN N' AND si.object_id=' + CAST(@ObjectID AS NVARCHAR(30)) 
                    ELSE N'' END 
                + N'OPTION (RECOMPILE);';

        IF @dsql IS NULL 
            RAISERROR('@dsql is null',16,1);

        RAISERROR (N'Inserting data into #IndexColumns for nonclustered indexes',0,1) WITH NOWAIT;
        IF @Debug = 1
            BEGIN
                PRINT SUBSTRING(@dsql, 0, 4000);
                PRINT SUBSTRING(@dsql, 4000, 8000);
                PRINT SUBSTRING(@dsql, 8000, 12000);
                PRINT SUBSTRING(@dsql, 12000, 16000);
                PRINT SUBSTRING(@dsql, 16000, 20000);
                PRINT SUBSTRING(@dsql, 20000, 24000);
                PRINT SUBSTRING(@dsql, 24000, 28000);
                PRINT SUBSTRING(@dsql, 28000, 32000);
                PRINT SUBSTRING(@dsql, 32000, 36000);
                PRINT SUBSTRING(@dsql, 36000, 40000);
            END;
        INSERT    #IndexColumns ( database_id, [schema_name], [object_id], index_id, key_ordinal, is_included_column, is_descending_key, partition_ordinal,
            column_name, system_type_name, max_length, precision, scale, collation_name, is_nullable, is_identity, is_computed,
            is_replicated, is_sparse, is_filestream )
                EXEC sp_executesql @dsql;
           
        SET @dsql = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
                SELECT  ' + CAST(@DatabaseID AS NVARCHAR(10)) + N' AS database_id, 
                        so.object_id, 
                        si.index_id, 
                        si.type,
                        @i_DatabaseName AS database_name, 
                        COALESCE(sc.NAME, ''Unknown'') AS [schema_name],
                        COALESCE(so.name, ''Unknown'') AS [object_name], 
                        COALESCE(si.name, ''Unknown'') AS [index_name],
                        CASE    WHEN so.[type] = CAST(''V'' AS CHAR(2)) THEN 1 ELSE 0 END, 
                        si.is_unique, 
                        si.is_primary_key, 
                        CASE when si.type = 3 THEN 1 ELSE 0 END AS is_XML,
                        CASE when si.type = 4 THEN 1 ELSE 0 END AS is_spatial,
                        CASE when si.type = 6 THEN 1 ELSE 0 END AS is_NC_columnstore,
                        CASE when si.type = 5 then 1 else 0 end as is_CX_columnstore,
                        si.is_disabled,
                        si.is_hypothetical, 
                        si.is_padded, 
                        si.fill_factor,'
                        + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN N'
                        CASE WHEN si.filter_definition IS NOT NULL THEN si.filter_definition
                             ELSE N''''
                        END AS filter_definition' ELSE N''''' AS filter_definition' END + N'
                        , ISNULL(us.user_seeks, 0), ISNULL(us.user_scans, 0),
                        ISNULL(us.user_lookups, 0), ISNULL(us.user_updates, 0), us.last_user_seek, us.last_user_scan,
                        us.last_user_lookup, us.last_user_update,
                        so.create_date, so.modify_date
                FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.indexes AS si WITH (NOLOCK)
                        JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects AS so WITH (NOLOCK) ON si.object_id = so.object_id
                                               AND so.is_ms_shipped = 0 /*Exclude objects shipped by Microsoft*/
                                               AND so.type <> ''TF'' /*Exclude table valued functions*/
                        JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.schemas sc ON so.schema_id = sc.schema_id
                        LEFT JOIN sys.dm_db_index_usage_stats AS us WITH (NOLOCK) ON si.[object_id] = us.[object_id]
                                                                       AND si.index_id = us.index_id
                                                                       AND us.database_id = ' + CAST(@DatabaseID AS NVARCHAR(10)) + N'
                WHERE    si.[type] IN ( 0, 1, 2, 3, 4, 5, 6 ) 
                /* Heaps, clustered, nonclustered, XML, spatial, Cluster Columnstore, NC Columnstore */ ' +
                CASE WHEN @TableName IS NOT NULL THEN N' and so.name=' + QUOTENAME(@TableName,N'''') + N' ' ELSE N'' END + 
        N'OPTION    ( RECOMPILE );
        ';
        IF @dsql IS NULL 
            RAISERROR('@dsql is null',16,1);

        RAISERROR (N'Inserting data into #IndexSanity',0,1) WITH NOWAIT;
        IF @Debug = 1
            BEGIN
                PRINT SUBSTRING(@dsql, 0, 4000);
                PRINT SUBSTRING(@dsql, 4000, 8000);
                PRINT SUBSTRING(@dsql, 8000, 12000);
                PRINT SUBSTRING(@dsql, 12000, 16000);
                PRINT SUBSTRING(@dsql, 16000, 20000);
                PRINT SUBSTRING(@dsql, 20000, 24000);
                PRINT SUBSTRING(@dsql, 24000, 28000);
                PRINT SUBSTRING(@dsql, 28000, 32000);
                PRINT SUBSTRING(@dsql, 32000, 36000);
                PRINT SUBSTRING(@dsql, 36000, 40000);
            END;
        INSERT    #IndexSanity ( [database_id], [object_id], [index_id], [index_type], [database_name], [schema_name], [object_name],
                                index_name, is_indexed_view, is_unique, is_primary_key, is_XML, is_spatial, is_NC_columnstore, is_CX_columnstore,
                                is_disabled, is_hypothetical, is_padded, fill_factor, filter_definition, user_seeks, user_scans, 
                                user_lookups, user_updates, last_user_seek, last_user_scan, last_user_lookup, last_user_update,
                                create_date, modify_date )
                EXEC sp_executesql @dsql, @params = N'@i_DatabaseName NVARCHAR(128)', @i_DatabaseName = @DatabaseName;


        RAISERROR (N'Checking partition count',0,1) WITH NOWAIT;
        IF @BringThePain = 0 AND @SkipPartitions = 0 AND @TableName IS NULL
            BEGIN
                /* Count the total number of partitions */
                SET @dsql = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
                        SELECT @RowcountOUT = SUM(1) FROM ' + QUOTENAME(@DatabaseName) + '.sys.partitions WHERE partition_number > 1 OPTION    ( RECOMPILE );';
                EXEC sp_executesql @dsql, N'@RowcountOUT BIGINT OUTPUT', @RowcountOUT = @Rowcount OUTPUT;
                IF @Rowcount > 100
                    BEGIN
                        RAISERROR (N'Setting @SkipPartitions = 1 because > 100 partitions were found. To check them, you must set @BringThePain = 1.',0,1) WITH NOWAIT;
                        SET @SkipPartitions = 1;
                        INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,
                                                        index_usage_summary, index_size_summary )
                        VALUES  ( 1, 0 , 
		                       'Some Checks Were Skipped',
                               '@SkipPartitions Forced to 1',
                               'http://FirstResponderKit.org', CAST(@Rowcount AS NVARCHAR(50)) + ' partitions found. To analyze them, use @BringThePain = 1.', 'We try to keep things quick - and warning, running @BringThePain = 1 can take tens of minutes.', '', ''
                                );
                    END;
            END;



		 IF (@SkipPartitions = 0)
			BEGIN			
			IF (SELECT LEFT(@SQLServerProductVersion,
			      CHARINDEX('.',@SQLServerProductVersion,0)-1 )) <= 2147483647 --Make change here 			
			BEGIN
            
			RAISERROR (N'Preferring non-2012 syntax with LEFT JOIN to sys.dm_db_index_operational_stats',0,1) WITH NOWAIT;

            --NOTE: If you want to use the newer syntax for 2012+, you'll have to change 2147483647 to 11 on line ~819
			--This change was made because on a table with lots of paritions, the OUTER APPLY was crazy slow.
            SET @dsql = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
                        SELECT  ' + CAST(@DatabaseID AS NVARCHAR(10)) + ' AS database_id,
                                ps.object_id, 
								s.name,
                                ps.index_id, 
                                ps.partition_number, 
                                ps.row_count,
                                ps.reserved_page_count * 8. / 1024. AS reserved_MB,
                                ps.lob_reserved_page_count * 8. / 1024. AS reserved_LOB_MB,
                                ps.row_overflow_reserved_page_count * 8. / 1024. AS reserved_row_overflow_MB,
                            ' + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN N'par.data_compression_desc ' ELSE N'null as data_compression_desc ' END + N',
                                SUM(os.leaf_insert_count), 
                                SUM(os.leaf_delete_count), 
                                SUM(os.leaf_update_count), 
                                SUM(os.range_scan_count), 
                                SUM(os.singleton_lookup_count),  
                                SUM(os.forwarded_fetch_count),
                                SUM(os.lob_fetch_in_pages), 
                                SUM(os.lob_fetch_in_bytes), 
                                SUM(os.row_overflow_fetch_in_pages),
                                SUM(os.row_overflow_fetch_in_bytes), 
                                SUM(os.row_lock_count), 
                                SUM(os.row_lock_wait_count),
                                SUM(os.row_lock_wait_in_ms), 
                                SUM(os.page_lock_count), 
                                SUM(os.page_lock_wait_count), 
                                SUM(os.page_lock_wait_in_ms),
                                SUM(os.index_lock_promotion_attempt_count), 
                                SUM(os.index_lock_promotion_count), 
								SUM(os.page_latch_wait_count),
								SUM(os.page_latch_wait_in_ms),
								SUM(os.page_io_latch_wait_count),								
								SUM(os.page_io_latch_wait_in_ms)
                    FROM    ' + QUOTENAME(@DatabaseName) + '.sys.dm_db_partition_stats AS ps  
                    JOIN ' + QUOTENAME(@DatabaseName) + '.sys.partitions AS par on ps.partition_id=par.partition_id
                    JOIN ' + QUOTENAME(@DatabaseName) + '.sys.objects AS so ON ps.object_id = so.object_id
                               AND so.is_ms_shipped = 0 /*Exclude objects shipped by Microsoft*/
                               AND so.type <> ''TF'' /*Exclude table valued functions*/
					JOIN ' + QUOTENAME(@DatabaseName) + '.sys.schemas AS s ON s.schema_id = so.schema_id
                    LEFT JOIN ' + QUOTENAME(@DatabaseName) + '.sys.dm_db_index_operational_stats('
                + CAST(@DatabaseID AS NVARCHAR(10)) + ', NULL, NULL,NULL) AS os ON
                    ps.object_id=os.object_id and ps.index_id=os.index_id and ps.partition_number=os.partition_number 
                    WHERE 1=1 
                    ' + CASE WHEN @ObjectID IS NOT NULL THEN N'AND so.object_id=' + CAST(@ObjectID AS NVARCHAR(30)) + N' ' ELSE N' ' END + '
                    ' + CASE WHEN @Filter = 2 THEN N'AND ps.reserved_page_count * 8./1024. > ' + CAST(@FilterMB AS NVARCHAR(5)) + N' ' ELSE N' ' END + '
            GROUP BY ps.object_id, 
								s.name,
                                ps.index_id, 
                                ps.partition_number, 
                                ps.row_count,
                                ps.reserved_page_count,
                                ps.lob_reserved_page_count,
                                ps.row_overflow_reserved_page_count,
                            ' + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN N'par.data_compression_desc ' ELSE N'null as data_compression_desc ' END + N'
			ORDER BY ps.object_id,  ps.index_id, ps.partition_number
            OPTION    ( RECOMPILE );
            ';
        END;
        ELSE
        BEGIN
        RAISERROR (N'Using 2012 syntax to query sys.dm_db_index_operational_stats',0,1) WITH NOWAIT;
		--This is the syntax that will be used if you change 2147483647 to 11 on line ~819.
		--If you have a lot of paritions and this suddenly starts running for a long time, change it back.
         SET @dsql = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
                        SELECT  ' + CAST(@DatabaseID AS NVARCHAR(10)) + ' AS database_id,
                                ps.object_id, 
								s.name,
                                ps.index_id, 
                                ps.partition_number, 
                                ps.row_count,
                                ps.reserved_page_count * 8. / 1024. AS reserved_MB,
                                ps.lob_reserved_page_count * 8. / 1024. AS reserved_LOB_MB,
                                ps.row_overflow_reserved_page_count * 8. / 1024. AS reserved_row_overflow_MB,
                                ' + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN N'par.data_compression_desc ' ELSE N'null as data_compression_desc' END + N',
                                SUM(os.leaf_insert_count), 
                                SUM(os.leaf_delete_count), 
                                SUM(os.leaf_update_count), 
                                SUM(os.range_scan_count), 
                                SUM(os.singleton_lookup_count),  
                                SUM(os.forwarded_fetch_count),
                                SUM(os.lob_fetch_in_pages), 
                                SUM(os.lob_fetch_in_bytes), 
                                SUM(os.row_overflow_fetch_in_pages),
                                SUM(os.row_overflow_fetch_in_bytes), 
                                SUM(os.row_lock_count), 
                                SUM(os.row_lock_wait_count),
                                SUM(os.row_lock_wait_in_ms), 
                                SUM(os.page_lock_count), 
                                SUM(os.page_lock_wait_count), 
                                SUM(os.page_lock_wait_in_ms),
                                SUM(os.index_lock_promotion_attempt_count), 
                                SUM(os.index_lock_promotion_count),
								SUM(os.page_latch_wait_count),
								SUM(os.page_latch_wait_in_ms),
								SUM(os.page_io_latch_wait_count),								
								SUM(os.page_io_latch_wait_in_ms)
                        FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.dm_db_partition_stats AS ps  
                        JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.partitions AS par on ps.partition_id=par.partition_id
                        JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects AS so ON ps.object_id = so.object_id
                                   AND so.is_ms_shipped = 0 /*Exclude objects shipped by Microsoft*/
                                   AND so.type <> ''TF'' /*Exclude table valued functions*/
						JOIN ' + QUOTENAME(@DatabaseName) + '.sys.schemas AS s ON s.schema_id = so.schema_id
                        OUTER APPLY ' + QUOTENAME(@DatabaseName) + N'.sys.dm_db_index_operational_stats('
                    + CAST(@DatabaseID AS NVARCHAR(10)) + N', ps.object_id, ps.index_id,ps.partition_number) AS os
                        WHERE 1=1 
                        ' + CASE WHEN @ObjectID IS NOT NULL THEN N'AND so.object_id=' + CAST(@ObjectID AS NVARCHAR(30)) + N' ' ELSE N' ' END + N'
                        ' + CASE WHEN @Filter = 2 THEN N'AND ps.reserved_page_count * 8./1024. > ' + CAST(@FilterMB AS NVARCHAR(5)) + N' ' ELSE N' ' END + '
	            GROUP BY ps.object_id, 
								s.name,
                                ps.index_id, 
                                ps.partition_number, 
                                ps.row_count,
                                ps.reserved_page_count,
                                ps.lob_reserved_page_count,
                                ps.row_overflow_reserved_page_count,
                            ' + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN N'par.data_compression_desc ' ELSE N'null as data_compression_desc ' END + N'
				ORDER BY ps.object_id,  ps.index_id, ps.partition_number
                OPTION    ( RECOMPILE );
                ';
        END;       

        IF @dsql IS NULL 
            RAISERROR('@dsql is null',16,1);

        RAISERROR (N'Inserting data into #IndexPartitionSanity',0,1) WITH NOWAIT;
        IF @Debug = 1
            BEGIN
                PRINT SUBSTRING(@dsql, 0, 4000);
                PRINT SUBSTRING(@dsql, 4000, 8000);
                PRINT SUBSTRING(@dsql, 8000, 12000);
                PRINT SUBSTRING(@dsql, 12000, 16000);
                PRINT SUBSTRING(@dsql, 16000, 20000);
                PRINT SUBSTRING(@dsql, 20000, 24000);
                PRINT SUBSTRING(@dsql, 24000, 28000);
                PRINT SUBSTRING(@dsql, 28000, 32000);
                PRINT SUBSTRING(@dsql, 32000, 36000);
                PRINT SUBSTRING(@dsql, 36000, 40000);
            END;
        INSERT    #IndexPartitionSanity ( [database_id],
                                          [object_id], 
										  [schema_name],
                                          index_id, 
                                          partition_number, 
                                          row_count, 
                                          reserved_MB,
                                          reserved_LOB_MB, 
                                          reserved_row_overflow_MB,										   
                                          data_compression_desc, 
                                          leaf_insert_count,
                                          leaf_delete_count, 
                                          leaf_update_count, 
                                          range_scan_count,
                                          singleton_lookup_count,
                                          forwarded_fetch_count, 
                                          lob_fetch_in_pages, 
                                          lob_fetch_in_bytes, 
                                          row_overflow_fetch_in_pages,
                                          row_overflow_fetch_in_bytes, 
                                          row_lock_count, 
                                          row_lock_wait_count,
                                          row_lock_wait_in_ms, 
                                          page_lock_count, 
                                          page_lock_wait_count,
                                          page_lock_wait_in_ms, 
                                          index_lock_promotion_attempt_count,
                                          index_lock_promotion_count,
								          page_latch_wait_count,
								          page_latch_wait_in_ms,
								          page_io_latch_wait_count,								
								          page_io_latch_wait_in_ms)
                EXEC sp_executesql @dsql;
        
		END; --End Check For @SkipPartitions = 0



        RAISERROR (N'Inserting data into #MissingIndexes',0,1) WITH NOWAIT;
        SET @dsql=N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
                SELECT  id.database_id, id.object_id, @i_DatabaseName, sc.[name], so.[name], id.statement , gs.avg_total_user_cost, 
                        gs.avg_user_impact, gs.user_seeks, gs.user_scans, gs.unique_compiles,id.equality_columns, 
                        id.inequality_columns,id.included_columns
                FROM    sys.dm_db_missing_index_groups ig
                        JOIN sys.dm_db_missing_index_details id ON ig.index_handle = id.index_handle
                        JOIN sys.dm_db_missing_index_group_stats gs ON ig.index_group_handle = gs.group_handle
                        JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects so on 
                            id.object_id=so.object_id
                        JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.schemas sc on 
                            so.schema_id=sc.schema_id
                WHERE    id.database_id = ' + CAST(@DatabaseID AS NVARCHAR(30)) + '
                ' + CASE WHEN @ObjectID IS NULL THEN N'' 
                    ELSE N'and id.object_id=' + CAST(@ObjectID AS NVARCHAR(30)) 
                END +
        N'OPTION (RECOMPILE);';

        IF @dsql IS NULL 
            RAISERROR('@dsql is null',16,1);
        IF @Debug = 1
            BEGIN
                PRINT SUBSTRING(@dsql, 0, 4000);
                PRINT SUBSTRING(@dsql, 4000, 8000);
                PRINT SUBSTRING(@dsql, 8000, 12000);
                PRINT SUBSTRING(@dsql, 12000, 16000);
                PRINT SUBSTRING(@dsql, 16000, 20000);
                PRINT SUBSTRING(@dsql, 20000, 24000);
                PRINT SUBSTRING(@dsql, 24000, 28000);
                PRINT SUBSTRING(@dsql, 28000, 32000);
                PRINT SUBSTRING(@dsql, 32000, 36000);
                PRINT SUBSTRING(@dsql, 36000, 40000);
            END;
        INSERT    #MissingIndexes ( [database_id], [object_id], [database_name], [schema_name], [table_name], [statement], avg_total_user_cost, 
                                    avg_user_impact, user_seeks, user_scans, unique_compiles, equality_columns, 
                                    inequality_columns, included_columns)
        EXEC sp_executesql @dsql, @params = N'@i_DatabaseName NVARCHAR(128)', @i_DatabaseName = @DatabaseName;

        SET @dsql = N'
            SELECT DB_ID(N' + QUOTENAME(@DatabaseName,'''') + N') AS [database_id], 
			    @i_DatabaseName AS database_name,
				s.name,
                fk_object.name AS foreign_key_name,
                parent_object.[object_id] AS parent_object_id,
                parent_object.name AS parent_object_name,
                referenced_object.[object_id] AS referenced_object_id,
                referenced_object.name AS referenced_object_name,
                fk.is_disabled,
                fk.is_not_trusted,
                fk.is_not_for_replication,
                parent.fk_columns,
                referenced.fk_columns,
                [update_referential_action_desc],
                [delete_referential_action_desc]
            FROM ' + QUOTENAME(@DatabaseName) + N'.sys.foreign_keys fk
            JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects fk_object ON fk.object_id=fk_object.object_id
            JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects parent_object ON fk.parent_object_id=parent_object.object_id
            JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects referenced_object ON fk.referenced_object_id=referenced_object.object_id
			JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS s ON fk.schema_id=s.schema_id
            CROSS APPLY ( SELECT  STUFF( (SELECT  N'', '' + c_parent.name AS fk_columns
                                            FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.foreign_key_columns fkc 
                                            JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.columns c_parent ON fkc.parent_object_id=c_parent.[object_id]
                                                AND fkc.parent_column_id=c_parent.column_id
                                            WHERE    fk.parent_object_id=fkc.parent_object_id
                                                AND fk.[object_id]=fkc.constraint_object_id
                                            ORDER BY fkc.constraint_column_id 
                                    FOR      XML PATH('''') ,
                                              TYPE).value(''.'', ''nvarchar(max)''), 1, 1, '''')/*This is how we remove the first comma*/ ) parent ( fk_columns )
            CROSS APPLY ( SELECT  STUFF( (SELECT  N'', '' + c_referenced.name AS fk_columns
                                            FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.    foreign_key_columns fkc 
                                            JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.columns c_referenced ON fkc.referenced_object_id=c_referenced.[object_id]
                                                AND fkc.referenced_column_id=c_referenced.column_id
                                            WHERE    fk.referenced_object_id=fkc.referenced_object_id
                                                and fk.[object_id]=fkc.constraint_object_id
                                            ORDER BY fkc.constraint_column_id  /*order by col name, we don''t have anything better*/
                                    FOR      XML PATH('''') ,
                                              TYPE).value(''.'', ''nvarchar(max)''), 1, 1, '''') ) referenced ( fk_columns )
            ' + CASE WHEN @ObjectID IS NOT NULL THEN 
                    'WHERE fk.parent_object_id=' + CAST(@ObjectID AS NVARCHAR(30)) + N' OR fk.referenced_object_id=' + CAST(@ObjectID AS NVARCHAR(30)) + N' ' 
                    ELSE N' ' END + '
            ORDER BY parent_object_name, foreign_key_name
			OPTION (RECOMPILE);';
        IF @dsql IS NULL 
            RAISERROR('@dsql is null',16,1);

        RAISERROR (N'Inserting data into #ForeignKeys',0,1) WITH NOWAIT;
        IF @Debug = 1
            BEGIN
                PRINT SUBSTRING(@dsql, 0, 4000);
                PRINT SUBSTRING(@dsql, 4000, 8000);
                PRINT SUBSTRING(@dsql, 8000, 12000);
                PRINT SUBSTRING(@dsql, 12000, 16000);
                PRINT SUBSTRING(@dsql, 16000, 20000);
                PRINT SUBSTRING(@dsql, 20000, 24000);
                PRINT SUBSTRING(@dsql, 24000, 28000);
                PRINT SUBSTRING(@dsql, 28000, 32000);
                PRINT SUBSTRING(@dsql, 32000, 36000);
                PRINT SUBSTRING(@dsql, 36000, 40000);
            END;
        INSERT  #ForeignKeys ( [database_id], [database_name], [schema_name], foreign_key_name, parent_object_id,parent_object_name, referenced_object_id, referenced_object_name,
                                is_disabled, is_not_trusted, is_not_for_replication, parent_fk_columns, referenced_fk_columns,
                                [update_referential_action_desc], [delete_referential_action_desc] )
                EXEC sp_executesql @dsql, @params = N'@i_DatabaseName NVARCHAR(128)', @i_DatabaseName = @DatabaseName;


		IF @SkipStatistics = 0 AND DB_NAME() = @DatabaseName /* Can only get stats in the current database - see https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/issues/1947 */
			BEGIN
		IF  ((PARSENAME(@SQLServerProductVersion, 4) >= 12)
		OR   (PARSENAME(@SQLServerProductVersion, 4) = 11 AND PARSENAME(@SQLServerProductVersion, 2) >= 3000)
		OR   (PARSENAME(@SQLServerProductVersion, 4) = 10 AND PARSENAME(@SQLServerProductVersion, 3) = 50 AND PARSENAME(@SQLServerProductVersion, 2) >= 2500))
		BEGIN
		RAISERROR (N'Gathering Statistics Info With Newer Syntax.',0,1) WITH NOWAIT;
		SET @dsql=N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
				SELECT DB_ID(N' + QUOTENAME(@DatabaseName,'''') + N') AS [database_id], 
				    @i_DatabaseName AS database_name,
					obj.name AS table_name,
					sch.name AS schema_name,
			        ISNULL(i.name, ''System Or User Statistic'') AS index_name,
			        ca.column_names AS column_names,
			        s.name AS statistics_name,
			        CONVERT(DATETIME, ddsp.last_updated) AS last_statistics_update,
			        DATEDIFF(DAY, ddsp.last_updated, GETDATE()) AS days_since_last_stats_update,
			        ddsp.rows,
			        ddsp.rows_sampled,
			        CAST(ddsp.rows_sampled / ( 1. * NULLIF(ddsp.rows, 0) ) * 100 AS DECIMAL(18, 1)) AS percent_sampled,
			        ddsp.steps AS histogram_steps,
			        ddsp.modification_counter,
			        CASE WHEN ddsp.modification_counter > 0
			             THEN CAST(ddsp.modification_counter / ( 1. * NULLIF(ddsp.rows, 0) ) * 100 AS DECIMAL(18, 1))
			             ELSE ddsp.modification_counter
			        END AS percent_modifications,
			        CASE WHEN ddsp.rows < 500 THEN 500
			             ELSE CAST(( ddsp.rows * .20 ) + 500 AS INT)
			        END AS modifications_before_auto_update,
			        ISNULL(i.type_desc, ''System Or User Statistic - N/A'') AS index_type_desc,
			        CONVERT(DATETIME, obj.create_date) AS table_create_date,
			        CONVERT(DATETIME, obj.modify_date) AS table_modify_date,
					s.no_recompute,
					s.has_filter,
					s.filter_definition
			FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.stats AS s
			JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.objects obj
			ON      s.object_id = obj.object_id
			JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.schemas sch
			ON		sch.schema_id = obj.schema_id
			LEFT JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.indexes AS i
			ON      i.object_id = s.object_id
			        AND i.index_id = s.stats_id
			OUTER APPLY ' + QUOTENAME(@DatabaseName) + N'.sys.dm_db_stats_properties(s.object_id, s.stats_id) AS ddsp
			CROSS APPLY ( SELECT  STUFF((SELECT   '', '' + c.name
						  FROM     ' + QUOTENAME(@DatabaseName) + N'.sys.stats_columns AS sc
						  JOIN     ' + QUOTENAME(@DatabaseName) + N'.sys.columns AS c
						  ON       sc.column_id = c.column_id AND sc.object_id = c.object_id
						  WHERE    sc.stats_id = s.stats_id AND sc.object_id = s.object_id
						  ORDER BY sc.stats_column_id
						  FOR   XML PATH(''''), TYPE).value(''.'', ''nvarchar(max)''), 1, 2, '''') 
						) ca (column_names)
			WHERE obj.is_ms_shipped = 0
			OPTION (RECOMPILE);';
			
			IF @dsql IS NULL 
            RAISERROR('@dsql is null',16,1);

			RAISERROR (N'Inserting data into #Statistics',0,1) WITH NOWAIT;
            IF @Debug = 1
                BEGIN
                    PRINT SUBSTRING(@dsql, 0, 4000);
                    PRINT SUBSTRING(@dsql, 4000, 8000);
                    PRINT SUBSTRING(@dsql, 8000, 12000);
                    PRINT SUBSTRING(@dsql, 12000, 16000);
                    PRINT SUBSTRING(@dsql, 16000, 20000);
                    PRINT SUBSTRING(@dsql, 20000, 24000);
                    PRINT SUBSTRING(@dsql, 24000, 28000);
                    PRINT SUBSTRING(@dsql, 28000, 32000);
                    PRINT SUBSTRING(@dsql, 32000, 36000);
                    PRINT SUBSTRING(@dsql, 36000, 40000);
                END;
			INSERT #Statistics ( database_id, database_name, table_name, schema_name, index_name, column_names, statistics_name, last_statistics_update, 
								days_since_last_stats_update, rows, rows_sampled, percent_sampled, histogram_steps, modification_counter, 
								percent_modifications, modifications_before_auto_update, index_type_desc, table_create_date, table_modify_date,
								no_recompute, has_filter, filter_definition)
			
			EXEC sp_executesql @dsql, @params = N'@i_DatabaseName NVARCHAR(128)', @i_DatabaseName = @DatabaseName;
			END;
			ELSE 
			BEGIN
			RAISERROR (N'Gathering Statistics Info With Older Syntax.',0,1) WITH NOWAIT;
			SET @dsql=N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
							SELECT DB_ID(N' + QUOTENAME(@DatabaseName,'''') + N') AS [database_id], 
							    @i_DatabaseName AS database_name,
								obj.name AS table_name,
								sch.name AS schema_name,
						        ISNULL(i.name, ''System Or User Statistic'') AS index_name,
						        ca.column_names  AS column_names,
						        s.name AS statistics_name,
						        CONVERT(DATETIME, STATS_DATE(s.object_id, s.stats_id)) AS last_statistics_update,
						        DATEDIFF(DAY, STATS_DATE(s.object_id, s.stats_id), GETDATE()) AS days_since_last_stats_update,
						        si.rowcnt,
						        si.rowmodctr,
						        CASE WHEN si.rowmodctr > 0 THEN CAST(si.rowmodctr / ( 1. * NULLIF(si.rowcnt, 0) ) * 100 AS DECIMAL(18, 1))
						             ELSE si.rowmodctr
						        END AS percent_modifications,
						        CASE WHEN si.rowcnt < 500 THEN 500
						             ELSE CAST(( si.rowcnt * .20 ) + 500 AS INT)
						        END AS modifications_before_auto_update,
						        ISNULL(i.type_desc, ''System Or User Statistic - N/A'') AS index_type_desc,
						        CONVERT(DATETIME, obj.create_date) AS table_create_date,
						        CONVERT(DATETIME, obj.modify_date) AS table_modify_date,
								s.no_recompute,
								'
								+ CASE WHEN @SQLServerProductVersion NOT LIKE '9%' 
								THEN N's.has_filter,
									   s.filter_definition' 
								ELSE N'NULL AS has_filter,
								       NULL AS filter_definition' END 
						+ N'								
						FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.stats AS s
						INNER HASH JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.sysindexes si
						ON      si.name = s.name AND s.object_id = si.id
						INNER HASH JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.objects obj
						ON      s.object_id = obj.object_id
						INNER HASH JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.schemas sch
						ON		sch.schema_id = obj.schema_id
						LEFT HASH JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.indexes AS i
						ON      i.object_id = s.object_id
						        AND i.index_id = s.stats_id
						CROSS APPLY ( SELECT  STUFF((SELECT   '', '' + c.name
									  FROM     ' + QUOTENAME(@DatabaseName) + N'.sys.stats_columns AS sc
									  JOIN     ' + QUOTENAME(@DatabaseName) + N'.sys.columns AS c
									  ON       sc.column_id = c.column_id AND sc.object_id = c.object_id
									  WHERE    sc.stats_id = s.stats_id AND sc.object_id = s.object_id
									  ORDER BY sc.stats_column_id
									  FOR   XML PATH(''''), TYPE).value(''.'', ''nvarchar(max)''), 1, 2, '''') 
									) ca (column_names)
						WHERE obj.is_ms_shipped = 0
						AND si.rowcnt > 0
						OPTION (RECOMPILE);';

			IF @dsql IS NULL 
            RAISERROR('@dsql is null',16,1);

			RAISERROR (N'Inserting data into #Statistics',0,1) WITH NOWAIT;
            IF @Debug = 1
                BEGIN
                    PRINT SUBSTRING(@dsql, 0, 4000);
                    PRINT SUBSTRING(@dsql, 4000, 8000);
                    PRINT SUBSTRING(@dsql, 8000, 12000);
                    PRINT SUBSTRING(@dsql, 12000, 16000);
                    PRINT SUBSTRING(@dsql, 16000, 20000);
                    PRINT SUBSTRING(@dsql, 20000, 24000);
                    PRINT SUBSTRING(@dsql, 24000, 28000);
                    PRINT SUBSTRING(@dsql, 28000, 32000);
                    PRINT SUBSTRING(@dsql, 32000, 36000);
                    PRINT SUBSTRING(@dsql, 36000, 40000);
                END;
			INSERT #Statistics(database_id, database_name, table_name, schema_name, index_name, column_names, statistics_name, 
								last_statistics_update, days_since_last_stats_update, rows, modification_counter, 
								percent_modifications, modifications_before_auto_update, index_type_desc, table_create_date, table_modify_date,
								no_recompute, has_filter, filter_definition)
			
			EXEC sp_executesql @dsql, @params = N'@i_DatabaseName NVARCHAR(128)', @i_DatabaseName = @DatabaseName;
			END;

			END;

			IF  (PARSENAME(@SQLServerProductVersion, 4) >= 10)
			BEGIN
			RAISERROR (N'Gathering Computed Column Info.',0,1) WITH NOWAIT;
			SET @dsql=N'SELECT DB_ID(@i_DatabaseName) AS [database_id], 
							   @i_DatabaseName AS database_name,
   					   		   t.name AS table_name,
   					           s.name AS schema_name,
   					           c.name AS column_name,
   					           cc.is_nullable,
   					           cc.definition,
   					           cc.uses_database_collation,
   					           cc.is_persisted,
   					           cc.is_computed,
   					   		   CASE WHEN cc.definition LIKE ''%|].|[%'' ESCAPE ''|'' THEN 1 ELSE 0 END AS is_function,
   					   		   ''ALTER TABLE '' + QUOTENAME(s.name) + ''.'' + QUOTENAME(t.name) + 
   					   		   '' ADD '' + QUOTENAME(c.name) + '' AS '' + cc.definition  + 
							   CASE WHEN is_persisted = 1 THEN '' PERSISTED'' ELSE '''' END + '';'' COLLATE DATABASE_DEFAULT AS [column_definition]
   					   FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.computed_columns AS cc
   					   JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.columns AS c
   					   ON      cc.object_id = c.object_id
   					   		   AND cc.column_id = c.column_id
   					   JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.tables AS t
   					   ON      t.object_id = cc.object_id
   					   JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS s
   					   ON      s.schema_id = t.schema_id
					   OPTION (RECOMPILE);';

			IF @dsql IS NULL RAISERROR('@dsql is null',16,1);

			INSERT #ComputedColumns
			        ( database_id, [database_name], table_name, schema_name, column_name, is_nullable, definition, 
					  uses_database_collation, is_persisted, is_computed, is_function, column_definition )			
			EXEC sp_executesql @dsql, @params = N'@i_DatabaseName NVARCHAR(128)', @i_DatabaseName = @DatabaseName;

			END; 
			
			RAISERROR (N'Gathering Trace Flag Information',0,1) WITH NOWAIT;
			INSERT #TraceStatus
			EXEC ('DBCC TRACESTATUS(-1) WITH NO_INFOMSGS');			

			IF  (PARSENAME(@SQLServerProductVersion, 4) >= 13)
			BEGIN
			RAISERROR (N'Gathering Temporal Table Info',0,1) WITH NOWAIT;
			SET @dsql=N'SELECT ' + QUOTENAME(@DatabaseName,'''') + N' AS database_name,
								   DB_ID(N' + QUOTENAME(@DatabaseName,'''') + N') AS [database_id], 
								   s.name AS schema_name,
								   t.name AS table_name, 
								   oa.hsn as history_schema_name,
								   oa.htn AS history_table_name, 
								   c1.name AS start_column_name,
								   c2.name AS end_column_name,
								   p.name AS period_name
							FROM ' + QUOTENAME(@DatabaseName) + N'.sys.periods AS p
							INNER JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.tables AS t
							ON  p.object_id = t.object_id
							INNER JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.columns AS c1
							ON  t.object_id = c1.object_id
							    AND p.start_column_id = c1.column_id
							INNER JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.columns AS c2
							ON  t.object_id = c2.object_id
							    AND p.end_column_id = c2.column_id
							INNER JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS s
							ON t.schema_id = s.schema_id
							CROSS APPLY ( SELECT s2.name as hsn, t2.name htn
							              FROM ' + QUOTENAME(@DatabaseName) + N'.sys.tables AS t2
										  INNER JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS s2
										  ON t2.schema_id = s2.schema_id
							              WHERE t2.object_id = t.history_table_id
							              AND t2.temporal_type = 1 /*History table*/ ) AS oa
							WHERE t.temporal_type IN ( 2, 4 ) /*BOL currently points to these types, but has no definition for 4*/
							OPTION (RECOMPILE);
							';
			
			IF @dsql IS NULL 
			RAISERROR('@dsql is null',16,1);
			
			INSERT #TemporalTables ( database_name, database_id, schema_name, table_name, history_table_name, 
									 history_schema_name, start_column_name, end_column_name, period_name )
					
			EXEC sp_executesql @dsql;

             SET @dsql=N'SELECT DB_ID(@i_DatabaseName) AS [database_id], 
             				   @i_DatabaseName AS database_name,
             		   		   t.name AS table_name,
             		           s.name AS schema_name,
             		           cc.name AS constraint_name,
             		           cc.is_disabled,
             		           cc.definition,
             		           cc.uses_database_collation,
             		           cc.is_not_trusted,
             		   		   CASE WHEN cc.definition LIKE ''%|].|[%'' ESCAPE ''|'' THEN 1 ELSE 0 END AS is_function,
             		   		   ''ALTER TABLE '' + QUOTENAME(s.name) + ''.'' + QUOTENAME(t.name) + 
             		   		   '' ADD CONSTRAINT '' + QUOTENAME(cc.name) + '' CHECK '' + cc.definition  + '';'' COLLATE DATABASE_DEFAULT AS [column_definition]
             		   FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.check_constraints AS cc
             		   JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.tables AS t
             		   ON      t.object_id = cc.parent_object_id
             		   JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS s
             		   ON      s.schema_id = t.schema_id
             		   OPTION (RECOMPILE);';
             
             INSERT #CheckConstraints
                     ( database_id, [database_name], table_name, schema_name, constraint_name, is_disabled, definition, 
             		  uses_database_collation, is_not_trusted, is_function, column_definition )		
             EXEC sp_executesql @dsql, @params = N'@i_DatabaseName NVARCHAR(128)', @i_DatabaseName = @DatabaseName;


            SET @dsql=N'SELECT DB_ID(@i_DatabaseName) AS [database_id], 
             				   @i_DatabaseName AS database_name,
                               s.name AS missing_schema_name,
                               t.name AS missing_table_name,
                               i.name AS missing_index_name,
                               c.name AS missing_column_name
                        FROM   ' + QUOTENAME(@DatabaseName) + N'.sys.sql_expression_dependencies AS sed
                        JOIN   ' + QUOTENAME(@DatabaseName) + N'.sys.tables AS t
                            ON t.object_id = sed.referenced_id
                        JOIN   ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS s
                            ON t.schema_id = s.schema_id
                        JOIN   ' + QUOTENAME(@DatabaseName) + N'.sys.indexes AS i
                            ON i.object_id = sed.referenced_id
                            AND i.index_id = sed.referencing_minor_id
                        JOIN   ' + QUOTENAME(@DatabaseName) + N'.sys.columns AS c
                            ON c.object_id = sed.referenced_id
                            AND c.column_id = sed.referenced_minor_id
                        WHERE  sed.referencing_class = 7
                        AND    sed.referenced_class = 1
                        AND    i.has_filter = 1
                        AND    NOT EXISTS (   SELECT 1/0
                                              FROM   ' + QUOTENAME(@DatabaseName) + N'.sys.index_columns AS ic
                                              WHERE  ic.index_id = sed.referencing_minor_id
                                              AND    ic.column_id = sed.referenced_minor_id
                                              AND    ic.object_id = sed.referenced_id )
                        OPTION(RECOMPILE);'

                INSERT #FilteredIndexes ( database_id, database_name, schema_name, table_name, index_name, column_name )
                EXEC sp_executesql @dsql, @params = N'@i_DatabaseName NVARCHAR(128)', @i_DatabaseName = @DatabaseName;


    END;
			
END;                    
END TRY
BEGIN CATCH
        RAISERROR (N'Failure populating temp tables.', 0,1) WITH NOWAIT;

        IF @dsql IS NOT NULL
        BEGIN
            SET @msg= 'Last @dsql: ' + @dsql;
            RAISERROR(@msg, 0, 1) WITH NOWAIT;
        END;

        SELECT  @msg = @DatabaseName + N' database failed to process. ' + ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
        RAISERROR (@msg,@ErrorSeverity, @ErrorState )WITH NOWAIT;
        
        
        WHILE @@trancount > 0 
            ROLLBACK;

        RETURN;
END CATCH;
 FETCH NEXT FROM c1 INTO @DatabaseName;
END;
DEALLOCATE c1;






----------------------------------------
--STEP 2: PREP THE TEMP TABLES
--EVERY QUERY AFTER THIS GOES AGAINST TEMP TABLES ONLY.
----------------------------------------

RAISERROR (N'Updating #IndexSanity.key_column_names',0,1) WITH NOWAIT;
UPDATE    #IndexSanity
SET        key_column_names = D1.key_column_names
FROM    #IndexSanity si
        CROSS APPLY ( SELECT  RTRIM(STUFF( (SELECT  N', ' + c.column_name 
                            + N' {' + system_type_name + N' ' + CAST(max_length AS NVARCHAR(50)) +  N'}'
                                AS col_definition
                            FROM    #IndexColumns c
                            WHERE    c.database_id= si.database_id
									AND c.schema_name = si.schema_name
                                    AND c.object_id = si.object_id
                                    AND c.index_id = si.index_id
                                    AND c.is_included_column = 0 /*Just Keys*/
                                    AND c.key_ordinal > 0 /*Ignore non-key columns, such as partitioning keys*/
                            ORDER BY c.object_id, c.index_id, c.key_ordinal    
                    FOR      XML PATH('') ,TYPE).value('.', 'nvarchar(max)'), 1, 1, ''))
                                ) D1 ( key_column_names );

RAISERROR (N'Updating #IndexSanity.partition_key_column_name',0,1) WITH NOWAIT;
UPDATE    #IndexSanity
SET        partition_key_column_name = D1.partition_key_column_name
FROM    #IndexSanity si
        CROSS APPLY ( SELECT  RTRIM(STUFF( (SELECT  N', ' + c.column_name AS col_definition
                            FROM    #IndexColumns c
                            WHERE    c.database_id= si.database_id
									AND c.schema_name = si.schema_name
                                    AND c.object_id = si.object_id
                                    AND c.index_id = si.index_id
                                    AND c.partition_ordinal <> 0 /*Just Partitioned Keys*/
                            ORDER BY c.object_id, c.index_id, c.key_ordinal    
                    FOR      XML PATH('') , TYPE).value('.', 'nvarchar(max)'), 1, 1,''))) D1 
                                ( partition_key_column_name );

RAISERROR (N'Updating #IndexSanity.key_column_names_with_sort_order',0,1) WITH NOWAIT;
UPDATE    #IndexSanity
SET        key_column_names_with_sort_order = D2.key_column_names_with_sort_order
FROM    #IndexSanity si
        CROSS APPLY ( SELECT  RTRIM(STUFF( (SELECT  N', ' + c.column_name + CASE c.is_descending_key
                            WHEN 1 THEN N' DESC'
                            ELSE N''
							END
                        + N' {' + system_type_name + N' ' + CAST(max_length AS NVARCHAR(50)) +  N'}'
                            AS col_definition
                    FROM    #IndexColumns c
                    WHERE    c.database_id= si.database_id
							AND c.schema_name = si.schema_name
                            AND c.object_id = si.object_id
                            AND c.index_id = si.index_id
                            AND c.is_included_column = 0 /*Just Keys*/
                            AND c.key_ordinal > 0 /*Ignore non-key columns, such as partitioning keys*/
                    ORDER BY c.object_id, c.index_id, c.key_ordinal    
            FOR      XML PATH('') , TYPE).value('.', 'nvarchar(max)'), 1, 1, ''))
            ) D2 ( key_column_names_with_sort_order );

RAISERROR (N'Updating #IndexSanity.key_column_names_with_sort_order_no_types (for create tsql)',0,1) WITH NOWAIT;
UPDATE    #IndexSanity
SET        key_column_names_with_sort_order_no_types = D2.key_column_names_with_sort_order_no_types
FROM    #IndexSanity si
        CROSS APPLY ( SELECT  RTRIM(STUFF( (SELECT  N', ' + QUOTENAME(c.column_name) + CASE c.is_descending_key
                            WHEN 1 THEN N' DESC'
                            ELSE N''
                        END AS col_definition
                    FROM    #IndexColumns c
                    WHERE    c.database_id= si.database_id
							AND c.schema_name = si.schema_name
                            AND c.object_id = si.object_id
                            AND c.index_id = si.index_id
                            AND c.is_included_column = 0 /*Just Keys*/
                            AND c.key_ordinal > 0 /*Ignore non-key columns, such as partitioning keys*/
                    ORDER BY c.object_id, c.index_id, c.key_ordinal    
            FOR      XML PATH('') , TYPE).value('.', 'nvarchar(max)'), 1, 1, ''))
            ) D2 ( key_column_names_with_sort_order_no_types );

RAISERROR (N'Updating #IndexSanity.include_column_names',0,1) WITH NOWAIT;
UPDATE    #IndexSanity
SET        include_column_names = D3.include_column_names
FROM    #IndexSanity si
        CROSS APPLY ( SELECT  RTRIM(STUFF( (SELECT  N', ' + c.column_name
                        + N' {' + system_type_name + N' ' + CAST(max_length AS NVARCHAR(50)) +  N'}'
                        FROM    #IndexColumns c
                        WHERE    c.database_id= si.database_id
								AND c.schema_name = si.schema_name
                                AND c.object_id = si.object_id
                                AND c.index_id = si.index_id
                                AND c.is_included_column = 1 /*Just includes*/
                        ORDER BY c.column_name /*Order doesn't matter in includes, 
                                this is here to make rows easy to compare.*/ 
                FOR      XML PATH('') ,  TYPE).value('.', 'nvarchar(max)'), 1, 1, ''))
                ) D3 ( include_column_names );

RAISERROR (N'Updating #IndexSanity.include_column_names_no_types (for create tsql)',0,1) WITH NOWAIT;
UPDATE    #IndexSanity
SET        include_column_names_no_types = D3.include_column_names_no_types
FROM    #IndexSanity si
        CROSS APPLY ( SELECT  RTRIM(STUFF( (SELECT  N', ' + QUOTENAME(c.column_name)
                        FROM    #IndexColumns c
                                WHERE    c.database_id= si.database_id
								AND c.schema_name = si.schema_name
                                AND c.object_id = si.object_id
                                AND c.index_id = si.index_id
                                AND c.is_included_column = 1 /*Just includes*/
                        ORDER BY c.column_name /*Order doesn't matter in includes, 
                                this is here to make rows easy to compare.*/ 
                FOR      XML PATH('') ,  TYPE).value('.', 'nvarchar(max)'), 1, 1, ''))
                ) D3 ( include_column_names_no_types );

RAISERROR (N'Updating #IndexSanity.count_key_columns and count_include_columns',0,1) WITH NOWAIT;
UPDATE    #IndexSanity
SET        count_included_columns = D4.count_included_columns,
        count_key_columns = D4.count_key_columns
FROM    #IndexSanity si
        CROSS APPLY ( SELECT  SUM(CASE WHEN is_included_column = 'true' THEN 1
                                            ELSE 0
                                    END) AS count_included_columns,
                                SUM(CASE WHEN is_included_column = 'false' AND c.key_ordinal > 0 THEN 1
                                            ELSE 0
                                    END) AS count_key_columns
                        FROM        #IndexColumns c
                            WHERE    c.database_id= si.database_id
									AND c.schema_name = si.schema_name
                                    AND c.object_id = si.object_id
                                AND c.index_id = si.index_id 
                                ) AS D4 ( count_included_columns, count_key_columns );

RAISERROR (N'Updating index_sanity_id on #IndexPartitionSanity',0,1) WITH NOWAIT;
UPDATE    #IndexPartitionSanity
SET        index_sanity_id = i.index_sanity_id
FROM #IndexPartitionSanity ps
        JOIN #IndexSanity i ON ps.[object_id] = i.[object_id]
                                AND ps.index_id = i.index_id
                                AND i.database_id = ps.database_id
								AND i.schema_name = ps.schema_name;


RAISERROR (N'Inserting data into #IndexSanitySize',0,1) WITH NOWAIT;
INSERT    #IndexSanitySize ( [index_sanity_id], [database_id], [schema_name], partition_count, total_rows, total_reserved_MB,
                                total_reserved_LOB_MB, total_reserved_row_overflow_MB, total_range_scan_count,
                                total_singleton_lookup_count, total_leaf_delete_count, total_leaf_update_count, 
                                total_forwarded_fetch_count,total_row_lock_count,
                                total_row_lock_wait_count, total_row_lock_wait_in_ms, avg_row_lock_wait_in_ms,
                                total_page_lock_count, total_page_lock_wait_count, total_page_lock_wait_in_ms,
                                avg_page_lock_wait_in_ms, total_index_lock_promotion_attempt_count, 
                                total_index_lock_promotion_count, data_compression_desc, 
								page_latch_wait_count, page_latch_wait_in_ms, page_io_latch_wait_count, page_io_latch_wait_in_ms)
        SELECT  index_sanity_id, ipp.database_id, ipp.schema_name,						
				COUNT(*), SUM(row_count), SUM(reserved_MB), SUM(reserved_LOB_MB),
                SUM(reserved_row_overflow_MB), 
                SUM(range_scan_count),
                SUM(singleton_lookup_count),
                SUM(leaf_delete_count), 
                SUM(leaf_update_count),
                SUM(forwarded_fetch_count),
                SUM(row_lock_count), 
                SUM(row_lock_wait_count),
                SUM(row_lock_wait_in_ms), 
                CASE WHEN SUM(row_lock_wait_in_ms) > 0 THEN
                    SUM(row_lock_wait_in_ms)/(1.*SUM(row_lock_wait_count))
                ELSE 0 END AS avg_row_lock_wait_in_ms,           
                SUM(page_lock_count), 
                SUM(page_lock_wait_count),
                SUM(page_lock_wait_in_ms), 
                CASE WHEN SUM(page_lock_wait_in_ms) > 0 THEN
                    SUM(page_lock_wait_in_ms)/(1.*SUM(page_lock_wait_count))
                ELSE 0 END AS avg_page_lock_wait_in_ms,           
                SUM(index_lock_promotion_attempt_count),
                SUM(index_lock_promotion_count),
                LEFT(MAX(data_compression_info.data_compression_rollup),4000),
				SUM(page_latch_wait_count), 
				SUM(page_latch_wait_in_ms), 
				SUM(page_io_latch_wait_count), 
				SUM(page_io_latch_wait_in_ms)
        FROM #IndexPartitionSanity ipp
        /* individual partitions can have distinct compression settings, just roll them into a list here*/
        OUTER APPLY (SELECT STUFF((
            SELECT  N', ' + data_compression_desc
            FROM #IndexPartitionSanity ipp2
            WHERE ipp.[object_id]=ipp2.[object_id]
                AND ipp.[index_id]=ipp2.[index_id]
                AND ipp.database_id = ipp2.database_id
				AND ipp.schema_name = ipp2.schema_name
            ORDER BY ipp2.partition_number
            FOR      XML PATH(''),TYPE).value('.', 'nvarchar(max)'), 1, 1, '')) 
                data_compression_info(data_compression_rollup)
        GROUP BY index_sanity_id, ipp.database_id, ipp.schema_name
        ORDER BY index_sanity_id 
OPTION    ( RECOMPILE );

RAISERROR (N'Determining index usefulness',0,1) WITH NOWAIT;
UPDATE #MissingIndexes 
SET is_low = CASE WHEN (user_seeks + user_scans) < 5000 
					    OR unique_compiles = 1
				  THEN 1
				  ELSE 0 
			  END;

RAISERROR (N'Updating #IndexSanity.referenced_by_foreign_key',0,1) WITH NOWAIT;
UPDATE #IndexSanity
    SET is_referenced_by_foreign_key=1
FROM #IndexSanity s
JOIN #ForeignKeys fk ON 
    s.object_id=fk.referenced_object_id
    AND s.database_id=fk.database_id
    AND LEFT(s.key_column_names,LEN(fk.referenced_fk_columns)) = fk.referenced_fk_columns;

RAISERROR (N'Update index_secret on #IndexSanity for NC indexes.',0,1) WITH NOWAIT;
UPDATE nc 
SET secret_columns=
    N'[' + 
    CASE tb.count_key_columns WHEN 0 THEN '1' ELSE CAST(tb.count_key_columns AS NVARCHAR(10)) END +
    CASE nc.is_unique WHEN 1 THEN N' INCLUDE' ELSE N' KEY' END +
    CASE WHEN tb.count_key_columns > 1 THEN  N'S] ' ELSE N'] ' END +
    CASE tb.index_id WHEN 0 THEN '[RID]' ELSE LTRIM(tb.key_column_names) +
        /* Uniquifiers only needed on non-unique clustereds-- not heaps */
        CASE tb.is_unique WHEN 0 THEN ' [UNIQUIFIER]' ELSE N'' END
    END
    , count_secret_columns=
    CASE tb.index_id WHEN 0 THEN 1 ELSE 
        tb.count_key_columns +
            CASE tb.is_unique WHEN 0 THEN 1 ELSE 0 END
    END
FROM #IndexSanity AS nc
JOIN #IndexSanity AS tb ON nc.object_id=tb.object_id
	AND nc.database_id = tb.database_id
	AND nc.schema_name = tb.schema_name
    AND tb.index_id IN (0,1) 
WHERE nc.index_id > 1;

RAISERROR (N'Update index_secret on #IndexSanity for heaps and non-unique clustered.',0,1) WITH NOWAIT;
UPDATE tb
SET secret_columns=    CASE tb.index_id WHEN 0 THEN '[RID]' ELSE '[UNIQUIFIER]' END
    , count_secret_columns = 1
FROM #IndexSanity AS tb
WHERE tb.index_id = 0 /*Heaps-- these have the RID */
    OR (tb.index_id=1 AND tb.is_unique=0); /* Non-unique CX: has uniquifer (when needed) */


RAISERROR (N'Populate #IndexCreateTsql.',0,1) WITH NOWAIT;
INSERT #IndexCreateTsql (index_sanity_id, create_tsql)
SELECT
    index_sanity_id,
    ISNULL (
    /* Script drops for disabled non-clustered indexes*/
    CASE WHEN is_disabled = 1 AND index_id <> 1
         THEN N'--DROP INDEX ' + QUOTENAME([index_name]) + N' ON '
            + QUOTENAME([schema_name]) + N'.' + QUOTENAME([object_name])
    ELSE
        CASE index_id WHEN 0 THEN N'ALTER TABLE ' + QUOTENAME([database_name]) + N'.' + QUOTENAME([schema_name]) + N'.' + QUOTENAME([object_name])  + ' REBUILD;'
        ELSE 
            CASE WHEN is_XML = 1 OR is_spatial=1 THEN N'' /* Not even trying for these just yet...*/
            ELSE 
                CASE WHEN is_primary_key=1 THEN
                    N'ALTER TABLE ' + QUOTENAME([schema_name]) +
                        N'.' + QUOTENAME([object_name]) + 
                        N' ADD CONSTRAINT [' +
                        index_name + 
                        N'] PRIMARY KEY ' + 
                        CASE WHEN index_id=1 THEN N'CLUSTERED (' ELSE N'(' END +
                        key_column_names_with_sort_order_no_types + N' )' 
                    WHEN is_CX_columnstore= 1 THEN
                            N'CREATE CLUSTERED COLUMNSTORE INDEX ' + QUOTENAME(index_name) + N' on ' + QUOTENAME([schema_name]) + '.' + QUOTENAME([object_name])
                ELSE /*Else not a PK or cx columnstore */ 
                    N'CREATE ' + 
                    CASE WHEN is_unique=1 THEN N'UNIQUE ' ELSE N'' END +
                    CASE WHEN index_id=1 THEN N'CLUSTERED ' ELSE N'' END +
                    CASE WHEN is_NC_columnstore=1 THEN N'NONCLUSTERED COLUMNSTORE ' 
                    ELSE N'' END +
                    N'INDEX ['
                            + index_name + N'] ON ' + 
                        QUOTENAME([schema_name]) + '.' + QUOTENAME([object_name]) + 
                            CASE WHEN is_NC_columnstore=1 THEN 
                                N' (' + ISNULL(include_column_names_no_types,'') +  N' )' 
                            ELSE /*Else not colunnstore */ 
                                N' (' + ISNULL(key_column_names_with_sort_order_no_types,'') +  N' )' 
                                + CASE WHEN include_column_names_no_types IS NOT NULL THEN 
                                    N' INCLUDE (' + include_column_names_no_types + N')' 
                                    ELSE N'' 
                                END
                            END /*End non-colunnstore case */ 
                        + CASE WHEN filter_definition <> N'' THEN N' WHERE ' + filter_definition ELSE N'' END
                    END /*End Non-PK index CASE */ 
                + CASE WHEN is_NC_columnstore=0 AND is_CX_columnstore=0 THEN
                    N' WITH (' 
                        + N'FILLFACTOR=' + CASE fill_factor WHEN 0 THEN N'100' ELSE CAST(fill_factor AS NVARCHAR(5)) END + ', '
                        + N'ONLINE=?, SORT_IN_TEMPDB=?, DATA_COMPRESSION=?'
                    + N')'
                ELSE N'' END
                + N';'
                END /*End non-spatial and non-xml CASE */ 
        END
    END, '[Unknown Error]')
        AS create_tsql
FROM #IndexSanity;
	  
RAISERROR (N'Populate #PartitionCompressionInfo.',0,1) WITH NOWAIT;
WITH maps
    AS
     (
         SELECT ips.index_sanity_id,
                ips.partition_number,
                ips.data_compression_desc,
                ips.partition_number - ROW_NUMBER() OVER ( PARTITION BY ips.index_sanity_id, ips.data_compression_desc
                                                           ORDER BY ips.partition_number ) AS rn
         FROM   #IndexPartitionSanity AS ips
     )
SELECT *
INTO   #maps
FROM   maps;

WITH grps
    AS
     (
         SELECT   MIN(maps.partition_number) AS MinKey,
                  MAX(maps.partition_number) AS MaxKey,
                  maps.index_sanity_id,
                  maps.data_compression_desc
         FROM     #maps AS maps
         GROUP BY maps.rn, maps.index_sanity_id, maps.data_compression_desc
     )
SELECT *
INTO   #grps
FROM   grps;

INSERT #PartitionCompressionInfo ( index_sanity_id, partition_compression_detail )
SELECT DISTINCT
       grps.index_sanity_id,
       SUBSTRING(
           ( STUFF(
                 (   SELECT   N', ' + N' Partition'
                              + CASE
                                     WHEN grps2.MinKey < grps2.MaxKey
                                     THEN
                                     + N's ' + CAST(grps2.MinKey AS NVARCHAR(10)) + N' - '
                                     + CAST(grps2.MaxKey AS NVARCHAR(10)) + N' use ' + grps2.data_compression_desc
                                     ELSE
                                     N' ' + CAST(grps2.MinKey AS NVARCHAR(10)) + N' uses ' + grps2.data_compression_desc
                                END AS Partitions
                     FROM     #grps AS grps2
                     WHERE    grps2.index_sanity_id = grps.index_sanity_id
                     ORDER BY grps2.MinKey, grps2.MaxKey
                     FOR XML PATH(''), TYPE ).value('.', 'NVARCHAR(MAX)'), 1, 1, '')), 0, 8000) AS partition_compression_detail
FROM   #grps AS grps;
		
RAISERROR (N'Update #PartitionCompressionInfo.',0,1) WITH NOWAIT;
UPDATE sz
SET sz.data_compression_desc = pci.partition_compression_detail
FROM #IndexSanitySize sz
JOIN #PartitionCompressionInfo AS pci
ON pci.index_sanity_id = sz.index_sanity_id;

RAISERROR (N'Update #IndexSanity for filtered indexes with columns not in the index definition.',0,1) WITH NOWAIT;
UPDATE    #IndexSanity
SET        filter_columns_not_in_index = D1.filter_columns_not_in_index
FROM    #IndexSanity si
        CROSS APPLY ( SELECT  RTRIM(STUFF( (SELECT  N', ' + c.column_name AS col_definition
                            FROM    #FilteredIndexes AS c
                            WHERE    c.database_id= si.database_id
									AND c.schema_name = si.schema_name
                                    AND c.table_name = si.object_name
                                    AND c.index_name = si.index_name   
                                    ORDER BY c.index_sanity_id
                    FOR      XML PATH('') , TYPE).value('.', 'nvarchar(max)'), 1, 1,''))) D1 
                                ( filter_columns_not_in_index );


IF @Debug = 1
BEGIN
    SELECT '#IndexSanity' AS table_name, * FROM  #IndexSanity;
    SELECT '#IndexPartitionSanity' AS table_name, * FROM  #IndexPartitionSanity;
    SELECT '#IndexSanitySize' AS table_name, * FROM  #IndexSanitySize;
    SELECT '#IndexColumns' AS table_name, * FROM  #IndexColumns;
    SELECT '#MissingIndexes' AS table_name, * FROM  #MissingIndexes;
    SELECT '#ForeignKeys' AS table_name, * FROM  #ForeignKeys;
    SELECT '#BlitzIndexResults' AS table_name, * FROM  #BlitzIndexResults;
    SELECT '#IndexCreateTsql' AS table_name, * FROM  #IndexCreateTsql;
    SELECT '#DatabaseList' AS table_name, * FROM  #DatabaseList;
    SELECT '#Statistics' AS table_name, * FROM  #Statistics;
    SELECT '#PartitionCompressionInfo' AS table_name, * FROM  #PartitionCompressionInfo;
    SELECT '#ComputedColumns' AS table_name, * FROM  #ComputedColumns;
    SELECT '#TraceStatus' AS table_name, * FROM  #TraceStatus;   
    SELECT '#CheckConstraints' AS table_name, * FROM  #CheckConstraints;   
    SELECT '#FilteredIndexes' AS table_name, * FROM  #FilteredIndexes;                   
END


----------------------------------------
--STEP 3: DIAGNOSE THE PATIENT
----------------------------------------


BEGIN TRY
----------------------------------------
--If @TableName is specified, just return information for that table.
--The @Mode parameter doesn't matter if you're looking at a specific table.
----------------------------------------
IF @TableName IS NOT NULL
BEGIN
    RAISERROR(N'@TableName specified, giving detail only on that table.', 0,1) WITH NOWAIT;

    --We do a left join here in case this is a disabled NC.
    --In that case, it won't have any size info/pages allocated.
 
   	
	   WITH table_mode_cte AS (
        SELECT 
            s.db_schema_object_indexid, 
            s.key_column_names,
            s.index_definition, 
            ISNULL(s.secret_columns,N'') AS secret_columns,
            s.fill_factor,
            s.index_usage_summary, 
            sz.index_op_stats,
            ISNULL(sz.index_size_summary,'') /*disabled NCs will be null*/ AS index_size_summary,
			partition_compression_detail ,
            ISNULL(sz.index_lock_wait_summary,'') AS index_lock_wait_summary,
            s.is_referenced_by_foreign_key,
            (SELECT COUNT(*)
                FROM #ForeignKeys fk WHERE fk.parent_object_id=s.object_id
                AND PATINDEX (fk.parent_fk_columns, s.key_column_names)=1) AS FKs_covered_by_index,
            s.last_user_seek,
            s.last_user_scan,
            s.last_user_lookup,
            s.last_user_update,
            s.create_date,
            s.modify_date,
			sz.page_latch_wait_count,
			CONVERT(VARCHAR(10), (sz.page_latch_wait_in_ms / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (sz.page_latch_wait_in_ms / 1000), 0), 108) AS page_latch_wait_time,
			sz.page_io_latch_wait_count,
			CONVERT(VARCHAR(10), (sz.page_io_latch_wait_in_ms / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (sz.page_io_latch_wait_in_ms / 1000), 0), 108) AS page_io_latch_wait_time,
            ct.create_tsql,
            CASE 
                WHEN s.is_primary_key = 1 AND s.index_definition <> '[HEAP]'
                THEN N'--ALTER TABLE ' + QUOTENAME(s.[schema_name]) + N'.' + QUOTENAME(s.[object_name])
                        + N' DROP CONSTRAINT ' + QUOTENAME(s.index_name) + N';'
                WHEN s.is_primary_key = 0 AND s.index_definition <> '[HEAP]'
                    THEN N'--DROP INDEX '+ QUOTENAME(s.index_name) + N' ON ' + 
                        QUOTENAME(s.[schema_name]) + N'.' + QUOTENAME(s.[object_name]) + N';'
                ELSE N''
            END AS drop_tsql,
            1 AS display_order
        FROM #IndexSanity s
        LEFT JOIN #IndexSanitySize sz ON 
            s.index_sanity_id=sz.index_sanity_id
        LEFT JOIN #IndexCreateTsql ct ON 
            s.index_sanity_id=ct.index_sanity_id
		LEFT JOIN #PartitionCompressionInfo pci ON 
			pci.index_sanity_id = s.index_sanity_id
        WHERE s.[object_id]=@ObjectID
        UNION ALL
        SELECT  N'Database ' + QUOTENAME(@DatabaseName) + N' as of ' + CONVERT(NVARCHAR(16),GETDATE(),121) +             
                N' (' + @ScriptVersionName + ')' ,   
                N'SQL Server First Responder Kit' ,   
                N'http://FirstResponderKit.org' ,
                N'From Your Community Volunteers',
                NULL,@DaysUptimeInsertValue,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
                0 AS display_order
    )
    SELECT 
            db_schema_object_indexid AS [Details: db_schema.table.index(indexid)], 
            index_definition AS [Definition: [Property]] ColumnName {datatype maxbytes}], 
            secret_columns AS [Secret Columns],
            fill_factor AS [Fillfactor],
            index_usage_summary AS [Usage Stats], 
            index_op_stats AS [Op Stats],
            index_size_summary AS [Size],
			partition_compression_detail AS [Compression Type],
            index_lock_wait_summary AS [Lock Waits],
            is_referenced_by_foreign_key AS [Referenced by FK?],
            FKs_covered_by_index AS [FK Covered by Index?],
            last_user_seek AS [Last User Seek],
            last_user_scan AS [Last User Scan],
            last_user_lookup AS [Last User Lookup],
            last_user_update AS [Last User Write],
            create_date AS [Created],
            modify_date AS [Last Modified],
			page_latch_wait_count AS [Page Latch Wait Count],
			page_latch_wait_time as [Page Latch Wait Time (D:H:M:S)],
			page_io_latch_wait_count AS [Page IO Latch Wait Count],								
			page_io_latch_wait_time as [Page IO Latch Wait Time (D:H:M:S)],
            create_tsql AS [Create TSQL],
            drop_tsql AS [Drop TSQL]
    FROM table_mode_cte
    ORDER BY display_order ASC, key_column_names ASC
    OPTION    ( RECOMPILE );                        

    IF (SELECT TOP 1 [object_id] FROM    #MissingIndexes mi) IS NOT NULL
    BEGIN;

	WITH create_date AS (
						SELECT i.database_id,
							   i.schema_name,
							   i.[object_id], 
							   ISNULL(NULLIF(MAX(DATEDIFF(DAY, i.create_date, SYSDATETIME())), 0), 1) AS create_days
						FROM #IndexSanity AS i
						GROUP BY i.database_id, i.schema_name, i.object_id
						)
        SELECT  N'Missing index.' AS Finding ,
                N'http://BrentOzar.com/go/Indexaphobia' AS URL ,
                mi.[statement] + 
                ' Est. Benefit: '
                    + CASE WHEN magic_benefit_number >= 922337203685477 THEN '>= 922,337,203,685,477'
                    ELSE REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(
                                        (magic_benefit_number / CASE WHEN cd.create_days < @DaysUptime THEN cd.create_days ELSE @DaysUptime END)
                                        AS BIGINT) AS MONEY), 1), '.00', '')
                    END AS [Estimated Benefit],
                missing_index_details AS [Missing Index Request] ,
                index_estimated_impact AS [Estimated Impact],
                create_tsql AS [Create TSQL]
        FROM    #MissingIndexes mi
		LEFT JOIN create_date AS cd
		ON mi.[object_id] =  cd.object_id 
		AND mi.database_id = cd.database_id
		AND mi.schema_name = cd.schema_name
        WHERE   mi.[object_id] = @ObjectID
                /* Minimum benefit threshold = 100k/day of uptime OR since table creation date, whichever is lower*/
        AND (magic_benefit_number / CASE WHEN cd.create_days < @DaysUptime THEN cd.create_days ELSE @DaysUptime END) >= 100000
        ORDER BY magic_benefit_number DESC
        OPTION    ( RECOMPILE );
    END;       
    ELSE     
    SELECT 'No missing indexes.' AS finding;

    SELECT   
        column_name AS [Column Name],
        (SELECT COUNT(*)  
            FROM #IndexColumns c2 
            WHERE c2.column_name=c.column_name
            AND c2.key_ordinal IS NOT NULL)
        + CASE WHEN c.index_id = 1 AND c.key_ordinal IS NOT NULL THEN
            -1+ (SELECT COUNT(DISTINCT index_id)
            FROM #IndexColumns c3
            WHERE c3.index_id NOT IN (0,1))
            ELSE 0 END
                AS [Found In],
        system_type_name + 
            CASE max_length WHEN -1 THEN N' (max)' ELSE
                CASE  
                    WHEN system_type_name IN (N'char',N'varchar',N'binary',N'varbinary') THEN N' (' + CAST(max_length AS NVARCHAR(20)) + N')' 
                    WHEN system_type_name IN (N'nchar',N'nvarchar') THEN N' (' + CAST(max_length/2 AS NVARCHAR(20)) + N')' 
                    ELSE '' 
                END
            END
            AS [Type],
        CASE is_computed WHEN 1 THEN 'yes' ELSE '' END AS [Computed?],
        max_length AS [Length (max bytes)],
        [precision] AS [Prec],
        [scale] AS [Scale],
        CASE is_nullable WHEN 1 THEN 'yes' ELSE '' END AS [Nullable?],
        CASE is_identity WHEN 1 THEN 'yes' ELSE '' END AS [Identity?],
        CASE is_replicated WHEN 1 THEN 'yes' ELSE '' END AS [Replicated?],
        CASE is_sparse WHEN 1 THEN 'yes' ELSE '' END AS [Sparse?],
        CASE is_filestream WHEN 1 THEN 'yes' ELSE '' END AS [Filestream?],
        collation_name AS [Collation]
    FROM #IndexColumns AS c
    WHERE index_id IN (0,1);

    IF (SELECT TOP 1 parent_object_id FROM #ForeignKeys) IS NOT NULL
    BEGIN
        SELECT [database_name] + N':' + parent_object_name + N': ' + foreign_key_name AS [Foreign Key],
            parent_fk_columns AS [Foreign Key Columns],
            referenced_object_name AS [Referenced Table],
            referenced_fk_columns AS [Referenced Table Columns],
            is_disabled AS [Is Disabled?],
            is_not_trusted AS [Not Trusted?],
            is_not_for_replication [Not for Replication?],
            [update_referential_action_desc] AS [Cascading Updates?],
            [delete_referential_action_desc] AS [Cascading Deletes?]
        FROM #ForeignKeys
        ORDER BY [Foreign Key]
        OPTION    ( RECOMPILE );
    END;
    ELSE
    SELECT 'No foreign keys.' AS finding;

    /* Show histograms for all stats on this table. More info: https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/issues/1900 */
    IF EXISTS (SELECT * FROM sys.all_objects WHERE name = 'dm_db_stats_histogram')
    BEGIN
        SET @dsql=N'SELECT s.name AS [Stat Name], c.name AS [Leading Column Name], hist.step_number AS [Step Number], 
                        hist.range_high_key AS [Range High Key], hist.range_rows AS [Range Rows], 
                        hist.equal_rows AS [Equal Rows], hist.distinct_range_rows AS [Distinct Range Rows], hist.average_range_rows AS [Average Range Rows],
                        s.auto_created AS [Auto-Created], s.user_created AS [User-Created],
                        props.last_updated AS [Last Updated], s.stats_id AS [StatsID]
                    FROM sys.stats AS s
                    INNER JOIN sys.stats_columns sc ON s.object_id = sc.object_id AND s.stats_id = sc.stats_id AND sc.stats_column_id = 1
                    INNER JOIN sys.columns c ON sc.object_id = c.object_id AND sc.column_id = c.column_id
                    CROSS APPLY sys.dm_db_stats_properties(s.object_id, s.stats_id) AS props  
                    CROSS APPLY sys.dm_db_stats_histogram(s.[object_id], s.stats_id) AS hist
                    WHERE s.object_id = @ObjectID
                    ORDER BY s.auto_created, s.user_created, s.name, hist.step_number;';
        EXEC sp_executesql @dsql, N'@ObjectID INT', @ObjectID;
    END


END; 

--If @TableName is NOT specified...
--Act based on the @Mode and @Filter. (@Filter applies only when @Mode=0 "diagnose")
ELSE
BEGIN;
    IF @Mode IN (0, 4) /* DIAGNOSE*/
    BEGIN;
        RAISERROR(N'@Mode=0 or 4, we are diagnosing.', 0,1) WITH NOWAIT;

        ----------------------------------------
        --Multiple Index Personalities: Check_id 0-10
        ----------------------------------------
        BEGIN;

        --SELECT  [object_id], key_column_names, database_id
        --                   FROM        #IndexSanity
        --                   WHERE  index_type IN (1,2) /* Clustered, NC only*/
        --                        AND is_hypothetical = 0
        --                        AND is_disabled = 0
        --                   GROUP BY    [object_id], key_column_names, database_id
        --                   HAVING    COUNT(*) > 1


        RAISERROR('check_id 1: Duplicate keys', 0,1) WITH NOWAIT;
            WITH    duplicate_indexes
                      AS ( SELECT  [object_id], key_column_names, database_id, [schema_name]
                           FROM        #IndexSanity AS ip
                           WHERE  index_type IN (1,2) /* Clustered, NC only*/
                                AND is_hypothetical = 0
                                AND is_disabled = 0
								AND is_primary_key = 0
								AND EXISTS (
											SELECT 1/0
											FROM #IndexSanitySize ips 
											WHERE ip.index_sanity_id = ips.index_sanity_id 
								            AND ip.database_id = ips.database_id
											AND ip.schema_name = ips.schema_name
								            AND ips.total_reserved_MB >= CASE 
											                             WHEN (@GetAllDatabases = 1 OR @Mode = 0) 
																		 THEN @ThresholdMB 
																		 ELSE ips.total_reserved_MB 
																		 END
								            )
                           GROUP BY    [object_id], key_column_names, database_id, [schema_name]
                           HAVING    COUNT(*) > 1)
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  1 AS check_id, 
                                ip.index_sanity_id,
                                50 AS Priority,
                                'Multiple Index Personalities' AS findings_group,
                                'Duplicate keys' AS finding,
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/duplicateindex' AS URL,
                                N'Index Name: ' + ip.index_name + N' Table Name: ' + ip.db_schema_object_name AS details,
                                ip.index_definition, 
                                ip.secret_columns, 
                                ip.index_usage_summary,
                                ips.index_size_summary
                        FROM    duplicate_indexes di
                                JOIN #IndexSanity ip ON di.[object_id] = ip.[object_id]
                                                         AND ip.database_id = di.database_id
														 AND ip.[schema_name] = di.[schema_name]
                                                         AND di.key_column_names = ip.key_column_names
                                JOIN #IndexSanitySize ips ON ip.index_sanity_id = ips.index_sanity_id 
								                          AND ip.database_id = ips.database_id
														  AND ip.schema_name = ips.schema_name
                        /* WHERE clause limits to only @ThresholdMB or larger duplicate indexes when getting all databases or using PainRelief mode */
                        WHERE ips.total_reserved_MB >= CASE WHEN (@GetAllDatabases = 1 OR @Mode = 0) THEN @ThresholdMB ELSE ips.total_reserved_MB END
						AND ip.is_primary_key = 0
                        ORDER BY ip.object_id, ip.key_column_names_with_sort_order    
                OPTION    ( RECOMPILE );

        RAISERROR('check_id 2: Keys w/ identical leading columns.', 0,1) WITH NOWAIT;
            WITH    borderline_duplicate_indexes
                      AS ( SELECT DISTINCT database_id, [object_id], first_key_column_name, key_column_names,
                                    COUNT([object_id]) OVER ( PARTITION BY database_id, [object_id], first_key_column_name ) AS number_dupes
                           FROM        #IndexSanity
                           WHERE index_type IN (1,2) /* Clustered, NC only*/
                            AND is_hypothetical=0
                            AND is_disabled=0
							AND is_primary_key = 0)
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  2 AS check_id, 
                                ip.index_sanity_id,
                                60 AS Priority,
                                'Multiple Index Personalities' AS findings_group,
                                'Borderline duplicate keys' AS finding,
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/duplicateindex' AS URL,
                                ip.db_schema_object_indexid AS details, 
                                ip.index_definition, 
                                ip.secret_columns,
                                ip.index_usage_summary,
                                ips.index_size_summary
                        FROM    #IndexSanity AS ip 
                        JOIN #IndexSanitySize ips ON ip.index_sanity_id = ips.index_sanity_id
                        WHERE EXISTS (
                            SELECT di.[object_id]
                            FROM borderline_duplicate_indexes AS di
                            WHERE di.[object_id] = ip.[object_id] AND
                                di.database_id = ip.database_id AND
                                di.first_key_column_name = ip.first_key_column_name AND
                                di.key_column_names <> ip.key_column_names AND
                                di.number_dupes > 1    
                        )
						AND ip.is_primary_key = 0                                          
                        ORDER BY ip.[schema_name], ip.[object_name], ip.key_column_names, ip.include_column_names
            OPTION    ( RECOMPILE );

        END;
        ----------------------------------------
        --Aggressive Indexes: Check_id 10-19
        ----------------------------------------
        BEGIN;

        RAISERROR(N'check_id 11: Total lock wait time > 5 minutes (row + page) with long average waits', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                SELECT  11 AS check_id, 
                        i.index_sanity_id,
                        10 AS Priority,
                        N'Aggressive ' 
                            + CASE COALESCE((SELECT SUM(1) 
							                 FROM #IndexSanity iMe 
											 INNER JOIN #IndexSanity iOthers 
												ON iMe.database_id = iOthers.database_id 
												AND iMe.object_id = iOthers.object_id 
												AND iOthers.index_id > 1 
											 WHERE i.index_sanity_id = iMe.index_sanity_id
												AND iOthers.is_hypothetical = 0
												AND iOthers.is_disabled = 0
											), 0)
                                WHEN 0 THEN N'Under-Indexing'
                                WHEN 1 THEN N'Under-Indexing'
                                WHEN 2 THEN N'Under-Indexing'
                                WHEN 3 THEN N'Under-Indexing'
                                WHEN 4 THEN N'Indexes'
                                WHEN 5 THEN N'Indexes'
                                WHEN 6 THEN N'Indexes'
                                WHEN 7 THEN N'Indexes'
                                WHEN 8 THEN N'Indexes'
                                WHEN 9 THEN N'Indexes'
                                ELSE N'Over-Indexing'
                                END AS findings_group,
                        N'Total lock wait time > 5 minutes (row + page) with long average waits' AS finding, 
                        [database_name] AS [Database Name],
                        N'http://BrentOzar.com/go/AggressiveIndexes' AS URL,
                        (i.db_schema_object_indexid + N': ' +
                            sz.index_lock_wait_summary + N' NC indexes on table: ') COLLATE DATABASE_DEFAULT +
							 CAST(COALESCE((SELECT SUM(1) 
							                FROM #IndexSanity iMe 
											INNER JOIN #IndexSanity iOthers 
												ON iMe.database_id = iOthers.database_id 
												AND iMe.object_id = iOthers.object_id 
												AND iOthers.index_id > 1 
											WHERE i.index_sanity_id = iMe.index_sanity_id
											AND iOthers.is_hypothetical = 0
											AND iOthers.is_disabled = 0
										   ), 0)
                                         AS NVARCHAR(30))	 AS details, 
                        i.index_definition,
                        i.secret_columns,
                        i.index_usage_summary,
                        sz.index_size_summary
                FROM    #IndexSanity AS i
                JOIN #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id
                WHERE    (total_row_lock_wait_in_ms + total_page_lock_wait_in_ms) > 300000
				AND (sz.avg_page_lock_wait_in_ms + sz.avg_row_lock_wait_in_ms) > 5000
				GROUP BY i.index_sanity_id, [database_name], i.db_schema_object_indexid, sz.index_lock_wait_summary, i.index_definition, i.secret_columns, i.index_usage_summary, sz.index_size_summary, sz.index_sanity_id
                ORDER BY 4, [database_name], 8
                OPTION    ( RECOMPILE );

        RAISERROR(N'check_id 12: Total lock wait time > 5 minutes (row + page) with short average waits', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                SELECT  12 AS check_id, 
                        i.index_sanity_id,
                        10 AS Priority,
                        N'Aggressive ' 
                            + CASE COALESCE((SELECT SUM(1) 
							                 FROM #IndexSanity iMe 
											 INNER JOIN #IndexSanity iOthers 
												ON iMe.database_id = iOthers.database_id 
												AND iMe.object_id = iOthers.object_id 
												AND iOthers.index_id > 1 
											 WHERE i.index_sanity_id = iMe.index_sanity_id
											 AND iOthers.is_hypothetical = 0
											 AND iOthers.is_disabled = 0
											), 0)
                                WHEN 0 THEN N'Under-Indexing'
                                WHEN 1 THEN N'Under-Indexing'
                                WHEN 2 THEN N'Under-Indexing'
                                WHEN 3 THEN N'Under-Indexing'
                                WHEN 4 THEN N'Indexes'
                                WHEN 5 THEN N'Indexes'
                                WHEN 6 THEN N'Indexes'
                                WHEN 7 THEN N'Indexes'
                                WHEN 8 THEN N'Indexes'
                                WHEN 9 THEN N'Indexes'
                                ELSE N'Over-Indexing'
                                END AS findings_group,
                        N'Total lock wait time > 5 minutes (row + page) with short average waits' AS finding, 
                        [database_name] AS [Database Name],
                        N'http://BrentOzar.com/go/AggressiveIndexes' AS URL,
                        (i.db_schema_object_indexid + N': ' +
                            sz.index_lock_wait_summary + N' NC indexes on table: ') COLLATE DATABASE_DEFAULT +
							 CAST(COALESCE((SELECT SUM(1) 
							                FROM #IndexSanity iMe 
											INNER JOIN #IndexSanity iOthers 
												ON iMe.database_id = iOthers.database_id 
												AND iMe.object_id = iOthers.object_id 
												AND iOthers.index_id > 1 
											WHERE i.index_sanity_id = iMe.index_sanity_id
											AND iOthers.is_hypothetical = 0
											AND iOthers.is_disabled = 0
										   ),0)
                                         AS NVARCHAR(30))	 AS details, 
                        i.index_definition,
                        i.secret_columns,
                        i.index_usage_summary,
                        sz.index_size_summary
                FROM    #IndexSanity AS i
                JOIN #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id
                WHERE    (total_row_lock_wait_in_ms + total_page_lock_wait_in_ms) > 300000
				AND (sz.avg_page_lock_wait_in_ms + sz.avg_row_lock_wait_in_ms) < 5000
				GROUP BY i.index_sanity_id, [database_name], i.db_schema_object_indexid, sz.index_lock_wait_summary, i.index_definition, i.secret_columns, i.index_usage_summary, sz.index_size_summary, sz.index_sanity_id
                ORDER BY 4, [database_name], 8
                OPTION    ( RECOMPILE );

        END;

        ---------------------------------------- 
        --Index Hoarder: Check_id 20-29
        ----------------------------------------
        BEGIN
            RAISERROR(N'check_id 20: >=7 NC indexes on any given table. Yes, 7 is an arbitrary number.', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  20 AS check_id, 
                                MAX(i.index_sanity_id) AS index_sanity_id, 
                                100 AS Priority,
                                'Index Hoarder' AS findings_group,
                                'Many NC indexes on a single table' AS finding,
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,
                                CAST (COUNT(*) AS NVARCHAR(30)) + ' NC indexes on ' + i.db_schema_object_name AS details,
                                i.db_schema_object_name + ' (' + CAST (COUNT(*) AS NVARCHAR(30)) + ' indexes)' AS index_definition,
                                '' AS secret_columns,
                                REPLACE(CONVERT(NVARCHAR(30),CAST(SUM(total_reads) AS MONEY), 1), N'.00', N'') + N' reads (ALL); '
                                    + REPLACE(CONVERT(NVARCHAR(30),CAST(SUM(user_updates) AS MONEY), 1), N'.00', N'') + N' writes (ALL); ',
                                REPLACE(CONVERT(NVARCHAR(30),CAST(MAX(total_rows) AS MONEY), 1), N'.00', N'') + N' rows (MAX)'
                                    + CASE WHEN SUM(total_reserved_MB) > 1024 THEN 
                                        N'; ' + CAST(CAST(SUM(total_reserved_MB)/1024. AS NUMERIC(29,1)) AS NVARCHAR(30)) + 'GB (ALL)'
                                    WHEN SUM(total_reserved_MB) > 0 THEN
                                        N'; ' + CAST(CAST(SUM(total_reserved_MB) AS NUMERIC(29,1)) AS NVARCHAR(30)) + 'MB (ALL)'
                                    ELSE ''
                                    END AS index_size_summary
                        FROM    #IndexSanity i
                        JOIN #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id
                        WHERE    index_id NOT IN ( 0, 1 )
                        GROUP BY db_schema_object_name, [i].[database_name]
                        HAVING    COUNT(*) >= CASE WHEN (@GetAllDatabases = 1 OR @Mode = 0) 
						                           THEN 21
												   ELSE 7
											  END
                        ORDER BY i.db_schema_object_name DESC  
						OPTION    ( RECOMPILE );

            IF @Filter = 1 /*@Filter=1 is "ignore unusued" */
            BEGIN
                RAISERROR(N'Skipping checks on unused indexes (21 and 22) because @Filter=1', 0,1) WITH NOWAIT;
            END;
            ELSE /*Otherwise, go ahead and do the checks*/
            BEGIN
                RAISERROR(N'check_id 21: >=5 percent of indexes are unused. Yes, 5 is an arbitrary number.', 0,1) WITH NOWAIT;
                    DECLARE @percent_NC_indexes_unused NUMERIC(29,1);
                    DECLARE @NC_indexes_unused_reserved_MB NUMERIC(29,1);

                    SELECT  @percent_NC_indexes_unused = ( 100.00 * SUM(CASE 
					                                                        WHEN total_reads = 0 
																		    THEN 1
                                                                            ELSE 0
                                                                         END) ) / COUNT(*),
                            @NC_indexes_unused_reserved_MB = SUM(CASE 
							                                         WHEN total_reads = 0 
																     THEN sz.total_reserved_MB
                                                                     ELSE 0
                                                                 END) 
                    FROM    #IndexSanity i
                    JOIN    #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                    WHERE    index_id NOT IN ( 0, 1 ) 
                            AND i.is_unique = 0
							/*Skipping tables created in the last week, or modified in past 2 days*/
							AND	i.create_date >= DATEADD(dd,-7,GETDATE()) 
							AND i.modify_date > DATEADD(dd,-2,GETDATE()) 
                    OPTION    ( RECOMPILE );

                IF @percent_NC_indexes_unused >= 5 
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                            SELECT  21 AS check_id, 
                                    MAX(i.index_sanity_id) AS index_sanity_id, 
                                    150 AS Priority,
                                    N'Index Hoarder' AS findings_group,
                                    N'More than 5 percent NC indexes are unused' AS finding,
                                    [database_name] AS [Database Name],
                                    N'http://BrentOzar.com/go/IndexHoarder' AS URL,
                                    CAST (@percent_NC_indexes_unused AS NVARCHAR(30)) + N' percent NC indexes (' + CAST(COUNT(*) AS NVARCHAR(10)) + N') unused. ' +
                                    N'These take up ' + CAST (@NC_indexes_unused_reserved_MB AS NVARCHAR(30)) + N'MB of space.' AS details,
                                    i.database_name + ' (' + CAST (COUNT(*) AS NVARCHAR(30)) + N' indexes)' AS index_definition,
                                    '' AS secret_columns, 
                                    CAST(SUM(total_reads) AS NVARCHAR(256)) + N' reads (ALL); '
                                        + CAST(SUM([user_updates]) AS NVARCHAR(256)) + N' writes (ALL)' AS index_usage_summary,
                                
                                    REPLACE(CONVERT(NVARCHAR(30),CAST(MAX([total_rows]) AS MONEY), 1), '.00', '') + N' rows (MAX)'
                                        + CASE WHEN SUM(total_reserved_MB) > 1024 THEN 
                                            N'; ' + CAST(CAST(SUM(total_reserved_MB)/1024. AS NUMERIC(29,1)) AS NVARCHAR(30)) + 'GB (ALL)'
                                        WHEN SUM(total_reserved_MB) > 0 THEN
                                            N'; ' + CAST(CAST(SUM(total_reserved_MB) AS NUMERIC(29,1)) AS NVARCHAR(30)) + 'MB (ALL)'
                                        ELSE ''
                                        END AS index_size_summary
                            FROM    #IndexSanity i
                            JOIN    #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                            WHERE    index_id NOT IN ( 0, 1 )
                                    AND i.is_unique = 0
                                    AND total_reads = 0
                                    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
									/*Skipping tables created in the last week, or modified in past 2 days*/
									AND	i.create_date >= DATEADD(dd,-7,GETDATE()) 
									AND i.modify_date > DATEADD(dd,-2,GETDATE())
                            GROUP BY i.database_name 
                    OPTION    ( RECOMPILE );

                RAISERROR(N'check_id 22: NC indexes with 0 reads. (Borderline) and >= 10,000 writes', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  22 AS check_id, 
                                i.index_sanity_id,
                                100 AS Priority,
                                N'Index Hoarder' AS findings_group,
                                N'Unused NC index with High Writes' AS finding, 
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,
                                N'0 reads: ' + i.db_schema_object_indexid AS details, 
                                i.index_definition, 
                                i.secret_columns, 
                                i.index_usage_summary,
                                sz.index_size_summary
                        FROM    #IndexSanity AS i
                        JOIN    #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id
                        WHERE    i.total_reads=0
						    AND i.user_updates >= 10000
                                AND i.index_id NOT IN (0,1) /*NCs only*/
                                AND i.is_unique = 0
                                AND sz.total_reserved_MB >= CASE WHEN (@GetAllDatabases = 1 OR @Mode = 0) THEN @ThresholdMB ELSE sz.total_reserved_MB END
                        ORDER BY i.db_schema_object_indexid
                        OPTION    ( RECOMPILE );
            END; /*end checks only run when @Filter <> 1*/

            RAISERROR(N'check_id 23: Indexes with 7 or more columns. (Borderline)', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                    SELECT  23 AS check_id, 
                            i.index_sanity_id,
                            150 AS Priority, 
                            N'Index Hoarder' AS findings_group,
                            N'Borderline: Wide indexes (7 or more columns)' AS finding, 
                            [database_name] AS [Database Name],
                            N'http://BrentOzar.com/go/IndexHoarder' AS URL,
                            CAST(count_key_columns + count_included_columns AS NVARCHAR(10)) + ' columns on '
                            + i.db_schema_object_indexid AS details, i.index_definition, 
                            i.secret_columns, 
                            i.index_usage_summary,
                            sz.index_size_summary
                    FROM    #IndexSanity AS i
                    JOIN    #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id
                    WHERE    ( count_key_columns + count_included_columns ) >= 7
                            AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                    OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 24: Wide clustered indexes (> 3 columns or > 16 bytes).', 0,1) WITH NOWAIT;
                WITH count_columns AS (
                            SELECT database_id, [object_id],
                                SUM(CASE max_length WHEN -1 THEN 0 ELSE max_length END) AS sum_max_length
                            FROM #IndexColumns ic
                            WHERE index_id IN (1,0) /*Heap or clustered only*/
                            AND key_ordinal > 0
                            GROUP BY database_id, object_id
                            )
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  24 AS check_id, 
                                i.index_sanity_id, 
                                150 AS Priority,
                                N'Index Hoarder' AS findings_group,
                                N'Wide clustered index (> 3 columns OR > 16 bytes)' AS finding,
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,
                                CAST (i.count_key_columns AS NVARCHAR(10)) + N' columns with potential size of '
                                    + CAST(cc.sum_max_length AS NVARCHAR(10))
                                    + N' bytes in clustered index:' + i.db_schema_object_name 
                                    + N'. ' + 
                                        (SELECT CAST(COUNT(*) AS NVARCHAR(23)) 
										 FROM #IndexSanity i2 
                                         WHERE i2.[object_id]=i.[object_id] 
										 AND i2.database_id = i.database_id 
										 AND i2.index_id <> 1
                                         AND i2.is_disabled=0 
										 AND i2.is_hypothetical=0)
                                        + N' NC indexes on the table.'
                                    AS details,
                                i.index_definition,
                                secret_columns, 
                                i.index_usage_summary,
                                ip.index_size_summary
                        FROM    #IndexSanity i
                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id
                        JOIN    count_columns AS cc ON i.[object_id]=cc.[object_id]
                                                   AND i.database_id = cc.database_id
                        WHERE    index_id = 1 /* clustered only */
                                AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                                AND 
                                    (count_key_columns > 3 /*More than three key columns.*/
                                    OR cc.sum_max_length > 16 /*More than 16 bytes in key */)
									AND i.is_CX_columnstore = 0
                        ORDER BY i.db_schema_object_name DESC OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 25: Addicted to nullable columns.', 0,1) WITH NOWAIT;
                WITH count_columns AS (
                            SELECT [object_id],
								   [database_id],
								   [schema_name],
                                SUM(CASE is_nullable WHEN 1 THEN 0 ELSE 1 END) AS non_nullable_columns,
                                COUNT(*) AS total_columns
                            FROM #IndexColumns ic
                            WHERE index_id IN (1,0) /*Heap or clustered only*/
                            GROUP BY [object_id],
								     [database_id],
								     [schema_name]
                            )
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  25 AS check_id, 
                                i.index_sanity_id, 
                                200 AS Priority,
                                N'Index Hoarder' AS findings_group,
                                N'Addicted to nulls' AS finding,
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,
                                i.db_schema_object_name 
                                    + N' allows null in ' + CAST((total_columns-non_nullable_columns) AS NVARCHAR(10))
                                    + N' of ' + CAST(total_columns AS NVARCHAR(10))
                                    + N' columns.' AS details,
                                i.index_definition,
                                secret_columns, 
                                ISNULL(i.index_usage_summary,''),
                                ISNULL(ip.index_size_summary,'')
                        FROM    #IndexSanity i
                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id
                        JOIN    count_columns AS cc ON i.[object_id]=cc.[object_id]
								AND cc.database_id = ip.database_id
								AND cc.[schema_name] = ip.[schema_name]
                        WHERE    i.index_id IN (1,0)
                        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                            AND cc.non_nullable_columns < 2
                            AND cc.total_columns > 3
                        ORDER BY i.db_schema_object_name DESC OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 26: Wide tables (35+ cols or > 2000 non-LOB bytes).', 0,1) WITH NOWAIT;
                WITH count_columns AS (
                            SELECT [object_id],
								   [database_id],
								   [schema_name],
                                SUM(CASE max_length WHEN -1 THEN 1 ELSE 0 END) AS count_lob_columns,
                                SUM(CASE max_length WHEN -1 THEN 0 ELSE max_length END) AS sum_max_length,
                                COUNT(*) AS total_columns
                            FROM #IndexColumns ic
                            WHERE index_id IN (1,0) /*Heap or clustered only*/
                            GROUP BY [object_id],
								     [database_id],
								     [schema_name]
                            )
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  26 AS check_id, 
                                i.index_sanity_id, 
                                150 AS Priority,
                                N'Index Hoarder' AS findings_group,
                                N'Wide tables: 35+ cols or > 2000 non-LOB bytes' AS finding,
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,
                                i.db_schema_object_name 
                                    + N' has ' + CAST((total_columns) AS NVARCHAR(10))
                                    + N' total columns with a max possible width of ' + CAST(sum_max_length AS NVARCHAR(10))
                                    + N' bytes.' +
                                    CASE WHEN count_lob_columns > 0 THEN CAST((count_lob_columns) AS NVARCHAR(10))
                                        + ' columns are LOB types.' ELSE ''
                                    END
                                        AS details,
                                i.index_definition,
                                secret_columns, 
                                ISNULL(i.index_usage_summary,''),
                                ISNULL(ip.index_size_summary,'')
                        FROM    #IndexSanity i
                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id
                        JOIN    count_columns AS cc ON i.[object_id]=cc.[object_id]
								AND cc.database_id = i.database_id
								AND cc.[schema_name] = i.[schema_name]
                        WHERE    i.index_id IN (1,0)
                        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                            AND 
                            (cc.total_columns >= 35 OR
                            cc.sum_max_length >= 2000)
                        ORDER BY i.db_schema_object_name DESC OPTION    ( RECOMPILE );
                    
            RAISERROR(N'check_id 27: Addicted to strings.', 0,1) WITH NOWAIT;
                WITH count_columns AS (
                            SELECT [object_id],
								   [database_id],
								   [schema_name],
                                SUM(CASE WHEN system_type_name IN ('varchar','nvarchar','char') OR max_length=-1 THEN 1 ELSE 0 END) AS string_or_LOB_columns,
                                COUNT(*) AS total_columns
                            FROM #IndexColumns ic
                            WHERE index_id IN (1,0) /*Heap or clustered only*/
                            GROUP BY [object_id],
								     [database_id],
								     [schema_name]
                            )
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  27 AS check_id, 
                                i.index_sanity_id, 
                                200 AS Priority,
                                N'Index Hoarder' AS findings_group,
                                N'Addicted to strings' AS finding,
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,
                                i.db_schema_object_name 
                                    + N' uses string or LOB types for ' + CAST((string_or_LOB_columns) AS NVARCHAR(10))
                                    + N' of ' + CAST(total_columns AS NVARCHAR(10))
                                    + N' columns. Check if data types are valid.' AS details,
                                i.index_definition,
                                secret_columns, 
                                ISNULL(i.index_usage_summary,''),
                                ISNULL(ip.index_size_summary,'')
                        FROM    #IndexSanity i
                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id
                        JOIN    count_columns AS cc ON i.[object_id]=cc.[object_id]
								AND cc.database_id = i.database_id
								AND cc.[schema_name] = i.[schema_name]
                        CROSS APPLY (SELECT cc.total_columns - string_or_LOB_columns AS non_string_or_lob_columns) AS calc1
                        WHERE    i.index_id IN (1,0)
                        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                            AND calc1.non_string_or_lob_columns <= 1
                            AND cc.total_columns > 3
                        ORDER BY i.db_schema_object_name DESC OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 28: Non-unique clustered index.', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  28 AS check_id, 
                                i.index_sanity_id, 
                                100 AS Priority,
                                N'Index Hoarder' AS findings_group,
                                N'Non-Unique clustered index' AS finding,
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,
                                N'Uniquifiers will be required! Clustered index: ' + i.db_schema_object_name 
                                    + N' and all NC indexes. ' + 
                                        (SELECT CAST(COUNT(*) AS NVARCHAR(23)) 
										 FROM #IndexSanity i2 
                                         WHERE i2.[object_id]=i.[object_id] 
										 AND i2.database_id = i.database_id 
										 AND i2.index_id <> 1
                                         AND i2.is_disabled=0 
										 AND i2.is_hypothetical=0)
                                        + N' NC indexes on the table.'
                                    AS details,
                                i.index_definition,
                                secret_columns, 
                                i.index_usage_summary,
                                ip.index_size_summary
                        FROM    #IndexSanity i
                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id
                        WHERE    index_id = 1 /* clustered only */
                        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                                AND is_unique=0 /* not unique */
                                AND is_CX_columnstore=0 /* not a clustered columnstore-- no unique option on those */
                        ORDER BY i.db_schema_object_name DESC OPTION    ( RECOMPILE );

                RAISERROR(N'check_id 29: NC indexes with 0 reads. (Borderline) and < 10,000 writes', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  29 AS check_id, 
                                i.index_sanity_id,
                                150 AS Priority,
                                N'Index Hoarder' AS findings_group,
                                N'Unused NC index with Low Writes' AS finding, 
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,
                                N'0 reads: ' + i.db_schema_object_indexid AS details, 
                                i.index_definition, 
                                i.secret_columns, 
                                i.index_usage_summary,
                                sz.index_size_summary
                        FROM    #IndexSanity AS i
                        JOIN    #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id
                        WHERE    i.total_reads=0
								AND i.user_updates < 10000
                                AND i.index_id NOT IN (0,1) /*NCs only*/
                                AND i.is_unique = 0
                                AND sz.total_reserved_MB >= CASE WHEN (@GetAllDatabases = 1 OR @Mode = 0) THEN @ThresholdMB ELSE sz.total_reserved_MB END
								/*Skipping tables created in the last week, or modified in past 2 days*/
								AND	i.create_date >= DATEADD(dd,-7,GETDATE()) 
								AND i.modify_date > DATEADD(dd,-2,GETDATE())
								AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                        ORDER BY i.db_schema_object_indexid
                        OPTION    ( RECOMPILE );

        END;
         ----------------------------------------
        --Feature-Phobic Indexes: Check_id 30-39
        ---------------------------------------- 
        BEGIN
            RAISERROR(N'check_id 30: No indexes with includes', 0,1) WITH NOWAIT;
            /* This does not work the way you'd expect with @GetAllDatabases = 1. For details:
               https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/issues/825
            */

			SELECT  database_name,
					SUM(CASE WHEN count_included_columns > 0 THEN 1 ELSE 0 END) AS number_indexes_with_includes,
					100.* SUM(CASE WHEN count_included_columns > 0 THEN 1 ELSE 0 END) / ( 1.0 * COUNT(*) ) AS percent_indexes_with_includes
			INTO #index_includes
            FROM    #IndexSanity
			WHERE is_hypothetical = 0
			AND is_disabled = 0
			AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
			GROUP BY database_name;

                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  30 AS check_id, 
                                NULL AS index_sanity_id, 
                                250 AS Priority,
                                N'Feature-Phobic Indexes' AS findings_group,
								database_name AS [Database Name],
                                N'No indexes use includes' AS finding, 'http://BrentOzar.com/go/IndexFeatures' AS URL,
                                N'No indexes use includes' AS details,
                                database_name + N' (Entire database)' AS index_definition, 
                                N'' AS secret_columns, 
                                N'N/A' AS index_usage_summary, 
                                N'N/A' AS index_size_summary 
						FROM #index_includes
						WHERE number_indexes_with_includes = 0
						AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
						OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 31: < 3 percent of indexes have includes', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
					SELECT  31 AS check_id,
					        NULL AS index_sanity_id, 
					        150 AS Priority,
					        N'Feature-Phobic Indexes' AS findings_group,
					        N'Borderline: Includes are used in < 3% of indexes' AS findings,
					        database_name AS [Database Name],
					        N'http://BrentOzar.com/go/IndexFeatures' AS URL,
					        N'Only ' + CAST(percent_indexes_with_includes AS NVARCHAR(20)) + '% of indexes have includes' AS details, 
					        N'Entire database' AS index_definition, 
					        N'' AS secret_columns,
					        N'N/A' AS index_usage_summary, 
					        N'N/A' AS index_size_summary
					FROM #index_includes
					WHERE number_indexes_with_includes > 0 AND percent_indexes_with_includes <= 3
					AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
					OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 32: filtered indexes and indexed views', 0,1) WITH NOWAIT;

                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
					SELECT  DISTINCT
							32 AS check_id, 
					        NULL AS index_sanity_id,
					        250 AS Priority,
					        N'Feature-Phobic Indexes' AS findings_group,
					        N'Borderline: No filtered indexes or indexed views exist' AS finding, 
					        i.database_name AS [Database Name],
					        N'http://BrentOzar.com/go/IndexFeatures' AS URL,
					        N'These are NOT always needed-- but do you know when you would use them?' AS details,
					        i.database_name + N' (Entire database)' AS index_definition, 
					        N'' AS secret_columns,
					        N'N/A' AS index_usage_summary, 
					        N'N/A' AS index_size_summary 
					FROM #IndexSanity i
					WHERE i.database_name NOT IN (                
							SELECT   database_name
							FROM     #IndexSanity
							WHERE    filter_definition <> '' )
					AND i.database_name NOT IN (
					       SELECT  database_name
						   FROM    #IndexSanity
						   WHERE   is_indexed_view = 1 )
					AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
					OPTION    ( RECOMPILE );
        END;

        RAISERROR(N'check_id 33: Potential filtered indexes based on column names.', 0,1) WITH NOWAIT;

                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
					SELECT  33 AS check_id, 
					        i.index_sanity_id AS index_sanity_id,
					        250 AS Priority,
					        N'Feature-Phobic Indexes' AS findings_group,
					        N'Potential filtered index (based on column name)' AS finding, 
					        [database_name] AS [Database Name],
					        N'http://BrentOzar.com/go/IndexFeatures' AS URL,
					        N'A column name in this index suggests it might be a candidate for filtering (is%, %archive%, %active%, %flag%)' AS details,
					        i.index_definition, 
					        i.secret_columns,
					        i.index_usage_summary, 
					        sz.index_size_summary
					FROM #IndexColumns ic 
					JOIN #IndexSanity i ON ic.[object_id]=i.[object_id] 
						AND ic.database_id =i.database_id
						AND ic.schema_name = i.schema_name
						AND ic.[index_id]=i.[index_id] 
						AND i.[index_id] > 1 /* non-clustered index */
					JOIN    #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id
					WHERE (column_name LIKE 'is%'
					    OR column_name LIKE '%archive%'
					    OR column_name LIKE '%active%'
					    OR column_name LIKE '%flag%')
					    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
					OPTION    ( RECOMPILE );

		RAISERROR(N'check_id 34: Filtered index definition columns not in index definition', 0,1) WITH NOWAIT;
                 
                 INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  34 AS check_id, 
                                i.index_sanity_id,
                                80 AS Priority,
                                N'Forgetful Indexes' AS findings_group,
                                N'Filter Columns Not In Index Definition' AS finding, 
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/IndexFeatures' AS URL,
                                N'The index '
                                + QUOTENAME(i.index_name)
                                + N' on ['
                                + i.db_schema_object_name
                                + N'] has a filter on ['
                                + i.filter_definition
                                + N'] but is missing ['
                                + LTRIM(i.filter_columns_not_in_index)
                                + N'] from the index definition.'
                                AS details, 
                                i.index_definition, 
                                i.secret_columns, 
                                i.index_usage_summary,
                                sz.index_size_summary
                        FROM    #IndexSanity i
                        JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                        WHERE   i.filter_columns_not_in_index IS NOT NULL
                        ORDER BY i.db_schema_object_indexid
                        OPTION    ( RECOMPILE );
                                
         ----------------------------------------
        --Self Loathing Indexes : Check_id 40-49
        ----------------------------------------
        BEGIN
        
            RAISERROR(N'check_id 40: Fillfactor in nonclustered 80 percent or less', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                    SELECT  40 AS check_id, 
                            i.index_sanity_id,
                            100 AS Priority,
                            N'Self Loathing Indexes' AS findings_group,
                            N'Low Fill Factor: nonclustered index' AS finding, 
                            [database_name] AS [Database Name],
                            N'http://BrentOzar.com/go/SelfLoathing' AS URL,
                            CAST(fill_factor AS NVARCHAR(10)) + N'% fill factor on ' + db_schema_object_indexid + N'. '+
                                CASE WHEN (last_user_update IS NULL OR user_updates < 1)
                                THEN N'No writes have been made.'
                                ELSE
                                    N'Last write was ' +  CONVERT(NVARCHAR(16),last_user_update,121) + N' and ' + 
                                    CAST(user_updates AS NVARCHAR(25)) + N' updates have been made.'
                                END
                                AS details, 
                            i.index_definition,
                            i.secret_columns,
                            i.index_usage_summary,
                            sz.index_size_summary
                    FROM    #IndexSanity AS i
                    JOIN    #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id
                    WHERE    index_id > 1
                    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                    AND    fill_factor BETWEEN 1 AND 80 OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 40: Fillfactor in clustered 80 percent or less', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                    SELECT  40 AS check_id, 
                            i.index_sanity_id,
                            100 AS Priority,
                            N'Self Loathing Indexes' AS findings_group,
                            N'Low Fill Factor: clustered index' AS finding, 
                            [database_name] AS [Database Name],
                            N'http://BrentOzar.com/go/SelfLoathing' AS URL,
                            N'Fill factor on ' + db_schema_object_indexid + N' is ' + CAST(fill_factor AS NVARCHAR(10)) + N'%. '+
                                CASE WHEN (last_user_update IS NULL OR user_updates < 1)
                                THEN N'No writes have been made.'
                                ELSE
                                    N'Last write was ' +  CONVERT(NVARCHAR(16),last_user_update,121) + N' and ' + 
                                    CAST(user_updates AS NVARCHAR(25)) + N' updates have been made.'
                                END
                                AS details, 
                            i.index_definition,
                            i.secret_columns,
                            i.index_usage_summary,
                            sz.index_size_summary
                    FROM    #IndexSanity AS i
                    JOIN #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id
                    WHERE    index_id = 1
                    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                    AND fill_factor BETWEEN 1 AND 80 OPTION    ( RECOMPILE );


            RAISERROR(N'check_id 41: Hypothetical indexes ', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                    SELECT  41 AS check_id, 
                            i.index_sanity_id,
                            150 AS Priority,
                            N'Self Loathing Indexes' AS findings_group,
                            N'Hypothetical Index' AS finding,
                            [database_name] AS [Database Name],
                            N'http://BrentOzar.com/go/SelfLoathing' AS URL,
                            N'Hypothetical Index: ' + db_schema_object_indexid AS details, 
                            i.index_definition,
                            i.secret_columns,
                            N'' AS index_usage_summary, 
                            N'' AS index_size_summary
                    FROM    #IndexSanity AS i
                    WHERE    is_hypothetical = 1 
                    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                    OPTION    ( RECOMPILE );


            RAISERROR(N'check_id 42: Disabled indexes', 0,1) WITH NOWAIT;
            --Note: disabled NC indexes will have O rows in #IndexSanitySize!
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                    SELECT  42 AS check_id, 
                            index_sanity_id,
                            150 AS Priority,
                            N'Self Loathing Indexes' AS findings_group,
                            N'Disabled Index' AS finding, 
                            [database_name] AS [Database Name],
                            N'http://BrentOzar.com/go/SelfLoathing' AS URL,
                            N'Disabled Index:' + db_schema_object_indexid AS details, 
                            i.index_definition,
                            i.secret_columns,
                            i.index_usage_summary,
                            'DISABLED' AS index_size_summary
                    FROM    #IndexSanity AS i
                    WHERE    is_disabled = 1
                    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                    OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 43: Heaps with forwarded records', 0,1) WITH NOWAIT;
            WITH    heaps_cte
                      AS ( SELECT   [object_id],
								    [database_id],
								    [schema_name],
                                    SUM(forwarded_fetch_count) AS forwarded_fetch_count,
                                    SUM(leaf_delete_count) AS leaf_delete_count
                           FROM        #IndexPartitionSanity
                           GROUP BY    [object_id],
								       [database_id],
								       [schema_name]
                           HAVING    SUM(forwarded_fetch_count) > 0)
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  43 AS check_id, 
                                i.index_sanity_id,
                                100 AS Priority,
                                N'Self Loathing Indexes' AS findings_group,
                                N'Heaps with forwarded records' AS finding, 
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/SelfLoathing' AS URL,
                                CASE WHEN h.forwarded_fetch_count >= 922337203685477 THEN '>= 922,337,203,685,477'
                                    WHEN @DaysUptime < 1 THEN CAST(h.forwarded_fetch_count AS NVARCHAR(256)) + N' forwarded fetches against heap: ' + db_schema_object_indexid
                                    ELSE REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(
                                    (h.forwarded_fetch_count /*/@DaysUptime */)
                                     AS BIGINT) AS MONEY), 1), '.00', '') 
                                    END + N' forwarded fetches per day against heap: '
                                + db_schema_object_indexid AS details, 
                                i.index_definition, 
                                i.secret_columns,
                                i.index_usage_summary,
                                sz.index_size_summary
                        FROM    #IndexSanity i
                        JOIN heaps_cte h ON i.[object_id] = h.[object_id] 
							 AND i.[database_id] = h.[database_id]
							 AND i.[schema_name] = h.[schema_name]
                        JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                        WHERE    i.index_id = 0 
                        AND h.forwarded_fetch_count / @DaysUptime > 1000
                        AND sz.total_reserved_MB >= CASE WHEN NOT (@GetAllDatabases = 1 OR @Mode = 4) THEN @ThresholdMB ELSE sz.total_reserved_MB END
                OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 49: Heaps with deletes', 0,1) WITH NOWAIT;
            WITH    heaps_cte
                      AS ( SELECT   [object_id],
								    [database_id],
								    [schema_name],
                                    SUM(leaf_delete_count) AS leaf_delete_count
                           FROM        #IndexPartitionSanity
                           GROUP BY    [object_id],
								       [database_id],
								       [schema_name]
                           HAVING    SUM(forwarded_fetch_count) < 1000 * @DaysUptime /* Only alert about indexes with no forwarded fetches - we already alerted about those in check_id 43 */
                                    AND SUM(leaf_delete_count) > 0)
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  49 AS check_id, 
                                i.index_sanity_id,
                                200 AS Priority,
                                N'Self Loathing Indexes' AS findings_group,
                                N'Heaps with deletes' AS finding, 
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/SelfLoathing' AS URL,
                                CAST(h.leaf_delete_count AS NVARCHAR(256)) + N' deletes against heap:'
                                + db_schema_object_indexid AS details, 
                                i.index_definition, 
                                i.secret_columns,
                                i.index_usage_summary,
                                sz.index_size_summary
                        FROM    #IndexSanity i
                        JOIN heaps_cte h ON i.[object_id] = h.[object_id] 
							 AND i.[database_id] = h.[database_id]
							 AND i.[schema_name] = h.[schema_name]
                        JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                        WHERE    i.index_id = 0 
                        AND sz.total_reserved_MB >= CASE WHEN NOT (@GetAllDatabases = 1 OR @Mode = 4) THEN @ThresholdMB ELSE sz.total_reserved_MB END
                OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 44: Large Heaps with reads or writes.', 0,1) WITH NOWAIT;
            WITH    heaps_cte
                      AS ( SELECT   [object_id],
								    [database_id],
								    [schema_name], 
									SUM(forwarded_fetch_count) AS forwarded_fetch_count,
                                    SUM(leaf_delete_count) AS leaf_delete_count
                           FROM        #IndexPartitionSanity
                           GROUP BY  [object_id],
								     [database_id],
								     [schema_name]
                           HAVING    SUM(forwarded_fetch_count) > 0
                                    OR SUM(leaf_delete_count) > 0)
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  44 AS check_id, 
                                i.index_sanity_id,
                                100 AS Priority,
                                N'Self Loathing Indexes' AS findings_group,
                                N'Large Active heap' AS finding, 
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/SelfLoathing' AS URL,
                                N'Should this table be a heap? ' + db_schema_object_indexid AS details, 
                                i.index_definition, 
                                'N/A' AS secret_columns,
                                i.index_usage_summary,
                                sz.index_size_summary
                        FROM    #IndexSanity i
                        LEFT JOIN heaps_cte h ON i.[object_id] = h.[object_id] 
								AND i.[database_id] = h.[database_id]
								AND i.[schema_name] = h.[schema_name]
                        JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                        WHERE    i.index_id = 0 
                                AND (i.total_reads > 0 OR i.user_updates > 0)
								AND sz.total_rows >= 100000
                                AND h.[object_id] IS NULL /*don't duplicate the prior check.*/
                                AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 45: Medium Heaps with reads or writes.', 0,1) WITH NOWAIT;
            WITH    heaps_cte
                      AS ( SELECT   [object_id],
								    [database_id],
								    [schema_name], 
									SUM(forwarded_fetch_count) AS forwarded_fetch_count,
                                    SUM(leaf_delete_count) AS leaf_delete_count
                           FROM        #IndexPartitionSanity
                           GROUP BY  [object_id],
								     [database_id],
								     [schema_name]
                           HAVING    SUM(forwarded_fetch_count) > 0
                                    OR SUM(leaf_delete_count) > 0)
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  45 AS check_id, 
                                i.index_sanity_id,
                                100 AS Priority,
                                N'Self Loathing Indexes' AS findings_group,
                                N'Medium Active heap' AS finding, 
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/SelfLoathing' AS URL,
                                N'Should this table be a heap? ' + db_schema_object_indexid AS details, 
                                i.index_definition, 
                                'N/A' AS secret_columns,
                                i.index_usage_summary,
                                sz.index_size_summary
                        FROM    #IndexSanity i
                        LEFT JOIN heaps_cte h ON i.[object_id] = h.[object_id] 
								AND i.[database_id] = h.[database_id]
								AND i.[schema_name] = h.[schema_name]
                        JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                        WHERE    i.index_id = 0 
                                AND 
                                    (i.total_reads > 0 OR i.user_updates > 0)
								AND sz.total_rows >= 10000 AND sz.total_rows < 100000
                                AND h.[object_id] IS NULL /*don't duplicate the prior check.*/
                                AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 46: Small Heaps with reads or writes.', 0,1) WITH NOWAIT;
            WITH    heaps_cte
                      AS ( SELECT   [object_id],
								    [database_id],
								    [schema_name], 
									SUM(forwarded_fetch_count) AS forwarded_fetch_count,
                                    SUM(leaf_delete_count) AS leaf_delete_count
                           FROM        #IndexPartitionSanity
                           GROUP BY  [object_id],
								     [database_id],
								     [schema_name]
                           HAVING    SUM(forwarded_fetch_count) > 0
                                    OR SUM(leaf_delete_count) > 0)
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  46 AS check_id, 
                                i.index_sanity_id,
                                100 AS Priority,
                                N'Self Loathing Indexes' AS findings_group,
                                N'Small Active heap' AS finding, 
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/SelfLoathing' AS URL,
                                N'Should this table be a heap? ' + db_schema_object_indexid AS details, 
                                i.index_definition, 
                                'N/A' AS secret_columns,
                                i.index_usage_summary,
                                sz.index_size_summary
                        FROM    #IndexSanity i
                        LEFT JOIN heaps_cte h ON i.[object_id] = h.[object_id] 
								AND i.[database_id] = h.[database_id]
								AND i.[schema_name] = h.[schema_name]
                        JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                        WHERE    i.index_id = 0 
                                AND 
                                    (i.total_reads > 0 OR i.user_updates > 0)
								AND sz.total_rows < 10000
                                AND h.[object_id] IS NULL /*don't duplicate the prior check.*/
                                AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
						OPTION    ( RECOMPILE );

				            RAISERROR(N'check_id 47: Heap with a Nonclustered Primary Key', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  47 AS check_id, 
                                i.index_sanity_id,
                                100 AS Priority,
                                N'Self Loathing Indexes' AS findings_group,
                                N'Heap with a Nonclustered Primary Key' AS finding, 
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/SelfLoathing' AS URL,
								db_schema_object_indexid + N' is a HEAP with a Nonclustered Primary Key' AS details, 
                                i.index_definition, 
                                i.secret_columns,
                                i.index_usage_summary,
                                sz.index_size_summary
                        FROM    #IndexSanity i
                        JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                        WHERE    i.index_type = 2 AND i.is_primary_key = 1
                        AND EXISTS 
                            (
                              SELECT 1/0 
                              FROM #IndexSanity AS isa
                              WHERE i.database_id = isa.database_id
                              AND   i.object_id = isa.object_id
                              AND   isa.index_id = 0
                            )
						OPTION    ( RECOMPILE );

				            RAISERROR(N'check_id 48: Nonclustered indexes with a bad read to write ratio', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  48 AS check_id, 
                                i.index_sanity_id,
                                100 AS Priority,
                                N'Index Hoarder' AS findings_group,
                                N'NC index with High Writes:Reads' AS finding, 
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,
                                N'Reads: '
								+ REPLACE(CONVERT(NVARCHAR(30), CAST((i.total_reads) AS MONEY), 1), N'.00', N'') 
								+ N' Writes: ' 
								+ REPLACE(CONVERT(NVARCHAR(30), CAST((i.user_updates) AS MONEY), 1), N'.00', N'')
								+ N' on: '
								+ i.db_schema_object_indexid AS details, 
                                i.index_definition, 
                                i.secret_columns, 
                                i.index_usage_summary,
                                sz.index_size_summary
                        FROM    #IndexSanity i
                        JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                        WHERE    i.total_reads > 0 /*Not totally unused*/
								AND i.user_updates >= 10000 /*Decent write activity*/
								AND i.total_reads < 10000
								AND ((i.total_reads * 10) < i.user_updates) /*10x more writes than reads*/
                                AND i.index_id NOT IN (0,1) /*NCs only*/
                                AND i.is_unique = 0 
                                AND sz.total_reserved_MB >= CASE WHEN (@GetAllDatabases = 1 OR @Mode = 0) THEN @ThresholdMB ELSE sz.total_reserved_MB END
                        ORDER BY i.db_schema_object_indexid
                        OPTION    ( RECOMPILE );

            END;
        ----------------------------------------
        --Indexaphobia
        --Missing indexes with value >= 5 million: : Check_id 50-59
        ----------------------------------------
        BEGIN
            RAISERROR(N'check_id 50: Indexaphobia.', 0,1) WITH NOWAIT;
            WITH    index_size_cte
                      AS ( SELECT   i.database_id,
									i.schema_name,
									i.[object_id], 
                                    MAX(i.index_sanity_id) AS index_sanity_id,
									ISNULL(NULLIF(MAX(DATEDIFF(DAY, i.create_date, SYSDATETIME())), 0), 1) AS create_days,
                                ISNULL (
                                    CAST(SUM(CASE WHEN index_id NOT IN (0,1) THEN 1 ELSE 0 END)
                                         AS NVARCHAR(30))+ N' NC indexes exist (' + 
                                    CASE WHEN SUM(CASE WHEN index_id NOT IN (0,1) THEN sz.total_reserved_MB ELSE 0 END) > 1024
                                        THEN CAST(CAST(SUM(CASE WHEN index_id NOT IN (0,1) THEN sz.total_reserved_MB ELSE 0 END )/1024. 

                                            AS NUMERIC(29,1)) AS NVARCHAR(30)) + N'GB); ' 
                                        ELSE CAST(SUM(CASE WHEN index_id NOT IN (0,1) THEN sz.total_reserved_MB ELSE 0 END) 
                                            AS NVARCHAR(30)) + N'MB); '
                                    END + 
                                        CASE WHEN MAX(sz.[total_rows]) >= 922337203685477 THEN '>= 922,337,203,685,477'
                                        ELSE REPLACE(CONVERT(NVARCHAR(30),CAST(MAX(sz.[total_rows]) AS MONEY), 1), '.00', '') 
                                        END +
                                    + N' Estimated Rows;' 
                                ,N'') AS index_size_summary
                            FROM    #IndexSanity AS i
                            LEFT    JOIN #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id  AND i.database_id = sz.database_id
							WHERE i.is_hypothetical = 0
                                  AND i.is_disabled = 0
                           GROUP BY    i.database_id, i.schema_name, i.[object_id])
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               index_usage_summary, index_size_summary, create_tsql, more_info )
                        
                        SELECT check_id, t.index_sanity_id, t.check_id, t.findings_group, t.finding, t.[Database Name], t.URL, t.details, t.[definition],
                                index_estimated_impact, t.index_size_summary, create_tsql, more_info
                        FROM
                        (
                            SELECT  ROW_NUMBER() OVER (ORDER BY magic_benefit_number DESC) AS rownum,
                                50 AS check_id, 
                                sz.index_sanity_id,
                                10 AS Priority,
                                N'Indexaphobia' AS findings_group,
                                N'High value missing index' AS finding, 
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/Indexaphobia' AS URL,
                                mi.[statement] + 
                                N' Est. benefit per day: ' + 
                                    CASE WHEN magic_benefit_number >= 922337203685477 THEN '>= 922,337,203,685,477'
                                    ELSE REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(
                                    (magic_benefit_number/@DaysUptime)
                                     AS BIGINT) AS MONEY), 1), '.00', '') 
                                    END AS details,
                                missing_index_details AS [definition],
                                index_estimated_impact,
                                sz.index_size_summary,
                                mi.create_tsql,
                                mi.more_info,
                                magic_benefit_number,
								mi.is_low
                        FROM    #MissingIndexes mi
                                LEFT JOIN index_size_cte sz ON mi.[object_id] = sz.object_id 
										  AND mi.database_id = sz.database_id
										  AND mi.schema_name = sz.schema_name
                                        /* Minimum benefit threshold = 100k/day of uptime OR since table creation date, whichever is lower*/
                        WHERE ( @Mode = 4 AND (magic_benefit_number / CASE WHEN sz.create_days < @DaysUptime THEN sz.create_days ELSE @DaysUptime END) >= 100000 ) 
						OR (magic_benefit_number / CASE WHEN sz.create_days < @DaysUptime THEN sz.create_days ELSE @DaysUptime END) >= 100000
                        ) AS t
                        WHERE t.rownum <= CASE WHEN (@Mode <> 4) THEN 20 ELSE t.rownum END
                        ORDER BY magic_benefit_number DESC
						OPTION    ( RECOMPILE );


    END;
         ----------------------------------------
        --Abnormal Psychology : Check_id 60-79
        ----------------------------------------
    BEGIN
            RAISERROR(N'check_id 60: XML indexes', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                    SELECT  60 AS check_id, 
                            i.index_sanity_id,
                            150 AS Priority,
                            N'Abnormal Psychology' AS findings_group,
                            N'XML Indexes' AS finding, 
                            [database_name] AS [Database Name],
                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,
                            i.db_schema_object_indexid AS details, 
                            i.index_definition,
                            i.secret_columns,
                            N'' AS index_usage_summary,
                            ISNULL(sz.index_size_summary,'') AS index_size_summary
                    FROM    #IndexSanity AS i
                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                    WHERE i.is_XML = 1 
					AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
					OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 61: Columnstore indexes', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                    SELECT  61 AS check_id, 
                            i.index_sanity_id,
                            150 AS Priority,
                            N'Abnormal Psychology' AS findings_group,
                            CASE WHEN i.is_NC_columnstore=1
                                THEN N'NC Columnstore Index' 
                                ELSE N'Clustered Columnstore Index' 
                                END AS finding, 
                            [database_name] AS [Database Name],
                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,
                            i.db_schema_object_indexid AS details, 
                            i.index_definition,
                            i.secret_columns,
                            i.index_usage_summary,
                            ISNULL(sz.index_size_summary,'') AS index_size_summary
                    FROM    #IndexSanity AS i
                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                    WHERE i.is_NC_columnstore = 1 OR i.is_CX_columnstore=1
					AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                    OPTION    ( RECOMPILE );


            RAISERROR(N'check_id 62: Spatial indexes', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                    SELECT  62 AS check_id, 
                            i.index_sanity_id,
                            150 AS Priority,
                            N'Abnormal Psychology' AS findings_group,
                            N'Spatial indexes' AS finding,
                            [database_name] AS [Database Name], 
                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,
                            i.db_schema_object_indexid AS details, 
                            i.index_definition,
                            i.secret_columns,
                            i.index_usage_summary,
                            ISNULL(sz.index_size_summary,'') AS index_size_summary
                    FROM    #IndexSanity AS i
                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                    WHERE i.is_spatial = 1 
					AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
					OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 63: Compressed indexes', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                    SELECT  63 AS check_id, 
                            i.index_sanity_id,
                            150 AS Priority,
                            N'Abnormal Psychology' AS findings_group,
                            N'Compressed indexes' AS finding,
                            [database_name] AS [Database Name], 
                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,
                            i.db_schema_object_indexid  + N'. COMPRESSION: ' + sz.data_compression_desc AS details, 
                            i.index_definition,
                            i.secret_columns,
                            i.index_usage_summary,
                            ISNULL(sz.index_size_summary,'') AS index_size_summary
                    FROM    #IndexSanity AS i
                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                    WHERE sz.data_compression_desc LIKE '%PAGE%' OR sz.data_compression_desc LIKE '%ROW%' 
					AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
					OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 64: Partitioned', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                    SELECT  64 AS check_id, 
                            i.index_sanity_id,
                            150 AS Priority,
                            N'Abnormal Psychology' AS findings_group,
                            N'Partitioned indexes' AS finding,
                            [database_name] AS [Database Name], 
                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,
                            i.db_schema_object_indexid AS details, 
                            i.index_definition,
                            i.secret_columns,
                            i.index_usage_summary,
                            ISNULL(sz.index_size_summary,'') AS index_size_summary
                    FROM    #IndexSanity AS i
                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                    WHERE i.partition_key_column_name IS NOT NULL 
					AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
					OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 65: Non-Aligned Partitioned', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                    SELECT  65 AS check_id, 
                            i.index_sanity_id,
                            150 AS Priority,
                            N'Abnormal Psychology' AS findings_group,
                            N'Non-Aligned index on a partitioned table' AS finding,
                            i.[database_name] AS [Database Name], 
                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,
                            i.db_schema_object_indexid AS details, 
                            i.index_definition,
                            i.secret_columns,
                            i.index_usage_summary,
                            ISNULL(sz.index_size_summary,'') AS index_size_summary
                    FROM    #IndexSanity AS i
                    JOIN #IndexSanity AS iParent ON
                        i.[object_id]=iParent.[object_id]
						AND i.database_id = iParent.database_id
						AND i.schema_name = iParent.schema_name
                        AND iParent.index_id IN (0,1) /* could be a partitioned heap or clustered table */
                        AND iParent.partition_key_column_name IS NOT NULL /* parent is partitioned*/         
                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                    WHERE i.partition_key_column_name IS NULL 
                    OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 66: Recently created tables/indexes (1 week)', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                    SELECT  66 AS check_id, 
                            i.index_sanity_id,
                            200 AS Priority,
                            N'Abnormal Psychology' AS findings_group,
                            N'Recently created tables/indexes (1 week)' AS finding,
                            [database_name] AS [Database Name], 
                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,
                            i.db_schema_object_indexid + N' was created on ' + 
                                CONVERT(NVARCHAR(16),i.create_date,121) + 
                                N'. Tables/indexes which are dropped/created regularly require special methods for index tuning.'
                                     AS details, 
                            i.index_definition,
                            i.secret_columns,
                            i.index_usage_summary,
                            ISNULL(sz.index_size_summary,'') AS index_size_summary
                    FROM    #IndexSanity AS i
                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                    WHERE i.create_date >= DATEADD(dd,-7,GETDATE()) 
                    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                    OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 67: Recently modified tables/indexes (2 days)', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                    SELECT  67 AS check_id, 
                            i.index_sanity_id,
                            200 AS Priority,
                            N'Abnormal Psychology' AS findings_group,
                            N'Recently modified tables/indexes (2 days)' AS finding,
                            [database_name] AS [Database Name], 
                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,
                            i.db_schema_object_indexid + N' was modified on ' + 
                                CONVERT(NVARCHAR(16),i.modify_date,121) + 
                                N'. A large amount of recently modified indexes may mean a lot of rebuilds are occurring each night.'
                                     AS details, 
                            i.index_definition,
                            i.secret_columns,
                            i.index_usage_summary,
                            ISNULL(sz.index_size_summary,'') AS index_size_summary
                    FROM    #IndexSanity AS i
                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                    WHERE i.modify_date > DATEADD(dd,-2,GETDATE()) 
                    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                    AND /*Exclude recently created tables.*/
                    i.create_date < DATEADD(dd,-7,GETDATE()) 
                    OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 68: Identity columns within 30 percent of the end of range', 0,1) WITH NOWAIT;
            -- Allowed Ranges: 
                --int -2,147,483,648 to 2,147,483,647
                --smallint -32,768 to 32,768
                --tinyint 0 to 255

                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  68 AS check_id, 
                                i.index_sanity_id, 
                                200 AS Priority,
                                N'Abnormal Psychology' AS findings_group,
                                N'Identity column within ' +                                     
                                    CAST (calc1.percent_remaining AS NVARCHAR(256))
                                    + N' percent  end of range' AS finding,
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,
                                i.db_schema_object_name + N'.' +  QUOTENAME(ic.column_name)
                                    + N' is an identity with type ' + ic.system_type_name 
                                    + N', last value of ' 
                                        + ISNULL(REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(ic.last_value AS BIGINT) AS MONEY), 1), '.00', ''),N'NULL')
                                    + N', seed of '
                                        + ISNULL(REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(ic.seed_value AS BIGINT) AS MONEY), 1), '.00', ''),N'NULL')
                                    + N', increment of ' + CAST(ic.increment_value AS NVARCHAR(256)) 
                                    + N', and range of ' +
                                        CASE ic.system_type_name WHEN 'int' THEN N'+/- 2,147,483,647'
                                            WHEN 'smallint' THEN N'+/- 32,768'
                                            WHEN 'tinyint' THEN N'0 to 255'
                                        END
                                        AS details,
                                i.index_definition,
                                secret_columns, 
                                ISNULL(i.index_usage_summary,''),
                                ISNULL(ip.index_size_summary,'')
                        FROM    #IndexSanity i
                        JOIN    #IndexColumns ic ON
                            i.object_id=ic.object_id
							AND i.database_id = ic.database_id
							AND i.schema_name = ic.schema_name
                            AND i.index_id IN (0,1) /* heaps and cx only */
                            AND ic.is_identity=1
                            AND ic.system_type_name IN ('tinyint', 'smallint', 'int')
                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id
                        CROSS APPLY (
                            SELECT CAST(CASE WHEN ic.increment_value >= 0
                                    THEN
                                        CASE ic.system_type_name 
                                            WHEN 'int' THEN (2147483647 - (ISNULL(ic.last_value,ic.seed_value) + ic.increment_value)) / 2147483647.*100
                                            WHEN 'smallint' THEN (32768 - (ISNULL(ic.last_value,ic.seed_value) + ic.increment_value)) / 32768.*100
                                            WHEN 'tinyint' THEN ( 255 - (ISNULL(ic.last_value,ic.seed_value) + ic.increment_value)) / 255.*100
                                            ELSE 999
                                        END
                                ELSE --ic.increment_value is negative
                                        CASE ic.system_type_name 
                                            WHEN 'int' THEN ABS(-2147483647 - (ISNULL(ic.last_value,ic.seed_value) + ic.increment_value)) / 2147483647.*100
                                            WHEN 'smallint' THEN ABS(-32768 - (ISNULL(ic.last_value,ic.seed_value) + ic.increment_value)) / 32768.*100
                                            WHEN 'tinyint' THEN ABS( 0 - (ISNULL(ic.last_value,ic.seed_value) + ic.increment_value)) / 255.*100
                                            ELSE -1
                                        END 
                                END AS NUMERIC(5,1)) AS percent_remaining
                                ) AS calc1
                        WHERE    i.index_id IN (1,0)
                            AND calc1.percent_remaining <= 30
                        UNION ALL
                        SELECT  68 AS check_id, 
                                i.index_sanity_id, 
                                200 AS Priority,
                                N'Abnormal Psychology' AS findings_group,
                                N'Identity column using a negative seed or increment other than 1' AS finding,
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,
                                i.db_schema_object_name + N'.' +  QUOTENAME(ic.column_name)
                                    + N' is an identity with type ' + ic.system_type_name 
                                    + N', last value of ' 
                                        + ISNULL(REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(ic.last_value AS BIGINT) AS MONEY), 1), '.00', ''),N'NULL')
                                    + N', seed of '
                                        + ISNULL(REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(ic.seed_value AS BIGINT) AS MONEY), 1), '.00', ''),N'NULL')
                                    + N', increment of ' + CAST(ic.increment_value AS NVARCHAR(256)) 
                                    + N', and range of ' +
                                        CASE ic.system_type_name WHEN 'int' THEN N'+/- 2,147,483,647'
                                            WHEN 'smallint' THEN N'+/- 32,768'
                                            WHEN 'tinyint' THEN N'0 to 255'
                                        END
                                        AS details,
                                i.index_definition,
                                secret_columns, 
                                ISNULL(i.index_usage_summary,''),
                                ISNULL(ip.index_size_summary,'')
                        FROM    #IndexSanity i
                        JOIN    #IndexColumns ic ON
                            i.object_id=ic.object_id
							AND i.database_id = ic.database_id
							AND i.schema_name = ic.schema_name
                            AND i.index_id IN (0,1) /* heaps and cx only */
                            AND ic.is_identity=1
                            AND ic.system_type_name IN ('tinyint', 'smallint', 'int')
                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id
                        WHERE    i.index_id IN (1,0)
                            AND (ic.seed_value < 0 OR ic.increment_value <> 1)
                        ORDER BY finding, details DESC 
						OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 69: Column collation does not match database collation', 0,1) WITH NOWAIT;
                WITH count_columns AS (
                            SELECT [object_id],
								   database_id,
								   schema_name,
                                   COUNT(*) AS column_count
                            FROM #IndexColumns ic
                            WHERE index_id IN (1,0) /*Heap or clustered only*/
                            AND collation_name <> @collation
                            GROUP BY [object_id],
								     database_id,
								     schema_name
                            )
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  69 AS check_id, 
                                i.index_sanity_id, 
                                150 AS Priority,
                                N'Abnormal Psychology' AS findings_group,
                                N'Column collation does not match database collation' AS finding,
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,
                                i.db_schema_object_name 
                                    + N' has ' + CAST(column_count AS NVARCHAR(20))
                                    + N' column' + CASE WHEN column_count > 1 THEN 's' ELSE '' END
                                    + N' with a different collation than the db collation of '
                                    + @collation    AS details,
                                i.index_definition,
                                secret_columns, 
                                ISNULL(i.index_usage_summary,''),
                                ISNULL(ip.index_size_summary,'')
                        FROM    #IndexSanity i
                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id
                        JOIN    count_columns AS cc ON i.[object_id]=cc.[object_id]
								AND cc.database_id = i.database_id
								AND cc.schema_name = i.schema_name
                        WHERE    i.index_id IN (1,0)
                        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                        ORDER BY i.db_schema_object_name DESC OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 70: Replicated columns', 0,1) WITH NOWAIT;
                WITH count_columns AS (
                            SELECT [object_id],
								   database_id,
								   schema_name,
                                   COUNT(*) AS column_count,
                                   SUM(CASE is_replicated WHEN 1 THEN 1 ELSE 0 END) AS replicated_column_count
                            FROM #IndexColumns ic
                            WHERE index_id IN (1,0) /*Heap or clustered only*/
                            GROUP BY object_id,
								     database_id,
								     schema_name
                            )
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                        SELECT  70 AS check_id, 
                                i.index_sanity_id,
                                200 AS Priority, 
                                N'Abnormal Psychology' AS findings_group,
                                N'Replicated columns' AS finding,
                                [database_name] AS [Database Name],
                                N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,
                                i.db_schema_object_name 
                                    + N' has ' + CAST(replicated_column_count AS NVARCHAR(20))
                                    + N' out of ' + CAST(column_count AS NVARCHAR(20))
                                    + N' column' + CASE WHEN column_count > 1 THEN 's' ELSE '' END
                                    + N' in one or more publications.'
                                        AS details,
                                i.index_definition,
                                secret_columns, 
                                ISNULL(i.index_usage_summary,''),
                                ISNULL(ip.index_size_summary,'')
                        FROM    #IndexSanity i
                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id
                        JOIN    count_columns AS cc ON i.[object_id]=cc.[object_id]
								AND i.database_id = cc.database_id
								AND i.schema_name = cc.schema_name
                        WHERE    i.index_id IN (1,0)
                            AND replicated_column_count > 0
                            AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
                        ORDER BY i.db_schema_object_name DESC 
						OPTION    ( RECOMPILE );

            RAISERROR(N'check_id 71: Cascading updates or cascading deletes.', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary, more_info )
            SELECT  71 AS check_id, 
                    NULL AS index_sanity_id,
                    150 AS Priority,
                    N'Abnormal Psychology' AS findings_group,
                    N'Cascading Updates or Deletes' AS finding, 
                    [database_name] AS [Database Name],
                    N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,
                    N'Foreign Key ' + foreign_key_name +
                    N' on ' + QUOTENAME(parent_object_name)  + N'(' + LTRIM(parent_fk_columns) + N')'
                        + N' referencing ' + QUOTENAME(referenced_object_name) + N'(' + LTRIM(referenced_fk_columns) + N')'
                        + N' has settings:'
                        + CASE [delete_referential_action_desc] WHEN N'NO_ACTION' THEN N'' ELSE N' ON DELETE ' +[delete_referential_action_desc] END
                        + CASE [update_referential_action_desc] WHEN N'NO_ACTION' THEN N'' ELSE N' ON UPDATE ' + [update_referential_action_desc] END
                            AS details, 
                    [fk].[database_name] 
                            AS index_definition, 
                    N'N/A' AS secret_columns,
                    N'N/A' AS index_usage_summary,
                    N'N/A' AS index_size_summary,
                    (SELECT TOP 1 more_info FROM #IndexSanity i WHERE i.object_id=fk.parent_object_id AND i.database_id = fk.database_id AND i.schema_name = fk.schema_name)
                        AS more_info
            FROM #ForeignKeys fk
            WHERE ([delete_referential_action_desc] <> N'NO_ACTION'
            OR [update_referential_action_desc] <> N'NO_ACTION')
            AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
			OPTION    ( RECOMPILE );

			RAISERROR(N'check_id 72: Columnstore indexes with Trace Flag 834', 0,1) WITH NOWAIT;
                IF EXISTS (SELECT * FROM #IndexSanity WHERE index_type IN (5,6))
				AND EXISTS (SELECT * FROM #TraceStatus WHERE TraceFlag = 834 AND status = 1)
				BEGIN
				INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
                    SELECT  72 AS check_id, 
                            i.index_sanity_id,
                            150 AS Priority,
                            N'Abnormal Psychology' AS findings_group,
                            'Columnstore Indexes are being used in conjunction with trace flag 834. Visit the link to see why this can be a bad idea' AS finding, 
                            [database_name] AS [Database Name],
                            N'https://support.microsoft.com/en-us/kb/3210239' AS URL,
                            i.db_schema_object_indexid AS details, 
                            i.index_definition,
                            i.secret_columns,
                            i.index_usage_summary,
                            ISNULL(sz.index_size_summary,'') AS index_size_summary
                    FROM    #IndexSanity AS i
                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id
                    WHERE i.index_type IN (5,6)
                    OPTION    ( RECOMPILE );
				END;

    END;

         ----------------------------------------
        --Workaholics: Check_id 80-89
        ----------------------------------------
    BEGIN

        RAISERROR(N'check_id 80: Most scanned indexes (index_usage_stats)', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )

        --Workaholics according to index_usage_stats
        --This isn't perfect: it mentions the number of scans present in a plan
        --A "scan" isn't necessarily a full scan, but hey, we gotta do the best with what we've got.
        --in the case of things like indexed views, the operator might be in the plan but never executed
        SELECT TOP 5 
            80 AS check_id,
            i.index_sanity_id AS index_sanity_id,
            200 AS Priority,
            N'Workaholics' AS findings_group,
            N'Scan-a-lots (index_usage_stats)' AS finding,
            [database_name] AS [Database Name],
            N'http://BrentOzar.com/go/Workaholics' AS URL,
            REPLACE(CONVERT( NVARCHAR(50),CAST(i.user_scans AS MONEY),1),'.00','')
                + N' scans against ' + i.db_schema_object_indexid
                + N'. Latest scan: ' + ISNULL(CAST(i.last_user_scan AS NVARCHAR(128)),'?') + N'. ' 
                + N'ScanFactor=' + CAST(((i.user_scans * iss.total_reserved_MB)/1000000.) AS NVARCHAR(256)) AS details,
            ISNULL(i.key_column_names_with_sort_order,'N/A') AS index_definition,
            ISNULL(i.secret_columns,'') AS secret_columns,
            i.index_usage_summary AS index_usage_summary,
            iss.index_size_summary AS index_size_summary
        FROM #IndexSanity i
        JOIN #IndexSanitySize iss ON i.index_sanity_id=iss.index_sanity_id
        WHERE ISNULL(i.user_scans,0) > 0
        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
        ORDER BY  i.user_scans * iss.total_reserved_MB DESC
		OPTION    ( RECOMPILE );

        RAISERROR(N'check_id 81: Top recent accesses (op stats)', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
        --Workaholics according to index_operational_stats
        --This isn't perfect either: range_scan_count contains full scans, partial scans, even seeks in nested loop ops
        --But this can help bubble up some most-accessed tables 
        SELECT TOP 5 
            81 AS check_id,
            i.index_sanity_id AS index_sanity_id,
            200 AS Priority,
            N'Workaholics' AS findings_group,
            N'Top recent accesses (index_op_stats)' AS finding,
            [database_name] AS [Database Name],
            N'http://BrentOzar.com/go/Workaholics' AS URL,
            ISNULL(REPLACE(
                    CONVERT(NVARCHAR(50),CAST((iss.total_range_scan_count + iss.total_singleton_lookup_count) AS MONEY),1),
                    N'.00',N'') 
                + N' uses of ' + i.db_schema_object_indexid + N'. '
                + REPLACE(CONVERT(NVARCHAR(50), CAST(iss.total_range_scan_count AS MONEY),1),N'.00',N'') + N' scans or seeks. '
                + REPLACE(CONVERT(NVARCHAR(50), CAST(iss.total_singleton_lookup_count AS MONEY), 1),N'.00',N'') + N' singleton lookups. '
                + N'OpStatsFactor=' + CAST(((((iss.total_range_scan_count + iss.total_singleton_lookup_count) * iss.total_reserved_MB))/1000000.) AS VARCHAR(256)),'') AS details,
            ISNULL(i.key_column_names_with_sort_order,'N/A') AS index_definition,
            ISNULL(i.secret_columns,'') AS secret_columns,
            i.index_usage_summary AS index_usage_summary,
            iss.index_size_summary AS index_size_summary
        FROM #IndexSanity i
        JOIN #IndexSanitySize iss ON i.index_sanity_id=iss.index_sanity_id
        WHERE (ISNULL(iss.total_range_scan_count,0)  > 0 OR ISNULL(iss.total_singleton_lookup_count,0) > 0)
        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
        ORDER BY ((iss.total_range_scan_count + iss.total_singleton_lookup_count) * iss.total_reserved_MB) DESC
		OPTION    ( RECOMPILE );


    END;

         ----------------------------------------
        --Statistics Info: Check_id 90-99
        ----------------------------------------
    BEGIN

        RAISERROR(N'check_id 90: Outdated statistics', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
		SELECT  90 AS check_id, 
				200 AS Priority,
				'Functioning Statistaholics' AS findings_group,
				'Statistic Abandonment Issues',
				s.database_name,
				'' AS URL,
				'Statistics on this table were last updated ' + 
					CASE s.last_statistics_update WHEN NULL THEN N' NEVER '
					ELSE CONVERT(NVARCHAR(20), s.last_statistics_update) + 
						' have had ' + CONVERT(NVARCHAR(100), s.modification_counter) +
						' modifications in that time, which is ' +
						CONVERT(NVARCHAR(100), s.percent_modifications) + 
						'% of the table.'
					END AS details,
				QUOTENAME(database_name) + '.' + QUOTENAME(s.schema_name) + '.' + QUOTENAME(s.table_name) + '.' + QUOTENAME(s.index_name) + '.' + QUOTENAME(s.statistics_name) + '.' + QUOTENAME(s.column_names) AS index_definition,
				'N/A' AS secret_columns,
				'N/A' AS index_usage_summary,
				'N/A' AS index_size_summary
		FROM #Statistics AS s
		WHERE s.last_statistics_update <= CONVERT(DATETIME, GETDATE() - 7) 
		AND s.percent_modifications >= 10. 
		AND s.rows >= 10000
		AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
		OPTION    ( RECOMPILE );

        RAISERROR(N'check_id 91: Statistics with a low sample rate', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
		SELECT  91 AS check_id, 
				200 AS Priority,
				'Functioning Statistaholics' AS findings_group,
				'Antisocial Samples',
				s.database_name,
				'' AS URL,
				'Only ' + CONVERT(NVARCHAR(100), s.percent_sampled) + '% of the rows were sampled during the last statistics update. This may lead to poor cardinality estimates.' AS details,
				QUOTENAME(database_name) + '.' + QUOTENAME(s.schema_name) + '.' + QUOTENAME(s.table_name) + '.' + QUOTENAME(s.index_name) + '.' + QUOTENAME(s.statistics_name) + '.' + QUOTENAME(s.column_names) AS index_definition,
				'N/A' AS secret_columns,
				'N/A' AS index_usage_summary,
				'N/A' AS index_size_summary
		FROM #Statistics AS s
		WHERE s.rows_sampled < 1.
		AND s.rows >= 10000
		AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
		OPTION    ( RECOMPILE );

        RAISERROR(N'check_id 92: Statistics with NO RECOMPUTE', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
		SELECT  92 AS check_id, 
				200 AS Priority,
				'Functioning Statistaholics' AS findings_group,
				'Cyberphobic Samples',
				s.database_name,
				'' AS URL,
				'The statistic ' + QUOTENAME(s.statistics_name) +  ' is set to not recompute. This can be helpful if data is really skewed, but harmful if you expect automatic statistics updates.' AS details,
				QUOTENAME(database_name) + '.' + QUOTENAME(s.schema_name) + '.' + QUOTENAME(s.table_name) + '.' + QUOTENAME(s.index_name) + '.' + QUOTENAME(s.statistics_name) + '.' + QUOTENAME(s.column_names) AS index_definition,
				'N/A' AS secret_columns,
				'N/A' AS index_usage_summary,
				'N/A' AS index_size_summary
		FROM #Statistics AS s
		WHERE s.no_recompute = 1
		AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
		OPTION    ( RECOMPILE );

        RAISERROR(N'check_id 93: Statistics with filters', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
		SELECT  93 AS check_id, 
				200 AS Priority,
				'Functioning Statistaholics' AS findings_group,
				'Filter Fixation',
				s.database_name,
				'' AS URL,
				'The statistic ' + QUOTENAME(s.statistics_name) +  ' is filtered on [' + s.filter_definition + ']. It could be part of a filtered index, or just a filtered statistic. This is purely informational.' AS details,
				 QUOTENAME(database_name) + '.' + QUOTENAME(s.schema_name) + '.' + QUOTENAME(s.table_name) + '.' + QUOTENAME(s.index_name) + '.' + QUOTENAME(s.statistics_name) + '.' + QUOTENAME(s.column_names) AS index_definition,
				'N/A' AS secret_columns,
				'N/A' AS index_usage_summary,
				'N/A' AS index_size_summary
		FROM #Statistics AS s
		WHERE s.has_filter = 1
		AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
		OPTION    ( RECOMPILE );

		END; 

         ----------------------------------------
        --Computed Column Info: Check_id 99-109
        ----------------------------------------
    BEGIN

	     RAISERROR(N'check_id 99: Computed Columns That Reference Functions', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
		SELECT  99 AS check_id, 
				50 AS Priority,
				'Cold Calculators' AS findings_group,
				'Serial Forcer' AS finding,
				cc.database_name,
				'' AS URL,
				'The computed column ' + QUOTENAME(cc.column_name) + ' on ' + QUOTENAME(cc.schema_name) + '.' + QUOTENAME(cc.table_name) + ' is based on ' + cc.definition 
				+ '. That indicates it may reference a scalar function, or a CLR function with data access, which can cause all queries and maintenance to run serially.' AS details,
				cc.column_definition,
				'N/A' AS secret_columns,
				'N/A' AS index_usage_summary,
				'N/A' AS index_size_summary
		FROM #ComputedColumns AS cc
		WHERE cc.is_function = 1
		OPTION    ( RECOMPILE );

		RAISERROR(N'check_id 100: Computed Columns that are not Persisted.', 0,1) WITH NOWAIT;
        INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
		SELECT  100 AS check_id, 
				200 AS Priority,
				'Cold Calculators' AS findings_group,
				'Definition Defeatists' AS finding,
				cc.database_name,
				'' AS URL,
				'The computed column ' + QUOTENAME(cc.column_name) + ' on ' + QUOTENAME(cc.schema_name) + '.' + QUOTENAME(cc.table_name) + ' is not persisted, which means it will be calculated when a query runs.' + 
				'You can change this with the following command, if the definition is deterministic: ALTER TABLE ' + QUOTENAME(cc.schema_name) + '.' + QUOTENAME(cc.table_name) + ' ALTER COLUMN ' + cc.column_name +
				' ADD PERSISTED'  AS details,
				cc.column_definition,
				'N/A' AS secret_columns,
				'N/A' AS index_usage_summary,
				'N/A' AS index_size_summary
		FROM #ComputedColumns AS cc
		WHERE cc.is_persisted = 0
		AND NOT (@GetAllDatabases = 1 OR @Mode = 0)
		OPTION    ( RECOMPILE );

        ----------------------------------------
        --Temporal Table Info: Check_id 110-119
        ----------------------------------------
		RAISERROR(N'check_id 110: Temporal Tables.', 0,1) WITH NOWAIT;
        INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )

				SELECT  110 AS check_id, 
				200 AS Priority,
				'Temporal Tables' AS findings_group,
				'Obsessive Compulsive Tables',
				t.database_name,
				'' AS URL,
				'The table ' + QUOTENAME(t.schema_name) + '.' + QUOTENAME(t.table_name) + ' is a temporal table, with rows versioned in ' 
					+ QUOTENAME(t.history_schema_name) + '.' + QUOTENAME(t.history_table_name) + ' on History columns ' + QUOTENAME(t.start_column_name) + ' and ' + QUOTENAME(t.end_column_name) + '.'
				 AS details,
				'' AS index_definition,
				'N/A' AS secret_columns,
				'N/A' AS index_usage_summary,
				'N/A' AS index_size_summary
		FROM #TemporalTables AS t
		WHERE NOT (@GetAllDatabases = 1 OR @Mode = 0)
		OPTION    ( RECOMPILE );

        ----------------------------------------
        --Check Constraint Info: Check_id 120-129
        ----------------------------------------

	     RAISERROR(N'check_id 120: Check Constraints That Reference Functions', 0,1) WITH NOWAIT;
                INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,
                                               secret_columns, index_usage_summary, index_size_summary )
		SELECT  99 AS check_id, 
				50 AS Priority,
				'Obsessive Constraintive' AS findings_group,
				'Serial Forcer' AS finding,
				cc.database_name,
				'' AS URL,
				'The check constraint ' + QUOTENAME(cc.constraint_name) + ' on ' + QUOTENAME(cc.schema_name) + '.' + QUOTENAME(cc.table_name) + ' is based on ' + cc.definition 
				+ '. That indicates it may reference a scalar function, or a CLR function with data access, which can cause all queries and maintenance to run serially.' AS details,
				cc.column_definition,
				'N/A' AS secret_columns,
				'N/A' AS index_usage_summary,
				'N/A' AS index_size_summary
		FROM #CheckConstraints AS cc
		WHERE cc.is_function = 1
		OPTION    ( RECOMPILE );

	END; 
 
        RAISERROR(N'Insert a row to help people find help', 0,1) WITH NOWAIT;
        IF DATEDIFF(MM, @VersionDate, GETDATE()) > 6
		BEGIN
            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,
                                            index_usage_summary, index_size_summary )
            VALUES  ( -1, 0 , 
		           'Outdated sp_BlitzIndex', 'sp_BlitzIndex is Over 6 Months Old', 'http://FirstResponderKit.org/', 
                   'Fine wine gets better with age, but this ' + @ScriptVersionName + ' is more like bad cheese. Time to get a new one.',
                    @DaysUptimeInsertValue,N'',N''
                    );
        END;

        IF EXISTS(SELECT * FROM #BlitzIndexResults)
		BEGIN
            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,
                                            index_usage_summary, index_size_summary )
            VALUES  ( -1, 0 , 
		            @ScriptVersionName,
                    CASE WHEN @GetAllDatabases = 1 THEN N'All Databases' ELSE N'Database ' + QUOTENAME(@DatabaseName) + N' as of ' + CONVERT(NVARCHAR(16),GETDATE(),121) END, 
                    N'From Your Community Volunteers' ,   N'http://FirstResponderKit.org' ,
                    @DaysUptimeInsertValue,N'',N''
                    );
        END;
        ELSE IF @Mode = 0 OR (@GetAllDatabases = 1 AND @Mode <> 4)
        BEGIN
            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,
                                            index_usage_summary, index_size_summary )
            VALUES  ( -1, 0 , 
		            @ScriptVersionName,
                    CASE WHEN @GetAllDatabases = 1 THEN N'All Databases' ELSE N'Database ' + QUOTENAME(@DatabaseName) + N' as of ' + CONVERT(NVARCHAR(16),GETDATE(),121) END, 
                    N'From Your Community Volunteers' ,   N'http://FirstResponderKit.org' ,
                    @DaysUptimeInsertValue, N'',N''
                    );
            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,
                                            index_usage_summary, index_size_summary )
            VALUES  ( 1, 0 , 
		           N'No Major Problems Found',
                   N'Nice Work!',
                   N'http://FirstResponderKit.org', 
                   N'Consider running with @Mode = 4 in individual databases (not all) for more detailed diagnostics.', 
                   N'The new default Mode 0 only looks for very serious index issues.', 
                   @DaysUptimeInsertValue, N''
                    );

        END;
        ELSE
        BEGIN
            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,
                                            index_usage_summary, index_size_summary )
            VALUES  ( -1, 0 , 
		            @ScriptVersionName,
                    CASE WHEN @GetAllDatabases = 1 THEN N'All Databases' ELSE N'Database ' + QUOTENAME(@DatabaseName) + N' as of ' + CONVERT(NVARCHAR(16),GETDATE(),121) END, 
                    N'From Your Community Volunteers' ,   N'http://FirstResponderKit.org' ,
                    @DaysUptimeInsertValue, N'',N''
                    );
            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,
                                            index_usage_summary, index_size_summary )
            VALUES  ( 1, 0 , 
		           N'No Problems Found',
                   N'Nice job! Or more likely, you have a nearly empty database.',
                   N'http://FirstResponderKit.org', 'Time to go read some blog posts.', 
                   @DaysUptimeInsertValue, N'', N''
                    );

        END;

        RAISERROR(N'Returning results.', 0,1) WITH NOWAIT;
            
        /*Return results.*/
        IF (@Mode = 0)
        BEGIN
			IF(@OutputType <> 'NONE')
			BEGIN
				SELECT Priority, ISNULL(br.findings_group,N'') + 
						CASE WHEN ISNULL(br.finding,N'') <> N'' THEN N': ' ELSE N'' END
						+ br.finding AS [Finding], 
					br.[database_name] AS [Database Name],
					br.details AS [Details: schema.table.index(indexid)], 
					br.index_definition AS [Definition: [Property]] ColumnName {datatype maxbytes}], 
					ISNULL(br.secret_columns,'') AS [Secret Columns],          
					br.index_usage_summary AS [Usage], 
					br.index_size_summary AS [Size],
					COALESCE(br.more_info,sn.more_info,'') AS [More Info],
					br.URL, 
					COALESCE(br.create_tsql,ts.create_tsql,'') AS [Create TSQL]
				FROM #BlitzIndexResults br
				LEFT JOIN #IndexSanity sn ON 
					br.index_sanity_id=sn.index_sanity_id
				LEFT JOIN #IndexCreateTsql ts ON 
					br.index_sanity_id=ts.index_sanity_id
				WHERE br.check_id IN ( 0, 1, 2, 11, 12, 13, 
				                      22, 34, 43, 47, 48, 
				                      50, 65, 68, 73, 99 )
				ORDER BY br.Priority ASC, br.check_id ASC, br.blitz_result_id ASC, br.findings_group ASC
				OPTION (RECOMPILE);
			 END;

        END;
        ELSE IF (@Mode = 4)
			IF(@OutputType <> 'NONE')
		 	BEGIN	
				SELECT Priority, ISNULL(br.findings_group,N'') + 
						CASE WHEN ISNULL(br.finding,N'') <> N'' THEN N': ' ELSE N'' END
						+ br.finding AS [Finding], 
					br.[database_name] AS [Database Name],
					br.details AS [Details: schema.table.index(indexid)], 
					br.index_definition AS [Definition: [Property]] ColumnName {datatype maxbytes}], 
					ISNULL(br.secret_columns,'') AS [Secret Columns],          
					br.index_usage_summary AS [Usage], 
					br.index_size_summary AS [Size],
					COALESCE(br.more_info,sn.more_info,'') AS [More Info],
					br.URL, 
					COALESCE(br.create_tsql,ts.create_tsql,'') AS [Create TSQL]
				FROM #BlitzIndexResults br
				LEFT JOIN #IndexSanity sn ON 
					br.index_sanity_id=sn.index_sanity_id
				LEFT JOIN #IndexCreateTsql ts ON 
					br.index_sanity_id=ts.index_sanity_id
				ORDER BY br.Priority ASC, br.check_id ASC, br.blitz_result_id ASC, br.findings_group ASC
				OPTION (RECOMPILE);
			 END;

    END; /* End @Mode=0 or 4 (diagnose)*/
    ELSE IF (@Mode=1) /*Summarize*/
    BEGIN
    --This mode is to give some overall stats on the database.
	 	IF(@OutputType <> 'NONE')
	 	BEGIN
			RAISERROR(N'@Mode=1, we are summarizing.', 0,1) WITH NOWAIT;

			SELECT DB_NAME(i.database_id) AS [Database Name],
				CAST((COUNT(*)) AS NVARCHAR(256)) AS [Number Objects],
				CAST(CAST(SUM(sz.total_reserved_MB)/
					1024. AS NUMERIC(29,1)) AS NVARCHAR(500)) AS [All GB],
				CAST(CAST(SUM(sz.total_reserved_LOB_MB)/
					1024. AS NUMERIC(29,1)) AS NVARCHAR(500)) AS [LOB GB],
				CAST(CAST(SUM(sz.total_reserved_row_overflow_MB)/
					1024. AS NUMERIC(29,1)) AS NVARCHAR(500)) AS [Row Overflow GB],
				CAST(SUM(CASE WHEN index_id=1 THEN 1 ELSE 0 END)AS NVARCHAR(50)) AS [Clustered Tables],
				CAST(SUM(CASE WHEN index_id=1 THEN sz.total_reserved_MB ELSE 0 END)
					/1024. AS NUMERIC(29,1)) AS [Clustered Tables GB],
				SUM(CASE WHEN index_id NOT IN (0,1) THEN 1 ELSE 0 END) AS [NC Indexes],
				CAST(SUM(CASE WHEN index_id NOT IN (0,1) THEN sz.total_reserved_MB ELSE 0 END)
					/1024. AS NUMERIC(29,1)) AS [NC Indexes GB],
				CASE WHEN SUM(CASE WHEN index_id NOT IN (0,1) THEN sz.total_reserved_MB ELSE 0 END)  > 0 THEN
					CAST(SUM(CASE WHEN index_id IN (0,1) THEN sz.total_reserved_MB ELSE 0 END)
						/ SUM(CASE WHEN index_id NOT IN (0,1) THEN sz.total_reserved_MB ELSE 0 END) AS NUMERIC(29,1)) 
					ELSE 0 END AS [ratio table: NC Indexes],
				SUM(CASE WHEN index_id=0 THEN 1 ELSE 0 END) AS [Heaps],
				CAST(SUM(CASE WHEN index_id=0 THEN sz.total_reserved_MB ELSE 0 END)
					/1024. AS NUMERIC(29,1)) AS [Heaps GB],
				SUM(CASE WHEN index_id IN (0,1) AND partition_key_column_name IS NOT NULL THEN 1 ELSE 0 END) AS [Partitioned Tables],
				SUM(CASE WHEN index_id NOT IN (0,1) AND  partition_key_column_name IS NOT NULL THEN 1 ELSE 0 END) AS [Partitioned NCs],
				CAST(SUM(CASE WHEN partition_key_column_name IS NOT NULL THEN sz.total_reserved_MB ELSE 0 END)/1024. AS NUMERIC(29,1)) AS [Partitioned GB],
				SUM(CASE WHEN filter_definition <> '' THEN 1 ELSE 0 END) AS [Filtered Indexes],
				SUM(CASE WHEN is_indexed_view=1 THEN 1 ELSE 0 END) AS [Indexed Views],
				MAX(total_rows) AS [Max Row Count],
				CAST(MAX(CASE WHEN index_id IN (0,1) THEN sz.total_reserved_MB ELSE 0 END)
					/1024. AS NUMERIC(29,1)) AS [Max Table GB],
				CAST(MAX(CASE WHEN index_id NOT IN (0,1) THEN sz.total_reserved_MB ELSE 0 END)
					/1024. AS NUMERIC(29,1)) AS [Max NC Index GB],
				SUM(CASE WHEN index_id IN (0,1) AND sz.total_reserved_MB > 1024 THEN 1 ELSE 0 END) AS [Count Tables > 1GB],
				SUM(CASE WHEN index_id IN (0,1) AND sz.total_reserved_MB > 10240 THEN 1 ELSE 0 END) AS [Count Tables > 10GB],
				SUM(CASE WHEN index_id IN (0,1) AND sz.total_reserved_MB > 102400 THEN 1 ELSE 0 END) AS [Count Tables > 100GB],    
				SUM(CASE WHEN index_id NOT IN (0,1) AND sz.total_reserved_MB > 1024 THEN 1 ELSE 0 END) AS [Count NCs > 1GB],
				SUM(CASE WHEN index_id NOT IN (0,1) AND sz.total_reserved_MB > 10240 THEN 1 ELSE 0 END) AS [Count NCs > 10GB],
				SUM(CASE WHEN index_id NOT IN (0,1) AND sz.total_reserved_MB > 102400 THEN 1 ELSE 0 END) AS [Count NCs > 100GB],
				MIN(create_date) AS [Oldest Create Date],
				MAX(create_date) AS [Most Recent Create Date],
				MAX(modify_date) AS [Most Recent Modify Date],
				1 AS [Display Order]
			FROM #IndexSanity AS i
			--left join here so we don't lose disabled nc indexes
			LEFT JOIN #IndexSanitySize AS sz 
				ON i.index_sanity_id=sz.index_sanity_id
			GROUP BY DB_NAME(i.database_id)	 
			UNION ALL
			SELECT  CASE WHEN @GetAllDatabases = 1 THEN N'All Databases' ELSE N'Database ' + N' as of ' + CONVERT(NVARCHAR(16),GETDATE(),121) END,        
					@ScriptVersionName,   
					N'From Your Community Volunteers' ,   
					N'http://FirstResponderKit.org' ,
					@DaysUptimeInsertValue,
					NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
					NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
					NULL,NULL,0 AS display_order
			ORDER BY [Display Order] ASC
			OPTION (RECOMPILE);
	  	END;
           
    END; /* End @Mode=1 (summarize)*/
    ELSE IF (@Mode=2) /*Index Detail*/
    BEGIN
        --This mode just spits out all the detail without filters.
        --This supports slicing AND dicing in Excel
        RAISERROR(N'@Mode=2, here''s the details on existing indexes.', 0,1) WITH NOWAIT;

		
		/* Checks if @OutputServerName is populated with a valid linked server, and that the database name specified is valid */
		DECLARE @ValidOutputServer BIT;
		DECLARE @ValidOutputLocation BIT;
		DECLARE @LinkedServerDBCheck NVARCHAR(2000);
		DECLARE @ValidLinkedServerDB INT;
		DECLARE @tmpdbchk TABLE (cnt INT);
		DECLARE @StringToExecute NVARCHAR(MAX);
		
		IF @OutputServerName IS NOT NULL
			BEGIN
				IF (SUBSTRING(@OutputTableName, 2, 1) = '#')
					BEGIN
						RAISERROR('Due to the nature of temporary tables, outputting to a linked server requires a permanent table.', 16, 0);
					END;
				ELSE IF EXISTS (SELECT server_id FROM sys.servers WHERE QUOTENAME([name]) = @OutputServerName)
					BEGIN
						SET @LinkedServerDBCheck = 'SELECT 1 WHERE EXISTS (SELECT * FROM '+@OutputServerName+'.master.sys.databases WHERE QUOTENAME([name]) = '''+@OutputDatabaseName+''')';
						INSERT INTO @tmpdbchk EXEC sys.sp_executesql @LinkedServerDBCheck;
						SET @ValidLinkedServerDB = (SELECT COUNT(*) FROM @tmpdbchk);
						IF (@ValidLinkedServerDB > 0)
							BEGIN
								SET @ValidOutputServer = 1;
								SET @ValidOutputLocation = 1;
							END;
						ELSE
							RAISERROR('The specified database was not found on the output server', 16, 0);
					END;
				ELSE
					BEGIN
						RAISERROR('The specified output server was not found', 16, 0);
					END;
			END;
		ELSE
			BEGIN
				IF (SUBSTRING(@OutputTableName, 2, 2) = '##')
					BEGIN
						SET @StringToExecute = N' IF (OBJECT_ID(''[tempdb].[dbo].@@@OutputTableName@@@'') IS NOT NULL) DROP TABLE @@@OutputTableName@@@';
						SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputTableName@@@', @OutputTableName); 
						EXEC(@StringToExecute);
						
						SET @OutputServerName = QUOTENAME(CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128)));
						SET @OutputDatabaseName = '[tempdb]';
						SET @OutputSchemaName = '[dbo]';
						SET @ValidOutputLocation = 1;
					END;
				ELSE IF (SUBSTRING(@OutputTableName, 2, 1) = '#')
					BEGIN
						RAISERROR('Due to the nature of Dymamic SQL, only global (i.e. double pound (##)) temp tables are supported for @OutputTableName', 16, 0);
					END;
				ELSE IF @OutputDatabaseName IS NOT NULL
					AND @OutputSchemaName IS NOT NULL
					AND @OutputTableName IS NOT NULL
					AND EXISTS ( SELECT *
						 FROM   sys.databases
						 WHERE  QUOTENAME([name]) = @OutputDatabaseName)
					BEGIN
						SET @ValidOutputLocation = 1;
						SET @OutputServerName = QUOTENAME(CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128)));
					END;
				ELSE IF @OutputDatabaseName IS NOT NULL
					AND @OutputSchemaName IS NOT NULL
					AND @OutputTableName IS NOT NULL
					AND NOT EXISTS ( SELECT *
						 FROM   sys.databases
						 WHERE  QUOTENAME([name]) = @OutputDatabaseName)
					BEGIN
						RAISERROR('The specified output database was not found on this server', 16, 0);
					END;
				ELSE
					BEGIN
						SET @ValidOutputLocation = 0; 
					END;
			END;
																										
        IF (@ValidOutputLocation = 0 AND @OutputType = 'NONE')
        BEGIN
            RAISERROR('Invalid output location and no output asked',12,1);
            RETURN;
        END;
																										
		/* @OutputTableName lets us export the results to a permanent table */
		DECLARE @RunID UNIQUEIDENTIFIER;
		SET @RunID = NEWID();
		
		IF (@ValidOutputLocation = 1 AND COALESCE(@OutputServerName, @OutputDatabaseName, @OutputSchemaName, @OutputTableName) IS NOT NULL)
			BEGIN
				DECLARE @TableExists BIT;
				DECLARE @SchemaExists BIT;
				SET @StringToExecute = 
					N'SET @SchemaExists = 0;
					SET @TableExists = 0;
					IF EXISTS(SELECT * FROM @@@OutputServerName@@@.@@@OutputDatabaseName@@@.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = ''@@@OutputSchemaName@@@'') 
						SET @SchemaExists = 1
					IF EXISTS (SELECT * FROM @@@OutputServerName@@@.@@@OutputDatabaseName@@@.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = ''@@@OutputSchemaName@@@'' AND QUOTENAME(TABLE_NAME) = ''@@@OutputTableName@@@'')
						SET @TableExists = 1';
	
				SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputServerName@@@', @OutputServerName);
				SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputDatabaseName@@@', @OutputDatabaseName);
				SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputSchemaName@@@', @OutputSchemaName); 
				SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputTableName@@@', @OutputTableName);
	
				EXEC sp_executesql @StringToExecute, N'@TableExists BIT OUTPUT, @SchemaExists BIT OUTPUT', @TableExists OUTPUT, @SchemaExists OUTPUT;
				
				IF @SchemaExists = 1
					BEGIN
						IF @TableExists = 0
							BEGIN
								SET @StringToExecute = 
									N'CREATE TABLE @@@OutputDatabaseName@@@.@@@OutputSchemaName@@@.@@@OutputTableName@@@ 
										(
											[id] INT IDENTITY(1,1) NOT NULL, 
											[run_id] UNIQUEIDENTIFIER,
											[run_datetime] DATETIME, 
											[server_name] NVARCHAR(128), 
											[database_name] NVARCHAR(128), 
											[schema_name] NVARCHAR(128), 
											[table_name] NVARCHAR(128), 
											[index_name] NVARCHAR(128),
                                            [Drop_Tsql] NVARCHAR(MAX),
                                            [Create_Tsql] NVARCHAR(MAX), 
											[index_id] INT, 
											[db_schema_object_indexid] NVARCHAR(500), 
											[object_type] NVARCHAR(15), 
											[index_definition] NVARCHAR(MAX), 
											[key_column_names_with_sort_order] NVARCHAR(MAX), 
											[count_key_columns] INT, 
											[include_column_names] NVARCHAR(MAX), 
											[count_included_columns] INT, 
											[secret_columns] NVARCHAR(MAX), 
											[count_secret_columns] INT, 
											[partition_key_column_name] NVARCHAR(MAX), 
											[filter_definition] NVARCHAR(MAX), 
											[is_indexed_view] BIT, 
											[is_primary_key] BIT, 
											[is_XML] BIT, 
											[is_spatial] BIT, 
											[is_NC_columnstore] BIT, 
											[is_CX_columnstore] BIT, 
											[is_disabled] BIT, 
											[is_hypothetical] BIT, 
											[is_padded] BIT, 
											[fill_factor] INT, 
											[is_referenced_by_foreign_key] BIT,
											[last_user_seek] DATETIME, 
											[last_user_scan] DATETIME, 
											[last_user_lookup] DATETIME, 
											[last_user_update] DATETIME, 
											[total_reads] BIGINT, 
											[user_updates] BIGINT, 
											[reads_per_write] MONEY, 
											[index_usage_summary] NVARCHAR(200), 
											[total_singleton_lookup_count] BIGINT, 
											[total_range_scan_count] BIGINT, 
											[total_leaf_delete_count] BIGINT, 
											[total_leaf_update_count] BIGINT, 
											[index_op_stats] NVARCHAR(200), 
											[partition_count] INT, 
											[total_rows] BIGINT, 
											[total_reserved_MB] NUMERIC(29,2), 
											[total_reserved_LOB_MB] NUMERIC(29,2), 
											[total_reserved_row_overflow_MB] NUMERIC(29,2), 
											[index_size_summary] NVARCHAR(300), 
											[total_row_lock_count] BIGINT, 
											[total_row_lock_wait_count] BIGINT, 
											[total_row_lock_wait_in_ms] BIGINT, 
											[avg_row_lock_wait_in_ms] BIGINT, 
											[total_page_lock_count] BIGINT, 
											[total_page_lock_wait_count] BIGINT, 
											[total_page_lock_wait_in_ms] BIGINT, 
											[avg_page_lock_wait_in_ms] BIGINT, 
											[total_index_lock_promotion_attempt_count] BIGINT, 
											[total_index_lock_promotion_count] BIGINT, 
											[data_compression_desc] NVARCHAR(4000), 
						                    [page_latch_wait_count] BIGINT,
								            [page_latch_wait_in_ms] BIGINT,
								            [page_io_latch_wait_count] BIGINT,								
								            [page_io_latch_wait_in_ms] BIGINT,
											[create_date] DATETIME, 
											[modify_date] DATETIME, 
											[more_info] NVARCHAR(500),
											[display_order] INT,
											CONSTRAINT [PK_ID_@@@RunID@@@] PRIMARY KEY CLUSTERED ([id] ASC)
										);';
		
								SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputDatabaseName@@@', @OutputDatabaseName);
								SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputSchemaName@@@', @OutputSchemaName); 
								SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputTableName@@@', @OutputTableName); 
								SET @StringToExecute = REPLACE(@StringToExecute, '@@@RunID@@@', @RunID); 
								
								IF @ValidOutputServer = 1
									BEGIN
										SET @StringToExecute = REPLACE(@StringToExecute,'''','''''');
										EXEC('EXEC('''+@StringToExecute+''') AT ' + @OutputServerName);
									END;   
								ELSE
									BEGIN
										EXEC(@StringToExecute);
									END;
							END; /* @TableExists = 0 */
					
						SET @StringToExecute = 
							N'IF EXISTS(SELECT * FROM @@@OutputServerName@@@.@@@OutputDatabaseName@@@.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = ''@@@OutputSchemaName@@@'') 
								AND NOT EXISTS (SELECT * FROM @@@OutputServerName@@@.@@@OutputDatabaseName@@@.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = ''@@@OutputSchemaName@@@'' AND QUOTENAME(TABLE_NAME) = ''@@@OutputTableName@@@'')
								SET @TableExists = 0
							ELSE
								SET @TableExists = 1';
				
						SET @TableExists = NULL;
						SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputServerName@@@', @OutputServerName);
						SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputDatabaseName@@@', @OutputDatabaseName);
						SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputSchemaName@@@', @OutputSchemaName); 
						SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputTableName@@@', @OutputTableName); 
			
						EXEC sp_executesql @StringToExecute, N'@TableExists BIT OUTPUT', @TableExists OUTPUT;
						
						IF @TableExists = 1
							BEGIN
								SET @StringToExecute = 
									N'INSERT @@@OutputServerName@@@.@@@OutputDatabaseName@@@.@@@OutputSchemaName@@@.@@@OutputTableName@@@
										(
											[run_id], 
											[run_datetime], 
											[server_name], 
											[database_name], 
											[schema_name], 
											[table_name], 
											[index_name],
                                            [Drop_Tsql],
                                            [Create_Tsql], 
											[index_id], 
											[db_schema_object_indexid], 
											[object_type], 
											[index_definition], 
											[key_column_names_with_sort_order], 
											[count_key_columns], 
											[include_column_names], 
											[count_included_columns], 
											[secret_columns], 
											[count_secret_columns], 
											[partition_key_column_name], 
											[filter_definition], 
											[is_indexed_view], 
											[is_primary_key], 
											[is_XML], 
											[is_spatial], 
											[is_NC_columnstore], 
											[is_CX_columnstore], 
											[is_disabled], 
											[is_hypothetical], 
											[is_padded], 
											[fill_factor], 
											[is_referenced_by_foreign_key], 
											[last_user_seek], 
											[last_user_scan], 
											[last_user_lookup], 
											[last_user_update], 
											[total_reads], 
											[user_updates], 
											[reads_per_write], 
											[index_usage_summary], 
											[total_singleton_lookup_count],
											[total_range_scan_count],
											[total_leaf_delete_count],
											[total_leaf_update_count],
											[index_op_stats],
											[partition_count], 
											[total_rows], 
											[total_reserved_MB], 
											[total_reserved_LOB_MB], 
											[total_reserved_row_overflow_MB], 
											[index_size_summary], 
											[total_row_lock_count], 
											[total_row_lock_wait_count], 
											[total_row_lock_wait_in_ms], 
											[avg_row_lock_wait_in_ms], 
											[total_page_lock_count], 
											[total_page_lock_wait_count], 
											[total_page_lock_wait_in_ms], 
											[avg_page_lock_wait_in_ms], 
											[total_index_lock_promotion_attempt_count], 
											[total_index_lock_promotion_count], 
											[data_compression_desc], 
						                    [page_latch_wait_count],
								            [page_latch_wait_in_ms],
								            [page_io_latch_wait_count],								
								            [page_io_latch_wait_in_ms],
											[create_date], 
											[modify_date], 
											[more_info],
											[display_order]
										)
									SELECT ''@@@RunID@@@'',
										''@@@GETDATE@@@'',
										''@@@LocalServerName@@@'',
										-- Below should be a copy/paste of the real query
										-- Make sure all quotes are escaped
										i.[database_name] AS [Database Name], 
										i.[schema_name] AS [Schema Name], 
										i.[object_name] AS [Object Name], 
										ISNULL(i.index_name, '''') AS [Index Name],
                                        CASE 
						                    WHEN i.is_primary_key = 1 AND i.index_definition <> ''[HEAP]''
							                    THEN N''-ALTER TABLE '' + QUOTENAME(i.[schema_name]) + N''.'' + QUOTENAME(i.[object_name]) +
							                         N'' DROP CONSTRAINT '' + QUOTENAME(i.index_name) + N'';''
						                    WHEN i.is_primary_key = 0 AND i.index_definition <> ''[HEAP]''
						                        THEN N''--DROP INDEX ''+ QUOTENAME(i.index_name) + N'' ON '' + 
							                         QUOTENAME(i.[schema_name]) + N''.'' + QUOTENAME(i.[object_name]) + N'';''
						                ELSE N''''
						                END AS [Drop TSQL],
					                    CASE 
						                    WHEN i.index_definition = ''[HEAP]'' THEN N''''
					                            ELSE N''--'' + ict.create_tsql END AS [Create TSQL],
										CAST(i.index_id AS NVARCHAR(10))AS [Index ID],
										db_schema_object_indexid AS [Details: schema.table.index(indexid)], 
										CASE    WHEN index_id IN ( 1, 0 ) THEN ''TABLE''
											ELSE ''NonClustered''
											END AS [Object Type], 
										LEFT(index_definition,4000) AS [Definition: [Property]] ColumnName {datatype maxbytes}],
										ISNULL(LTRIM(key_column_names_with_sort_order), '''') AS [Key Column Names With Sort],
										ISNULL(count_key_columns, 0) AS [Count Key Columns],
										ISNULL(include_column_names, '''') AS [Include Column Names], 
										ISNULL(count_included_columns,0) AS [Count Included Columns],
										ISNULL(secret_columns,'''') AS [Secret Column Names], 
										ISNULL(count_secret_columns,0) AS [Count Secret Columns],
										ISNULL(partition_key_column_name, '''') AS [Partition Key Column Name],
										ISNULL(filter_definition, '''') AS [Filter Definition], 
										is_indexed_view AS [Is Indexed View], 
										is_primary_key AS [Is Primary Key],
										is_XML AS [Is XML],
										is_spatial AS [Is Spatial],
										is_NC_columnstore AS [Is NC Columnstore],
										is_CX_columnstore AS [Is CX Columnstore],
										is_disabled AS [Is Disabled], 
										is_hypothetical AS [Is Hypothetical],
										is_padded AS [Is Padded], 
										fill_factor AS [Fill Factor], 
										is_referenced_by_foreign_key AS [Is Reference by Foreign Key], 
										last_user_seek AS [Last User Seek], 
										last_user_scan AS [Last User Scan], 
										last_user_lookup AS [Last User Lookup],
										last_user_update AS [Last User Update], 
										total_reads AS [Total Reads], 
										user_updates AS [User Updates], 
										reads_per_write AS [Reads Per Write], 
										index_usage_summary AS [Index Usage], 
										sz.total_singleton_lookup_count AS [Singleton Lookups],
										sz.total_range_scan_count AS [Range Scans],
										sz.total_leaf_delete_count AS [Leaf Deletes],
										sz.total_leaf_update_count AS [Leaf Updates],
										sz.index_op_stats AS [Index Op Stats],
										sz.partition_count AS [Partition Count],
										sz.total_rows AS [Rows], 
										sz.total_reserved_MB AS [Reserved MB], 
										sz.total_reserved_LOB_MB AS [Reserved LOB MB], 
										sz.total_reserved_row_overflow_MB AS [Reserved Row Overflow MB],
										sz.index_size_summary AS [Index Size], 
										sz.total_row_lock_count AS [Row Lock Count],
										sz.total_row_lock_wait_count AS [Row Lock Wait Count],
										sz.total_row_lock_wait_in_ms AS [Row Lock Wait ms],
										sz.avg_row_lock_wait_in_ms AS [Avg Row Lock Wait ms],
										sz.total_page_lock_count AS [Page Lock Count],
										sz.total_page_lock_wait_count AS [Page Lock Wait Count],
										sz.total_page_lock_wait_in_ms AS [Page Lock Wait ms],
										sz.avg_page_lock_wait_in_ms AS [Avg Page Lock Wait ms],
										sz.total_index_lock_promotion_attempt_count AS [Lock Escalation Attempts],
										sz.total_index_lock_promotion_count AS [Lock Escalations],
										sz.data_compression_desc AS [Data Compression],
						                sz.page_latch_wait_count,
								        sz.page_latch_wait_in_ms,
								        sz.page_io_latch_wait_count,								
								        sz.page_io_latch_wait_in_ms,
										i.create_date AS [Create Date],
										i.modify_date AS [Modify Date],
										more_info AS [More Info],
										1 AS [Display Order]
									FROM #IndexSanity AS i
									LEFT JOIN #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id
                                    LEFT JOIN #IndexCreateTsql AS ict  ON i.index_sanity_id = ict.index_sanity_id
									ORDER BY [Database Name], [Schema Name], [Object Name], [Index ID]
									OPTION (RECOMPILE);';
	
								SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputServerName@@@', @OutputServerName);
								SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputDatabaseName@@@', @OutputDatabaseName);
								SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputSchemaName@@@', @OutputSchemaName); 
								SET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputTableName@@@', @OutputTableName); 
								SET @StringToExecute = REPLACE(@StringToExecute, '@@@RunID@@@', @RunID);
								SET @StringToExecute = REPLACE(@StringToExecute, '@@@GETDATE@@@', GETDATE());
								SET @StringToExecute = REPLACE(@StringToExecute, '@@@LocalServerName@@@', CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128)));
								EXEC(@StringToExecute);
							END; /* @TableExists = 1 */
						ELSE
							RAISERROR('Creation of the output table failed.', 16, 0);
					END; /* @TableExists = 0 */
				ELSE
					RAISERROR (N'Invalid schema name, data could not be saved.', 16, 0);
			END; /* @ValidOutputLocation = 1 */
		ELSE
	
		IF(@OutputType <> 'NONE')
		BEGIN
			SELECT  i.[database_name] AS [Database Name], 
					i.[schema_name] AS [Schema Name], 
					i.[object_name] AS [Object Name], 
					ISNULL(i.index_name, '') AS [Index Name],
					CAST(i.index_id AS NVARCHAR(10))AS [Index ID],
					db_schema_object_indexid AS [Details: schema.table.index(indexid)], 
					CASE    WHEN index_id IN ( 1, 0 ) THEN 'TABLE'
						ELSE 'NonClustered'
						END AS [Object Type], 
					index_definition AS [Definition: [Property]] ColumnName {datatype maxbytes}],
					ISNULL(LTRIM(key_column_names_with_sort_order), '') AS [Key Column Names With Sort],
					ISNULL(count_key_columns, 0) AS [Count Key Columns],
					ISNULL(include_column_names, '') AS [Include Column Names], 
					ISNULL(count_included_columns,0) AS [Count Included Columns],
					ISNULL(secret_columns,'') AS [Secret Column Names], 
					ISNULL(count_secret_columns,0) AS [Count Secret Columns],
					ISNULL(partition_key_column_name, '') AS [Partition Key Column Name],
					ISNULL(filter_definition, '') AS [Filter Definition], 
					is_indexed_view AS [Is Indexed View], 
					is_primary_key AS [Is Primary Key],
					is_XML AS [Is XML],
					is_spatial AS [Is Spatial],
					is_NC_columnstore AS [Is NC Columnstore],
					is_CX_columnstore AS [Is CX Columnstore],
					is_disabled AS [Is Disabled], 
					is_hypothetical AS [Is Hypothetical],
					is_padded AS [Is Padded], 
					fill_factor AS [Fill Factor], 
					is_referenced_by_foreign_key AS [Is Reference by Foreign Key], 
					last_user_seek AS [Last User Seek], 
					last_user_scan AS [Last User Scan], 
					last_user_lookup AS [Last User Lookup],
					last_user_update AS [Last User Update], 
					total_reads AS [Total Reads], 
					user_updates AS [User Updates], 
					reads_per_write AS [Reads Per Write], 
					index_usage_summary AS [Index Usage], 
					sz.total_singleton_lookup_count AS [Singleton Lookups],
					sz.total_range_scan_count AS [Range Scans],
					sz.total_leaf_delete_count AS [Leaf Deletes],
					sz.total_leaf_update_count AS [Leaf Updates],
					sz.index_op_stats AS [Index Op Stats],
					sz.partition_count AS [Partition Count],
					sz.total_rows AS [Rows], 
					sz.total_reserved_MB AS [Reserved MB], 
					sz.total_reserved_LOB_MB AS [Reserved LOB MB], 
					sz.total_reserved_row_overflow_MB AS [Reserved Row Overflow MB],
					sz.index_size_summary AS [Index Size], 
					sz.total_row_lock_count AS [Row Lock Count],
					sz.total_row_lock_wait_count AS [Row Lock Wait Count],
					sz.total_row_lock_wait_in_ms AS [Row Lock Wait ms],
					sz.avg_row_lock_wait_in_ms AS [Avg Row Lock Wait ms],
					sz.total_page_lock_count AS [Page Lock Count],
					sz.total_page_lock_wait_count AS [Page Lock Wait Count],
					sz.total_page_lock_wait_in_ms AS [Page Lock Wait ms],
					sz.avg_page_lock_wait_in_ms AS [Avg Page Lock Wait ms],
					sz.total_index_lock_promotion_attempt_count AS [Lock Escalation Attempts],
					sz.total_index_lock_promotion_count AS [Lock Escalations],
					sz.page_latch_wait_count AS [Page Latch Wait Count],
					sz.page_latch_wait_in_ms AS [Page Latch Wait ms],
					sz.page_io_latch_wait_count AS [Page IO Latch Wait Count],								
					sz.page_io_latch_wait_in_ms as [Page IO Latch Wait ms],
					sz.data_compression_desc AS [Data Compression],
					i.create_date AS [Create Date],
					i.modify_date AS [Modify Date],
					more_info AS [More Info],
                    CASE 
						 WHEN i.is_primary_key = 1 AND i.index_definition <> '[HEAP]'
							THEN N'--ALTER TABLE ' + QUOTENAME(i.[schema_name]) + N'.' + QUOTENAME(i.[object_name])
							     + N' DROP CONSTRAINT ' + QUOTENAME(i.index_name) + N';'
						 WHEN i.is_primary_key = 0 AND i.index_definition <> '[HEAP]'
						     THEN N'--DROP INDEX '+ QUOTENAME(i.index_name) + N' ON ' + 
							     QUOTENAME(i.[schema_name]) + N'.' + QUOTENAME(i.[object_name]) + N';'
						 ELSE N''
						 END AS [Drop TSQL],
					CASE 
						WHEN i.index_definition = '[HEAP]' THEN N''
					    ELSE N'--' + ict.create_tsql END AS [Create TSQL], 
					1 AS [Display Order]
			FROM    #IndexSanity AS i --left join here so we don't lose disabled nc indexes
					LEFT JOIN #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id
                    LEFT JOIN #IndexCreateTsql AS ict ON i.index_sanity_id = ict.index_sanity_id
			ORDER BY [Database Name], [Schema Name], [Object Name], [Index ID]
			OPTION (RECOMPILE);
  		END;



    END; /* End @Mode=2 (index detail)*/
    ELSE IF (@Mode=3) /*Missing index Detail*/
    BEGIN
		IF(@OutputType <> 'NONE')
		BEGIN;
			WITH create_date AS (
						SELECT i.database_id,
							   i.schema_name,
							   i.[object_id], 
							   ISNULL(NULLIF(MAX(DATEDIFF(DAY, i.create_date, SYSDATETIME())), 0), 1) AS create_days
						FROM #IndexSanity AS i
						GROUP BY i.database_id, i.schema_name, i.object_id
						)
			SELECT 
				mi.database_name AS [Database Name], 
				mi.[schema_name] AS [Schema], 
				mi.table_name AS [Table], 
				CAST((mi.magic_benefit_number / CASE WHEN cd.create_days < @DaysUptime THEN cd.create_days ELSE @DaysUptime END) AS BIGINT)
					AS [Magic Benefit Number], 
				mi.missing_index_details AS [Missing Index Details], 
				mi.avg_total_user_cost AS [Avg Query Cost], 
				mi.avg_user_impact AS [Est Index Improvement], 
				mi.user_seeks AS [Seeks], 
				mi.user_scans AS [Scans],
				mi.unique_compiles AS [Compiles], 
				mi.equality_columns AS [Equality Columns], 
				mi.inequality_columns AS [Inequality Columns], 
				mi.included_columns AS [Included Columns], 
				mi.index_estimated_impact AS [Estimated Impact], 
				mi.create_tsql AS [Create TSQL], 
				mi.more_info AS [More Info],
				1 AS [Display Order],
				mi.is_low
			FROM #MissingIndexes AS mi
			LEFT JOIN create_date AS cd
			ON mi.[object_id] =  cd.object_id 
			AND mi.database_id = cd.database_id
			AND mi.schema_name = cd.schema_name
			/* Minimum benefit threshold = 100k/day of uptime OR since table creation date, whichever is lower*/
			WHERE (mi.magic_benefit_number / CASE WHEN cd.create_days < @DaysUptime THEN cd.create_days ELSE @DaysUptime END) >= 100000
			UNION ALL
			SELECT               
				@ScriptVersionName,   
				N'From Your Community Volunteers' ,   
				N'http://FirstResponderKit.org' ,
				100000000000,
				@DaysUptimeInsertValue,
				NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
				NULL, 0 AS [Display Order], NULL AS is_low
			ORDER BY [Display Order] ASC, [Magic Benefit Number] DESC
			OPTION (RECOMPILE);
	  	END;

	IF  (@BringThePain = 1
	AND @DatabaseName IS NOT NULL
	AND @GetAllDatabases = 0)

	BEGIN

		EXEC sp_BlitzCache @SortOrder = 'sp_BlitzIndex', @DatabaseName = @DatabaseName, @BringThePain = 1, @QueryFilter = 'statement', @HideSummary = 1;
	                              
	END;


    END; /* End @Mode=3 (index detail)*/
END;
END TRY

BEGIN CATCH
        RAISERROR (N'Failure analyzing temp tables.', 0,1) WITH NOWAIT;

        SELECT  @msg = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();

        RAISERROR (@msg, 
               @ErrorSeverity, 
               @ErrorState 
               );
        
        WHILE @@trancount > 0 
            ROLLBACK;

        RETURN;
    END CATCH;
GO
/****** Object:  StoredProcedure [dbo].[sp_fetchOneMtdAction]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[sp_fetchOneMtdAction]  
	@DeviceID int, 
	@ExcludeFlag int=0
AS
	SET NOCOUNT ON
	IF @ExcludeFlag = 0 
		BEGIN
			SELECT 
				* 
			FROM 
				MtdActions 
			WHERE	
				(DeviceID = @DeviceID)
				AND (
					(ActionInProgress = 'N') 
					OR
					((ActionInProgress = 'P') AND 
					(commandnumber = 14))
					)
		END
	ELSE
		BEGIN
			SELECT 
				* 
			FROM 
				MtdActions 
			WHERE	
				(DeviceID = @DeviceID)
				AND (ActionInProgress = 'N') 
				AND (commandnumber <> 14)
		END
GO
/****** Object:  StoredProcedure [dbo].[sp_GetEveryRuleInfo_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[sp_GetEveryRuleInfo_DEL]
     as
	SET NOCOUNT ON
	begin
		Select offenders.PtdID, Rules.Demographicid,
			RuleID,
			Longitude,
		     	Latitude,
			Distance,
		     	RuleType,
			StartDateTime,
			EndDateTime,
		     	InChargerRequired,
		     	PostMessage,
		     	CallSDC,
		     	Active,
		     	GracePeriod,
		     	HWRule,
		     	TimeGrid,
		     	ViolationMessage,
			MinBraceletRSSI,
			NotifyOnClear,
			RuleOptions
		From Rules, Offenders  
		Where Offenders.PtdID Between 16909060 and 16999999
		and Rules.Active in ( 'Y', 'P', 'D' ) 
		and Rules.Demographicid = Offenders.Demographicid
		and HWRule < 16777216
		Order By Rules.Demographicid, Rules.HWRule, Rules.RuleID
	end
return(0)

/*
     RuleID             As Long
        'DemographicID      As Long
        'RuleName           As AsciiZ * 50
        'Address            As AsciiZ * 50
        'City               As AsciiZ * 50
        'State              As AsciiZ * 4
        'Zip                As AsciiZ * 12
     Longitude          As Double
     Latitude           As Double
     Distance           As Double
     RuleType           As String * 1
        'DaysOfWeek         As AsciiZ * 8
     StartDateTime      As AsciiZ * 20
     EndDateTime        As AsciiZ * 20
        'Exceptions         As Double
     InChargerRequired  As String * 1
     PostMessage        As String * 1
     CallSDC            As String * 1
     Active             As String * 1
     GracePeriod        As Integer
     HWRule             As Long
     TimeGrid           As AsciiZ * 85      'Was 96 in UCommPPE - only 84 used
     ViolationMessage   As AsciiZ * 41
*/



GO
/****** Object:  StoredProcedure [dbo].[sp_GetOneRuleInfo_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[sp_GetOneRuleInfo_DEL]
	@DemoID int = -987654
     as	SET NOCOUNT ON
	begin
		Select   RuleID,
			Longitude,
		     	Latitude,
			Distance,
		     	RuleType,
			StartDateTime,
			EndDateTime,
		     	InChargerRequired,
		     	PostMessage,
		     	CallSDC,
		     	Active,
		     	GracePeriod,
		     	HWRule,
		     	TimeGrid,
		     	ViolationMessage,
			MinBraceletRSSI,
			NotifyOnClear,
			RuleOptions
		From Rules
		Where DemographicID = @DemoID
		and Rules.Active in ( 'Y', 'P', 'D' ) 
		and HWRule < 16777216
		Order By HWRule, RuleID
	end
return(0)




GO
/****** Object:  StoredProcedure [dbo].[sp_Insert_Special_MtdPositions_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[sp_Insert_Special_MtdPositions_DEL]
	@DemographicID int, @DeviceID int, @TimeStamp DateTime,
	@Longitude float, @Latitude float, @Speed smallint,
	@Heading smallint, @Elevation int, @PDOP real,
	@HDOP real, @VDOP real, @GPSMode tinyint,
	@SatellitesInView tinyint, @SVN binary(12), @SNR binary(12),  
	@Temperature smallint, @BatteryVoltage smallint,
	@PointStatus int, 
	@GeoRuleGraceMask int,
	@DeviceStatus int, 
	@RulesInViolation tinyint,
	@StoredTimeStamp DateTime,
	@MtdCallsRecID int,
	@RuleID_01 int = 0, @RuleStatus_01 smallint = 0, @HWRule_01 int = 0,
  	@RuleID_02 int = 0, @RuleStatus_02 smallint = 0, @HWRule_02 int = 0,
  	@RuleID_03 int = 0, @RuleStatus_03 smallint = 0, @HWRule_03 int = 0,
  	@RuleID_04 int = 0, @RuleStatus_04 smallint = 0, @HWRule_04 int = 0,	
  	@RuleID_05 int = 0, @RuleStatus_05 smallint = 0, @HWRule_05 int = 0,
  	@RuleID_06 int = 0, @RuleStatus_06 smallint = 0, @HWRule_06 int = 0,	
  	@RuleID_07 int = 0, @RuleStatus_07 smallint = 0, @HWRule_07 int = 0,
  	@RuleID_08 int = 0, @RuleStatus_08 smallint = 0, @HWRule_08 int = 0,	
  	@RuleID_09 int = 0, @RuleStatus_09 smallint = 0, @HWRule_09 int = 0,
  	@RuleID_10 int = 0, @RuleStatus_10 smallint = 0, @HWRule_10 int = 0,	
  	@RuleID_11 int = 0, @RuleStatus_11 smallint = 0, @HWRule_11 int = 0,
  	@RuleID_12 int = 0, @RuleStatus_12 smallint = 0, @HWRule_12 int = 0,	
  	@RuleID_13 int = 0, @RuleStatus_13 smallint = 0, @HWRule_13 int = 0,
  	@RuleID_14 int = 0, @RuleStatus_14 smallint = 0, @HWRule_14 int = 0,	
  	@RuleID_15 int = 0, @RuleStatus_15 smallint = 0, @HWRule_15 int = 0,
  	@RuleID_16 int = 0, @RuleStatus_16 smallint = 0, @HWRule_16 int = 0,	
  	@RuleID_17 int = 0, @RuleStatus_17 smallint = 0, @HWRule_17 int = 0,
  	@RuleID_18 int = 0, @RuleStatus_18 smallint = 0, @HWRule_18 int = 0,	
  	@RuleID_19 int = 0, @RuleStatus_19 smallint = 0, @HWRule_19 int = 0,
  	@RuleID_20 int = 0, @RuleStatus_20 smallint = 0, @HWRule_20 int = 0
	
AS
	Declare @RecID              	numeric(13,0)
	Declare @inAlarm            	int
	Declare @lastTimeStamp      	DateTime
  	Declare @rivCount	        int
  	Declare @riv                	int
  	Declare @rulestat           	smallint
  	Declare @HWRule             	int

--print @StoredTimeStamp
	SET NOCOUNT ON

	INSERT INTO MTD_Positions (DemographicID, DeviceID, TimeStamp, Longitude, Latitude,
                              Speed, Heading, Elevation, PDOP, HDOP, VDOP, GPSMode,
                              SatellitesInView, SVN, SNR, Temperature, BatteryVoltage,
                              PointStatus, GeoRuleGraceMask, RulesInViolation, StoredTimeStamp, 
			      MtdCallsRecID, DeviceStatus)
            	VALUES (@DemographicID, @DeviceID, @TimeStamp,
                              @Longitude, @Latitude, @Speed,
                              @Heading, @Elevation, @PDOP,
                              @HDOP, @VDOP, @GPSMode,
                              @SatellitesInView, @SVN,
                              @SNR,  @Temperature, @BatteryVoltage,
                              @PointStatus, @GeoRuleGraceMask, @RulesInViolation, @StoredTimeStamp, 
			      @MtdCallsRecID, @DeviceStatus)
      
--	SELECT @RecID = @@Identity



GO
/****** Object:  StoredProcedure [dbo].[sp_InsertNEWESTMtdPositions_10092002_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[sp_InsertNEWESTMtdPositions_10092002_DEL]
	@DemographicID int, @DeviceID int, @TimeStamp DateTime,
	@Longitude float, @Latitude float, @Speed smallint,
	@Heading smallint, @Elevation int, @PDOP real,
	@HDOP real, @VDOP real, @GPSMode tinyint,
	@SatellitesInView tinyint, @SVN binary(12), @SNR binary(12),  
	@Temperature smallint, @BatteryVoltage smallint,
	@PointStatus int, @GeoRuleGraceMask int, 
	@DeviceStatus int,
	@RulesInViolation tinyint,
	@StandardTimeOffset int, @DaylightTimeOffset int, @HardwareType tinyint,
	@MtdCallsRecID int,
	@RuleID_01 int = 0, @RuleStatus_01 smallint = 0, @HWRule_01 int = 0,
  	@RuleID_02 int = 0, @RuleStatus_02 smallint = 0, @HWRule_02 int = 0,
  	@RuleID_03 int = 0, @RuleStatus_03 smallint = 0, @HWRule_03 int = 0,
  	@RuleID_04 int = 0, @RuleStatus_04 smallint = 0, @HWRule_04 int = 0,	
  	@RuleID_05 int = 0, @RuleStatus_05 smallint = 0, @HWRule_05 int = 0,
  	@RuleID_06 int = 0, @RuleStatus_06 smallint = 0, @HWRule_06 int = 0,	
  	@RuleID_07 int = 0, @RuleStatus_07 smallint = 0, @HWRule_07 int = 0,
  	@RuleID_08 int = 0, @RuleStatus_08 smallint = 0, @HWRule_08 int = 0,	
  	@RuleID_09 int = 0, @RuleStatus_09 smallint = 0, @HWRule_09 int = 0,
  	@RuleID_10 int = 0, @RuleStatus_10 smallint = 0, @HWRule_10 int = 0,	
  	@RuleID_11 int = 0, @RuleStatus_11 smallint = 0, @HWRule_11 int = 0,
  	@RuleID_12 int = 0, @RuleStatus_12 smallint = 0, @HWRule_12 int = 0,	
  	@RuleID_13 int = 0, @RuleStatus_13 smallint = 0, @HWRule_13 int = 0,
  	@RuleID_14 int = 0, @RuleStatus_14 smallint = 0, @HWRule_14 int = 0,	
  	@RuleID_15 int = 0, @RuleStatus_15 smallint = 0, @HWRule_15 int = 0,
  	@RuleID_16 int = 0, @RuleStatus_16 smallint = 0, @HWRule_16 int = 0,	
  	@RuleID_17 int = 0, @RuleStatus_17 smallint = 0, @HWRule_17 int = 0,
  	@RuleID_18 int = 0, @RuleStatus_18 smallint = 0, @HWRule_18 int = 0,	
  	@RuleID_19 int = 0, @RuleStatus_19 smallint = 0, @HWRule_19 int = 0,
  	@RuleID_20 int = 0, @RuleStatus_20 smallint = 0, @HWRule_20 int = 0
	
AS
	Declare @RecID              	numeric(13,0)
	Declare @inAlarm            	int
	Declare @lastTimeStamp      	DateTime
  	Declare @rivCount	        int
  	Declare @riv                	int
  	Declare @rulestat           	smallint
  	Declare @HWRule             	int
	
	SET NOCOUNT ON

	INSERT INTO MTD_Positions WITH  (ROWLOCK) (DemographicID, DeviceID, TimeStamp, Longitude, Latitude,
                              Speed, Heading, Elevation, PDOP, HDOP, VDOP, GPSMode,
                              SatellitesInView, SVN, SNR, Temperature, BatteryVoltage,
                              PointStatus, GeoRuleGraceMask, RulesInViolation, MtdCallsRecID,
			      DeviceStatus)
            	VALUES (@DemographicID, @DeviceID, @TimeStamp,
                              @Longitude, @Latitude, @Speed,
                              @Heading, @Elevation, @PDOP,
                              @HDOP, @VDOP, @GPSMode,
                              @SatellitesInView, @SVN,
                              @SNR,  @Temperature, @BatteryVoltage,
                              @PointStatus, @GeoRuleGraceMask, @RulesInViolation, @MtdCallsRecID, @DeviceStatus)
      
	SELECT @RecID = @@Identity
    		--print "PositionRecID:" + convert( char(13), @RecID )


	/* Now insert into LastPositions - assuming a somewhat valid timestamp - dss */
--	SELECT @lastTimeStamp = timestamp
--	FROM MTD_LastPositions 
--	WHERE DeviceID = @DeviceID

	/* Try to make sure that this is a valid point with a valid timestamp */
/*
	IF ( @lastTimeStamp is NULL) or ( @TimeStamp < DateAdd(hour, 24, GetDate()) and @Timestamp > @lastTimeStamp )
	BEGIN
      	     	Update MTD_LastPositions Set PositionRecID = @RecID, DemographicID = @DemographicID,
                                  TimeStamp = @TimeStamp, Longitude = @Longitude,
                                  Latitude = @Latitude, Speed = @Speed, Heading = @Heading,
                                  Elevation = @Elevation, PDOP = @PDOP, HDOP = @HDOP,
      VDOP = @VDOP, GPSMode = @GPSMode,SatellitesInView = @SatellitesInView,
                                  SVN = @SVN, SNR = @SNR, Temperature = @Temperature,
                                  BatteryVoltage = @BatteryVoltage,PointStatus = @PointStatus,
                                  GeoRuleGraceMask = @GeoRuleGraceMask, 
	 	       RulesInViolation = @RulesInViolation, StoredTimeStamp = GetDate()
                      	WHERE DeviceID = @DeviceID

		IF ( @@RowCount = 0 )
		BEGIN
		          --Print "Error Updating LastPositions! - Inserting Point!!!"
			INSERT INTO MTD_LastPositions (PositionRecID, DemographicID, DeviceID, TimeStamp, Longitude,  Latitude,
                              		Speed, Heading, Elevation, PDOP, HDOP, VDOP, GPSMode,
	                              	SatellitesInView, SVN, SNR, Temperature, BatteryVoltage,
				PointStatus, GeoRuleGraceMask, RulesInViolation)
                      		VALUES (@RecID, @DemographicID, @DeviceID, @TimeStamp,
                              		@Longitude, @Latitude, @Speed,
                              		@Heading, @Elevation, @PDOP,
                              		@HDOP, @VDOP, @GPSMode,
                              		@SatellitesInView, @SVN,
                              		@SNR, @Temperature, @BatteryVoltage,
                              		@PointStatus, @GeoRuleGraceMask, @RulesInViolation)
      		END
	END
*/

	/******************************************************************
	  If we have RulesInAlarm, insert a point into MTD_Alarms.  Then,
	  for each RuleInAlarm, insert a row into the RulesInAlarm table
	*******************************************************************/  
  
	IF ( @RulesInViolation > 0 )
	BEGIN
      		SET @rivCount         = 1
      
      		WHILE ( 1=1 )
      		BEGIN
	              	IF( @rivCount = 1 )
             		 	BEGIN
             		     		SET @riv = @RuleID_01
             		     		SET @rulestat = @RuleStatus_01
             		     		SET @HWRule = @HWRule_01
              		END
              
              		ELSE
              		IF( @rivCount = 2 )
	              	BEGIN
             		     		SET @riv = @RuleID_02
                  			SET @rulestat = @RuleStatus_02
                  			SET @HWRule = @HWRule_02
	              	END
              
             		 	ELSE
              		IF( @rivCount = 3 )
	              	BEGIN
             		     		SET @riv = @RuleID_03
                  			SET @rulestat = @RuleStatus_03
                  			SET @HWRule = @HWRule_03
              		END
              
              		ELSE
              		IF( @rivCount = 4 )
	              	BEGIN
             		     		SET @riv = @RuleID_04
                  			SET @rulestat = @RuleStatus_04
                  			SET @HWRule = @HWRule_04
	              	END
              
             		 	ELSE
              		IF( @rivCount = 5 )
	              	BEGIN
             		     		SET @riv = @RuleID_05
                  			SET @rulestat = @RuleStatus_05
                  			SET @HWRule = @HWRule_05
	              	END
              
             		 	ELSE
              		IF( @rivCount = 6 )
	              	BEGIN
             		     		SET @riv = @RuleID_06
                  			SET @rulestat = @RuleStatus_06
                  			SET @HWRule = @HWRule_06
	              	END
              
             		 	ELSE
              		IF( @rivCount = 7 )
	              	BEGIN
             		     		SET @riv = @RuleID_07
                  			SET @rulestat = @RuleStatus_07
                  			SET @HWRule = @HWRule_07
	              	END
              
             		 	ELSE
              		IF( @rivCount = 8 )
	              	BEGIN
             		     		SET @riv = @RuleID_08
                  			SET @rulestat = @RuleStatus_08
                  			SET @HWRule = @HWRule_08
	              	END
              
             		 	ELSE
              		IF( @rivCount = 9 )
	              	BEGIN
         		     		SET @riv = @RuleID_09
       			SET @rulestat = @RuleStatus_09
                  			SET @HWRule = @HWRule_09
	              	END
              
             		 	ELSE
              		IF( @rivCount = 10 )
	              	BEGIN
             		     		SET @riv = @RuleID_10
                  			SET @rulestat = @RuleStatus_10
                  			SET @HWRule = @HWRule_10
	              	END
              
             		 	ELSE
              		IF( @rivCount = 11 )
	              	BEGIN
             		     		SET @riv = @RuleID_11
                  			SET @rulestat = @RuleStatus_11
                  			SET @HWRule = @HWRule_11
	              	END

	              	ELSE
             		 	IF( @rivCount = 12 )
              		BEGIN
		             		SET @riv = @RuleID_12
                  			SET @rulestat = @RuleStatus_12
                  			SET @HWRule = @HWRule_12
	              	END

	              	ELSE
             		 	IF( @rivCount = 13 )
              		BEGIN
                  			SET @riv = @RuleID_13
	                  		SET @rulestat = @RuleStatus_13
             		     		SET @HWRule = @HWRule_13
              		END

	              	ELSE
             		 	IF( @rivCount = 14 )
              		BEGIN
                  			SET @riv = @RuleID_14
	                  		SET @rulestat = @RuleStatus_14
             		     		SET @HWRule = @HWRule_14
              		END

	              	ELSE
             		 	IF( @rivCount = 15 )
             		 	BEGIN
             		     		SET @riv = @RuleID_15
                  			SET @rulestat = @RuleStatus_15
                  			SET @HWRule = @HWRule_15
	              	END

	              	ELSE
             		 	IF( @rivCount = 16 )
              		BEGIN
                  			SET @riv = @RuleID_16
	                  		SET @rulestat = @RuleStatus_16
             		     		SET @HWRule = @HWRule_16
              		END

	              	ELSE
             		 	IF( @rivCount = 17 )
              		BEGIN
                  			SET @riv = @RuleID_17
	                  		SET @rulestat = @RuleStatus_17
             		     		SET @HWRule = @HWRule_17
              		END

	              	ELSE
             		 	IF( @rivCount = 18 )
	             		 BEGIN
                  			SET @riv = @RuleID_18
	                  		SET @rulestat = @RuleStatus_18
             		     		SET @HWRule = @HWRule_18
              		END

	              	ELSE
             		 	IF( @rivCount = 19 )
              		BEGIN
                  			SET @riv = @RuleID_19
	                  		SET @rulestat = @RuleStatus_19
             		     		SET @HWRule = @HWRule_19
              		END

	              	ELSE
             		 	IF( @rivCount = 20 )
              		BEGIN
                  			SET @riv = @RuleID_20
	                  		SET @rulestat = @RuleStatus_20
             		     		SET @HWRule = @HWRule_20
              		END

	              	IF ( ( @rulestat & 1 ) = 1 )
             		 	BEGIN
				/*  Need Report Position Inseted  */
                			INSERT INTO Reporting..Report_MTDPositions WITH  (ROWLOCK) ( 
						DemographicID, 
						TimeStamp, 
						RuleStatus, 
						RuleID,
						StandardTimeOffset, 
						DaylightTimeOffset, 
						HardwareType,
						MtdCallsRecID )
                                      		VALUES ( @DemographicID, 
						@TimeStamp, 
                                              			@rulestat, 
						@riv, 
                                              			@StandardTimeOffset, 
                                              			@DaylightTimeOffset,
                                              			@HardwareType,
						@MtdCallsRecID )

	              	END

			IF ( ( @rulestat & 2 ) = 2 )
	      		BEGIN	
				/*  Insert Alarm Record  */      
				INSERT INTO MTD_Alarms WITH  (ROWLOCK) (DemographicID, DeviceID,  TimeStamp,  PointStatus,  RuleID, HWRule, RuleStatus, MtdCallsRecID )
              			VALUES (@DemographicID, @DeviceID, @TimeStamp, @PointStatus, @riv, @HWRule, @rulestat, @MtdCallsRecID )
	      		END
	
             	 		IF ( ( @rulestat & 4 ) = 4 )
              		BEGIN
	                 		/*  Need RuleInAlarm  Inserted  */
				INSERT INTO RulesInAlarm WITH  (ROWLOCK) ( PositionRecID, RuleID, InGrace, HWRule, RuleStatus )
             		 		VALUES ( @RecID, @riv, 0, @HWRule, @rulestat )
             		 	END
    	
                 
	    		SET @rivCount = @rivCount + 1
	
			IF ( @rivCount > @RulesInViolation )
			BEGIN
				BREAK
			END
      		END
	END





GO
/****** Object:  StoredProcedure [dbo].[sp_MTD_Positions_GetLastCHGPosition_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[sp_MTD_Positions_GetLastCHGPosition_DEL] (@DemographicId as int, @Archive as char(1) = 'N')
AS
	SET NOCOUNT ON
	DECLARE @iLastPositionRecID int

--if @Archive = 'N'
-- BEGIN
	-- First, get the last CHG Position record's rec id
	SELECT @iLastPositionRecID = ( SELECT TOP 1 PositionRecID FROM MTD_Positions WITH(NOLOCK, INDEX (PositionQryIDX)) WHERE DemographicID = @DemographicId AND (DeviceID & -16777216) = 50331648 ORDER BY TimeStamp DESC )

	-- Next, get the Position/RulesInAlarm data using the LastPositionRecID
	SELECT P.PositionRecID , P.DemographicID, P.DeviceID, P.TimeStamp, P.Longitude, P.Latitude,
		P.Speed, P.Heading, PointStatus=-1, DeviceStatus=P.PointStatus, RuleID=-1, P.PDOP, P.GPSMode, P.SatellitesInView, P.RulesInViolation, 
		AlarmRuleID=R.RuleID, R.RuleStatus, R.HWRule, C.ANIPhoneNumber, C.StartTime
	FROM MTD_Positions AS P (NOLOCK)
	LEFT OUTER JOIN RulesInAlarm AS R ON R.PositionRecID = P.PositionRecID, MTDCalls AS C (NOLOCK)
	WHERE P.PositionRecID = @iLastPositionRecID
	AND C.CallRecID = P.MTDCallsRecID 
-- END
--ELSE
 --BEGIN
--	-- First, get the last CHG Position record's rec id
--	SELECT @iLastPositionRecID = ( SELECT TOP 1 PositionRecID FROM dbarchives.MTDArchive.dbo.MTD_Positions WITH(NOLOCK, INDEX (PositionQryIDX)) WHERE DemographicID = @DemographicId AND (DeviceID & -16777216) = 50331648 ORDER BY TimeStamp DESC )--	-- Next, get the Position/RulesInAlarm data using the LastPositionRecID
--	SELECT P.PositionRecID , P.DemographicID, P.DeviceID, P.TimeStamp, P.Longitude, P.Latitude,
--		P.Speed, P.Heading, PointStatus=-1, DeviceStatus=P.PointStatus, RuleID=-1, P.PDOP, P.GPSMode, P.SatellitesInView, P.RulesInViolation, 
--		AlarmRuleID=R.RuleID, R.RuleStatus, R.HWRule, C.ANIPhoneNumber, C.StartTime
--	FROM dbarchives.MTDArchive.dbo.MTD_Positions AS P (NOLOCK)
--	LEFT OUTER JOIN RulesInAlarm AS R ON R.PositionRecID = P.PositionRecID, dbarchives.MTDArchive.dbo.MTDCalls AS C (NOLOCK)
--	WHERE P.PositionRecID = @iLastPositionRecID
--	AND C.CallRecID = P.MTDCallsRecID 
 --END

GO
/****** Object:  StoredProcedure [dbo].[sp_MTD_Positions_GetLastMtdPosition_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[sp_MTD_Positions_GetLastMtdPosition_DEL] (@DemographicId as int, @Archive as char(1)='N')
AS
SET NOCOUNT ON
DECLARE @iLastPositionRecID int

--if @Archive = 'N' --Get the MTD_01...MTD_Positions Data
-- BEGIN
	-- First, get the last MTD Position record's rec id
	SELECT @iLastPositionRecID = ( SELECT TOP 1 PositionRecID FROM MTD_Positions WITH(NOLOCK, INDEX (PositionQryIDX)) WHERE DemographicID = @DemographicId AND (DeviceID & -16777216) = 33554432 ORDER BY TimeStamp DESC )

	-- Next, get the Position/RulesInAlarm data using the LastPositionRecID
	SELECT P.PositionRecID , P.DemographicID, P.DeviceID, P.TimeStamp, P.Longitude, P.Latitude, P.Speed, P.Heading, PointStatus=-1, DeviceStatus=P.PointStatus, RuleID=-1, P.PDOP, P.GPSMode, P.SatellitesInView,  P.RulesInViolation, 
		AlarmRuleID=R.RuleID, R.RuleStatus, R.HWRule, ANIPhoneNumber=NULL, StartTime=NULL
	FROM MTD_Positions AS P (NOLOCK)
	LEFT OUTER JOIN RulesInAlarm AS R ON R.PositionRecID = P.PositionRecID
	WHERE P.PositionRecID = @iLastPositionRecID
-- END
--ELSE -- Get the MTDArchive.dbo.MTD_Positions Data
-- BEGIN
--	-- First, get the last MTD Position record's rec id
--	SELECT @iLastPositionRecID = ( SELECT TOP 1 PositionRecID FROM dbarchives.MTDArchive.dbo.MTD_Positions WITH(NOLOCK, INDEX (PositionQryIDX)) WHERE DemographicID = @DemographicId AND (DeviceID & -16777216) = 33554432 ORDER BY TimeStamp DESC )
	
	-- Next, get the Position/RulesInAlarm data using the LastPositionRecID
--	SELECT P.PositionRecID , P.DemographicID, P.DeviceID, P.TimeStamp, P.Longitude, P.Latitude, P.Speed, P.Heading, PointStatus=-1, DeviceStatus=P.PointStatus, RuleID=-1, P.PDOP, P.GPSMode, P.SatellitesInView,  P.RulesInViolation, -
--		AlarmRuleID=R.RuleID, R.RuleStatus, R.HWRule, ANIPhoneNumber=NULL, StartTime=NULL
--	FROM dbarchives.MTDArchive.dbo.MTD_Positions AS P (NOLOCK)
--	LEFT OUTER JOIN RulesInAlarm AS R ON R.PositionRecID = P.PositionRecID
--	WHERE P.PositionRecID = @iLastPositionRecID
-- END


GO
/****** Object:  StoredProcedure [dbo].[sp_TableSizeGrowth]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_TableSizeGrowth] 
AS
BEGIN
 SET NOCOUNT ON
 
 --DECLARE VARIABLES
 DECLARE
 @max INT,
 @min INT,
 @table_name NVARCHAR(256),
 @table_schema NVARCHAR(256),
 @sql NVARCHAR(4000)
 
 --DECLARE TABLE VARIABLE
 DECLARE @table TABLE(
 id INT IDENTITY(1,1) PRIMARY KEY,
 table_name NVARCHAR(256),
 table_schema NVARCHAR(256))
 
 --CREATE TEMP TABLE THAT STORES INFORMATION FROM SP_SPACEUSED
 IF (SELECT OBJECT_ID('tempdb..#results')) IS NOT NULL
 BEGIN
  DROP TABLE #results
 END
 
 CREATE TABLE #results
 (
  [table_schema] [nvarchar](256) NULL,
  [table_name] [nvarchar](256) NULL,
  [table_rows] [nvarchar](55) NULL,
  [reserved_space] [nvarchar](55) NULL,
  [data_space] [nvarchar](55) NULL,
  [index_space] [nvarchar](55) NULL,
  [unused_space] [nvarchar](55) NULL
 )
 
 --LOOP THROUGH STATISTICS FOR EACH TABLE
 INSERT @table(table_schema, table_name)
 SELECT  
  table_schema, table_name
 FROM
  information_schema.tables 
 WHERE table_schema + '.' + table_name IN ('dbo.MTD_Alarms','dbo.MTD_Positions', 'dbo.OffenderPositionsReviewed', 'dbo.RulesInAlarm') --INSERT TABLE NAMES TO MONITOR
 
 SELECT
  @min = 1,
  @max = (SELECT MAX(id) FROM @table)
 
 WHILE @min < @max + 1
 BEGIN
  SELECT 
   @table_name = table_name,
   @table_schema = table_schema
  FROM
   @table
  WHERE
   id = @min
   
  --DYNAMIC SQL
  SELECT @sql = 'EXEC sp_spaceused ''[' + @table_schema + '].[' + @table_name + ']'''
  
  --INSERT RESULTS FROM SP_SPACEUSED TO TEMP TABLE
  INSERT #results(table_name, table_rows, reserved_space, data_space, index_space, unused_space)
  EXEC (@sql)
  
  --UPDATE SCHEMA NAME
  UPDATE #results
  SET table_schema = @table_schema
  WHERE table_name = @table_name
  SELECT @min = @min + 1
 END
 
 --REMOVE "KB" FROM RESULTS FOR REPORTING (GRAPH) PURPOSES
 UPDATE #results SET data_space = SUBSTRING(data_space, 1, (LEN(data_space)-3))
 UPDATE #results SET reserved_space = SUBSTRING(reserved_space, 1, (LEN(reserved_space)-3))
 UPDATE #results SET index_space = SUBSTRING(index_space, 1, (LEN(index_space)-3))
 UPDATE #results SET unused_space = SUBSTRING(unused_space, 1, (LEN(unused_space)-3))
 
 --INSERT RESULTS INTO TABLESIZEGROWTH
 INSERT INTO [Utilities].[dbo].[TableSizeGrowth] (table_schema, table_name, table_rows, reserved_space, data_space, index_space, unused_space)
 SELECT * FROM #results
 
 DROP TABLE #results
END
GO
/****** Object:  StoredProcedure [dbo].[sync_MTD_Alarms_BlockCopy]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[sync_MTD_Alarms_BlockCopy]
AS
	DECLARE @StartID bigint, 
			@LastID bigint, 
			@EndID bigint,
			@MaxID bigint

	SELECT @MaxID = (SELECT MAX(AlarmRecID) FROM [MTD_01].[dbo].[MTD_Alarms]  WITH (NOLOCK))
	SELECT @StartID = (SELECT ISNULL(max(AlarmRecID),@MaxID) + 1 FROM [MTD_Alarms] WITH (NOLOCK))
	SELECT @LastID = (SELECT MAX(S.AlarmRecID) FROM [PD].[MTD_01].[dbo].[MTD_Alarms] S WITH (NOLOCK))

	UPDATE [PD].[SyncDB].dbo.MTD_Alarms_ChangedRows_MaxMonitorKey 
		SET [BlockCopyOn] = 1

	WHILE @StartID <= @LastID
		BEGIN
			SET @EndID = @StartID + 100000

			UPDATE [PD].[SyncDB].dbo.MTD_Alarms_ChangedRows_MaxMonitorKey 
				SET [AlarmRecId] = @EndID

			SET IDENTITY_INSERT dbo.[MTD_Alarms] ON
			--DECLARE @SQL varchar(max) = '
			INSERT INTO dbo.MTD_Alarms 
			( 	[AlarmRecID]
				,[DemographicID]
			    ,[TimeStamp]
			    ,[PointStatus]
			    ,[RuleID]
			    ,[Processed]
			    ,[DeviceID]
			    ,[StoredTimeStamp]
			    ,[HWRule]
			    ,[RuleStatus]
			    ,[MTDCallsRecID]
			    ,[OneTimeSchedId]
			    ,[DeviceStatus]
	 		    ,[ActionStatus]
			    ,[SuspendTimestamp]
			    ,[ZoneRecID]
			    ,[AlcoholTestID]
			    ,[HwRuleBitIndex]
			    ,[AlcoholPictureMatchHistoryID]
			    ,[DeviceStatus2]
			    ,[RenotificationTimestamp]
			    ,[RenotificationCount]
			    ,[AlarmType]
			    ,[EventRecID])

			SELECT 	
                S.[AlarmRecID]
				,S.[DemographicID]
			    ,S.[TimeStamp]
			    ,S.[PointStatus]
			    ,S.[RuleID]
			    ,S.[Processed]
			    ,S.[DeviceID]
			    ,S.[StoredTimeStamp]
			    ,S.[HWRule]
			    ,S.[RuleStatus]
			    ,S.[MTDCallsRecID]
			    ,S.[OneTimeSchedId]
			    ,S.[DeviceStatus]
	 		    ,S.[ActionStatus]
			    ,S.[SuspendTimestamp]
			    ,S.[ZoneRecID]
			    ,S.[AlcoholTestID]
			    ,S.[HwRuleBitIndex]
			    ,S.[AlcoholPictureMatchHistoryID]
			    ,S.[DeviceStatus2]
			    ,S.[RenotificationTimestamp]
			    ,S.[RenotificationCount]
			    ,S.[AlarmType]
			    ,S.[EventRecID]			
			FROM        
				[PD].[MTD_01].[dbo].[MTD_Alarms] S WITH (NOLOCK)
			WHERE 
				S.[AlarmRecID] BETWEEN @StartID AND @EndID
				--' + CONVERT(VARCHAR(20),@StartID) + ' AND ' + CONVERT(VARCHAR(20),@EndId) + '
			ORDER BY 
				S.AlarmRecID --'
			--EXEC (@SQL)

			SET IDENTITY_INSERT dbo.[MTD_Alarms] OFF

			UPDATE [PD].[SyncDB].dbo.MTD_Alarms_ChangedRows 
				SET [CanProcess] = 1
			WHERE
				[AlarmRecID] <= @EndID AND
				[CanProcess] = 0
			
			PRINT 'Records ' + CONVERT(VARCHAR(20),@StartID) + ' thru ' + CONVERT(VARCHAR(20),@EndId) + ' have been imported. Last record ID is ' + CONVERT(VARCHAR(20),@LastID)
			
			SET @StartID = @EndID + 1
		END
SELECT @MaxID = (SELECT MAX(AlarmRecID) FROM [MTD_01].[dbo].[MTD_Alarms]  WITH (NOLOCK))
UPDATE [PD].[SyncDB].dbo.MTD_Alarms_ChangedRows 
SET [CanProcess] = 1
			WHERE
				[AlarmRecID] <= @MaxID AND
				[CanProcess] = 0
GO
/****** Object:  StoredProcedure [dbo].[sync_MTD_EMailMessages_BlockCopy]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[sync_MTD_EMailMessages_BlockCopy]
AS
	DECLARE @StartID INT, 
		@LastID INT, 
		@EndID INT,
		@MaxID INT
--48463283726

SELECT @MaxID = (SELECT MAX(EmailRecID) FROM [MTD_01].[dbo].[MTD_EMailMessages]   WITH (NOLOCK))
SELECT @StartID = (SELECT ISNULL(max(EmailRecID),@MaxID) + 1 FROM [MTD_EMailMessages] WITH (NOLOCK))

SELECT @LastID = (SELECT MAX(S.EmailRecID) FROM [PD].[MTD_01].[dbo].[MTD_EMailMessages]  S WITH (NOLOCK))


UPDATE [PD].[SyncDB].dbo.MTD_EMailMessages_ChangedRows_MaxMonitorKey 
		SET [BlockCopyOn] = 1

	WHILE @StartID <= @LastID
		BEGIN
			SET @EndID = @StartID + 100000

			UPDATE [PD].[SyncDB].dbo.MTD_EMailMessages_ChangedRows_MaxMonitorKey 
				SET [EmailRecID] = @EndID

SET IDENTITY_INSERT [dbo].[MTD_EMailMessages] ON

--DECLARE @SQL varchar(max) = '
INSERT INTO dbo.MTD_EMailMessages 
	 ( [EmailRecID]
      ,[Status]
      ,[OffenderDemoID]
      ,[ContactDemoID]
      ,[RuleID]
      ,[TimeOfViolation]
      ,[DateCreated]
      ,[DateSent]
      ,[ContactName]
      ,[ContactPhone]
      ,[ContactAgencyName]
      ,[ContactEmailAddress]
      ,[OffenderName]
      ,[OffenderPhone]
      ,[OffenderAddress]
      ,[OffenderCity]
      ,[OffenderState]
      ,[OffenderZip]
      ,[RuleName]
      ,[RuleAddress]
      ,[RuleCity]
      ,[RuleState]
      ,[RuleZip]
      ,[ModifiedStatus]
      ,[SendAttempts]
      ,[AssignedPO]
      ,[RuleStatus]
      ,[ReplyKey]
      ,[MessageId]
      ,[ID1Label]
      ,[ID1Data]
      ,[ID2Label]
      ,[ID2Data]
      ,[AssignedPoPhone]
      ,[AssignedPoFax]
      ,[AssignedPoEMail]
      ,[AcknowledgeID]
      ,[AcknowledgeTime]
      ,[AcknowledgeAttempts]
      ,[ContactType]
      ,[AcknowledgeStatus]
      ,[AlarmRecId]
      ,[FirstSendAttemptTimestamp]
      ,[ActionType]
      ,[NotificationOptions]
      ,[EscalationUtcTimestamp]
      ,[DevicePhoneNumber]
      ,[ZoneRecID]
      ,[ZoneName]
      ,[AlcoholTestID]
      ,[PictureMatchHistoryID]
      ,[DetailLinkURL]
      ,[OffenderCell]
      ,[DevicePhoneNumber2])

SELECT 		       S.[EmailRecID]
      ,S.[Status]
      ,S.[OffenderDemoID]
      ,S.[ContactDemoID]
      ,S.[RuleID]
      ,S.[TimeOfViolation]
      ,S.[DateCreated]
      ,S.[DateSent]
      ,S.[ContactName]
      ,S.[ContactPhone]
      ,S.[ContactAgencyName]
      ,S.[ContactEmailAddress]
      ,S.[OffenderName]
      ,S.[OffenderPhone]
      ,S.[OffenderAddress]
      ,S.[OffenderCity]
      ,S.[OffenderState]
      ,S.[OffenderZip]
      ,S.[RuleName]
      ,S.[RuleAddress]
      ,S.[RuleCity]
      ,S.[RuleState]
      ,S.[RuleZip]
      ,S.[ModifiedStatus]
      ,S.[SendAttempts]
      ,S.[AssignedPO]
      ,S.[RuleStatus]
      ,S.[ReplyKey]
      ,S.[MessageId]
      ,S.[ID1Label]
      ,S.[ID1Data]
      ,S.[ID2Label]
      ,S.[ID2Data]
      ,S.[AssignedPoPhone]
      ,S.[AssignedPoFax]
      ,S.[AssignedPoEMail]
      ,S.[AcknowledgeID]
      ,S.[AcknowledgeTime]
      ,S.[AcknowledgeAttempts]
      ,S.[ContactType]
      ,S.[AcknowledgeStatus]
      ,S.[AlarmRecId]
      ,S.[FirstSendAttemptTimestamp]
      ,S.[ActionType]
      ,S.[NotificationOptions]
      ,S.[EscalationUtcTimestamp]
      ,S.[DevicePhoneNumber]
      ,S.[ZoneRecID]
      ,S.[ZoneName]
      ,S.[AlcoholTestID]
      ,S.[PictureMatchHistoryID]
      ,S.[DetailLinkURL]
      ,S.[OffenderCell]
      ,S.[DevicePhoneNumber2] 
FROM        [PD].[MTD_01].[dbo].MTD_EMailMessages S WITH (NOLOCK)
WHERE S.[EmailRecID] BETWEEN @StartID AND @EndID
--' + CONVERT(VARCHAR(20),@StartID) + ' AND ' + CONVERT(VARCHAR(20),@EndId) + '
ORDER BY S.EmailRecID --'

--EXEC (@SQL)

SET IDENTITY_INSERT MTD_EMailMessages  OFF

UPDATE [PD].[SyncDB].dbo.MTD_EMailMessages_ChangedRows 
				SET [CanProcess] = 1
			WHERE
				EmailRecID <= @EndID AND
				[CanProcess] = 0

PRINT 'Records ' + CONVERT(VARCHAR(20),@StartID) + ' thru ' + CONVERT(VARCHAR(20),@EndId) + ' have been imported. Last record ID is ' + CONVERT(VARCHAR(20),@LastID)
  
  SET @StartID = @EndID + 1



END

SELECT @MaxID = (SELECT MAX(EmailRecID) FROM [MTD_01].[dbo].[MTD_EMailMessages]  WITH (NOLOCK))
UPDATE [PD].[SyncDB].dbo.MTD_EmailMessages_ChangedRows 
SET [CanProcess] = 1
			WHERE
				[EmailRecID] <= @MaxID AND
				[CanProcess] = 0
GO
/****** Object:  StoredProcedure [dbo].[sync_MTD_Messages_BlockCopy]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[sync_MTD_Messages_BlockCopy]
AS
	DECLARE @StartID int, 
			@LastID int, 
			@EndID int,
			@MaxID int

	SELECT @MaxID = (SELECT MAX(MessageRecID) FROM [MTD_01].[dbo].[MTD_Messages]  WITH (NOLOCK))
	SELECT @StartID = (SELECT ISNULL(max(MessageRecID),@MaxID) + 1 FROM [MTD_Messages] WITH (NOLOCK))
	SELECT @LastID = (SELECT MAX(S.MessageRecID) FROM [PD].[MTD_01].[dbo].[MTD_Messages] S WITH (NOLOCK))

	UPDATE [PD].[SyncDB].dbo.MTD_Messages_ChangedRows_MaxMonitorKey 
		SET [BlockCopyOn] = 1

	WHILE @StartID <= @LastID
		BEGIN
			SET @EndID = @StartID + 100000

			UPDATE [PD].[SyncDB].dbo.MTD_Messages_ChangedRows_MaxMonitorKey 
				SET [MessageRecId] = @EndID

			SET IDENTITY_INSERT dbo.[MTD_Messages] ON
			DECLARE @SQL varchar(max) = '
			INSERT INTO dbo.MTD_Messages 
			( 	[MessageRecID]
                ,[DemographicID]
                ,[DeviceID]
                ,[MessageText]
                ,[Button1]
                ,[Button2]
                ,[Button3]
                ,[Button4]
                ,[DateCreated]
                ,[UserRecID]
                ,[DeliveryUtcTime]
                ,[ActualDeliveryUtcTime]
                ,[AcknowledgeUtcTime]
                ,[DisplayTime]
                ,[KeyPressed])
			SELECT 	
                S.[MessageRecID]
                ,S.[DemographicID]
                ,S.[DeviceID]
                ,S.[MessageText]
                ,S.[Button1]
                ,S.[Button2]
                ,S.[Button3]
                ,S.[Button4]
                ,S.[DateCreated]
                ,S.[UserRecID]
                ,S.[DeliveryUtcTime]
                ,S.[ActualDeliveryUtcTime]
                ,S.[AcknowledgeUtcTime]
                ,S.[DisplayTime]
                ,S.[KeyPressed]
			FROM        
				[PD].[MTD_01].[dbo].[MTD_Messages] S WITH (NOLOCK)
			WHERE 
				S.[MessageRecID] BETWEEN ' + CONVERT(VARCHAR(20),@StartID) + ' AND ' + CONVERT(VARCHAR(20),@EndId) + '
			ORDER BY 
				S.MessageRecID '
			EXEC (@SQL)

			SET IDENTITY_INSERT dbo.[MTD_Messages] OFF

			UPDATE [PD].[SyncDB].dbo.MTD_Messages_ChangedRows 
				SET [CanProcess] = 1
			WHERE
				[MessageRecID] <= @EndID AND
				[CanProcess] = 0
			
			PRINT 'Records ' + CONVERT(VARCHAR(20),@StartID) + ' thru ' + CONVERT(VARCHAR(20),@EndId) + ' have been imported. Last record ID is ' + CONVERT(VARCHAR(20),@LastID)
			
			SET @StartID = @EndID + 1
		END
SELECT @MaxID = (SELECT MAX(MessageRecID) FROM [MTD_01].[dbo].[MTD_Messages]  WITH (NOLOCK))
UPDATE [PD].[SyncDB].dbo.MTD_Messages_ChangedRows 
SET [CanProcess] = 1
			WHERE
				[MessageRecID] <= @MaxID AND
				[CanProcess] = 0
GO
/****** Object:  StoredProcedure [dbo].[sync_MTD_SMSMessages_BlockCopy]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[sync_MTD_SMSMessages_BlockCopy]
AS
DECLARE @StartID int, 
			@LastID int, 
			@EndID int,
			@MaxID int

	SELECT @MaxID = (SELECT MAX(RecID) FROM [MTD_01].[dbo].[MTD_SMSMessages]  WITH (NOLOCK))
	SELECT @StartID = (SELECT ISNULL(max(RecID),@MaxID) + 1 FROM [MTD_01].[dbo].[MTD_SMSMessages] WITH (NOLOCK))
	SELECT @LastID = (SELECT MAX(S.RecID) FROM  [PD].[MTD_01].[dbo].[vw_MTD_SMSMessages_PD] S WITH (NOLOCK))
	--SELECT @LastID

	UPDATE [PD].[SyncDB].dbo.MTD_SMSMessages_ChangedRows_MaxMonitorKey 
		SET [BlockCopyOn] = 1

	WHILE @StartID <= @LastID
		BEGIN
			SET @EndID = @StartID + 10000

			UPDATE [PD].[SyncDB].dbo.MTD_SMSMessages_ChangedRows_MaxMonitorKey 
				SET [RecId] = @EndID

	SET IDENTITY_INSERT dbo.[MTD_SMSMessages] ON

			DECLARE @SQL varchar(max) = '
			INSERT INTO dbo.[MTD_SMSMessages] 
( 	   [RecID]
      ,[DeviceID]
      ,[Action]
      ,[Parameter]
      ,[PhoneNumber]
      ,[Gateway]
      ,[CreateGmt]
      ,[CreateTime]
      ,[SendTime]
      ,[ReplyTime]
      ,[APN]
      ,[NetworkUserId]
      ,[NetworkPassword]
      ,[SendMethod]
      ,[EncryptType]
      ,[MessageType]
      ,[IPAddress]
      ,[Port]
      ,[CSD]
      ,[LL]
      ,[DemographicId]
      ,[EmailFormat]
      ,[SMSMessageServiceHostName]
      ,[SMSMessageServiceFetchDate]
      ,[SMSMessageServiceBatchId]
      ,[DispatchAttempts]
      ,[SendAttempts]
      ,[Status]
      ,[StartedSend]
      ,[CompletedSend]
      ,[Response]
      ,[ExceptionMessage]
      ,[QueuedDate]
	
  )

			SELECT 	
	   S.[RecID]
      ,S.[DeviceID]
      ,S.[Action]
      ,S.[Parameter]
      ,S.[PhoneNumber]
      ,S.[Gateway]
      ,S.[CreateGmt]
      ,S.[CreateTime]
      ,S.[SendTime]
      ,S.[ReplyTime]
      ,S.[APN]
      ,S.[NetworkUserId]
      ,S.[NetworkPassword]
      ,S.[SendMethod]
      ,S.[EncryptType]
      ,S.[MessageType]
      ,S.[IPAddress]
      ,S.[Port]
      ,S.[CSD]
      ,S.[LL]
      ,S.[DemographicId]
      ,S.[EmailFormat]
      ,S.[SMSMessageServiceHostName]
      ,S.[SMSMessageServiceFetchDate]
      ,S.[SMSMessageServiceBatchId]
      ,S.[DispatchAttempts]
      ,S.[SendAttempts]
      ,S.[Status]
      ,S.[StartedSend]
      ,S.[CompletedSend]
      ,S.[Response]
      ,S.[ExceptionMessage]
      ,S.[QueuedDate]
    
			FROM        
				[PD].[MTD_01].[dbo].[vw_MTD_SMSMessages_PD]  S WITH (NOLOCK)
			WHERE 
				S.[RecID] BETWEEN ' + CONVERT(VARCHAR(20),@StartID) + ' AND ' + CONVERT(VARCHAR(20),@EndId) + '
			ORDER BY 
				S.RecID '
			EXEC (@SQL)

			SET IDENTITY_INSERT dbo.[MTD_SMSMessages] OFF

			UPDATE [PD].[SyncDB].dbo.MTD_SMSMessages_ChangedRows 
				SET [CanProcess] = 1
			WHERE
				[RecID] <= @EndID AND
				[CanProcess] = 0
			
			PRINT 'Records ' + CONVERT(VARCHAR(20),@StartID) + ' thru ' + CONVERT(VARCHAR(20),@EndId) + ' have been imported. Last record ID is ' + CONVERT(VARCHAR(20),@LastID)
			
			SET @StartID = @EndID + 1
		END
			SELECT @MaxID = (SELECT MAX(RecID) FROM [MTD_01].[dbo].[MTD_SMSMessages]  WITH (NOLOCK))
				UPDATE [PD].[SyncDB].dbo.MTD_SMSMessages_ChangedRows 
				SET [CanProcess] = 1
			WHERE
				[RecID] <= @MaxID AND
				[CanProcess] = 0
GO
/****** Object:  StoredProcedure [dbo].[sync_MTDActions_BlockCopy]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[sync_MTDActions_BlockCopy]
AS
	DECLARE @StartID int, 
			@LastID int, 
			@EndID int,
			@MaxID int

	SELECT @MaxID = (SELECT MAX([MTDActionID]) FROM [MTD_01].[dbo].[MTDActions]  WITH (NOLOCK))
	SELECT @StartID = (SELECT ISNULL(max([MTDActionID]),@MaxID) + 1 FROM [MTDActions] WITH (NOLOCK))
	SELECT @LastID = (SELECT MAX(S.[MTDActionID]) FROM [PD].[MTD_01].[dbo].[MTDActions] S WITH (NOLOCK))

	UPDATE [PD].[SyncDB].dbo.MTDActions_ChangedRows_MaxMonitorKey 
		SET [BlockCopyOn] = 1

	WHILE @StartID <= @LastID
		BEGIN
			SET @EndID = @StartID + 1000

			UPDATE [PD].[SyncDB].dbo.MTDActions_ChangedRows_MaxMonitorKey 
				SET [MTDActionID] = @EndID

			SET IDENTITY_INSERT dbo.[MTDActions] ON
			--DECLARE @SQL varchar(max) = '
			INSERT INTO [dbo].[MTDActions] (
				[MTDActionID]
				,[DeviceID]
				,[Action]
				,[ActionInProgress]
				,[Priority]
				,[TableRecordID]
				,[CompletedByUserRecID]
				,[DateCreated]
				,[DateCompleted]
				,[DemographicID]
				,[IPAddress]
				,[CommandNumber]
				,[CommandParam]
				,[LastContactMethod]
				,[SoftwareType])
			SELECT
				S.[MTDActionID]
				,S.[DeviceID]
				,S.[Action]
				,S.[ActionInProgress]
				,S.[Priority]
				,S.[TableRecordID]
				,S.[CompletedByUserRecID]
				,S.[DateCreated]
				,S.[DateCompleted]
				,S.[DemographicID]
				,S.[IPAddress]
				,S.[CommandNumber]
				,S.[CommandParam]
				,S.[LastContactMethod]
				,S.[SoftwareType]
			FROM        
				[PD].[MTD_01].[dbo].[MTDActions] S WITH (NOLOCK)
			WHERE 
				S.[MTDActionID] BETWEEN @StartID AND @EndID
				--' + CONVERT(VARCHAR(20),@StartID) + ' AND ' + CONVERT(VARCHAR(20),@EndId) + '
			ORDER BY 
				S.MTDActionID --'
			--EXEC (@SQL)

			SET IDENTITY_INSERT dbo.[MTDActions] OFF

			UPDATE [PD].[SyncDB].dbo.MTDActions_ChangedRows 
				SET [CanProcess] = 1
			WHERE
				[MTDActionID] <= @EndID AND
				[CanProcess] = 0
			
			PRINT 'Records ' + CONVERT(VARCHAR(20),@StartID) + ' thru ' + CONVERT(VARCHAR(20),@EndId) + ' have been imported. Last record ID is ' + CONVERT(VARCHAR(20),@LastID)
			
			SET @StartID = @EndID + 1
		END
		SELECT @MaxID = (SELECT MAX(MTDActionID) FROM [MTD_01].[dbo].[MTDActions]  WITH (NOLOCK))
		UPDATE [PD].[SyncDB].dbo.MTDActions_ChangedRows 
				SET [CanProcess] = 1
			WHERE
				[MTDActionID] <= @MaxID AND
				[CanProcess] = 0
GO
/****** Object:  StoredProcedure [dbo].[sync_MTDCalls_BlockCopy]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[sync_MTDCalls_BlockCopy]
AS
	DECLARE @StartID bigint, 
			@LastID bigint, 
			@EndID bigint,
			@MaxID bigint

	SELECT @MaxID = (SELECT MAX([CallRecID]) FROM [MTD_01].[dbo].[MTDCalls]  WITH (NOLOCK))
	SELECT @StartID = (SELECT ISNULL(max(CallRecID),@MaxID) + 1 FROM [MTDCalls] WITH (NOLOCK))
	SELECT @LastID = (SELECT MAX(S.[CallRecID]) FROM [PD].[MTD_01].[dbo].[MTDCalls] S WITH (NOLOCK))

	UPDATE [PD].[SyncDB].dbo.MTDCalls_ChangedRows_MaxMonitorKey 
		SET [BlockCopyOn] = 1

	WHILE @StartID <= @LastID
		BEGIN
			SET @EndID = @StartID + 100000

			UPDATE [PD].[SyncDB].dbo.MTDCalls_ChangedRows_MaxMonitorKey 
				SET [CallRecId] = @EndID

			SET IDENTITY_INSERT dbo.[MTDCalls] ON
			--DECLARE @SQL varchar(max) = '
			INSERT INTO dbo.MTDCalls 
			( 	[CallRecID],
				[DeviceID] ,
				[DemoGraphicID],
				[ANIPhoneNumber] ,
				[IPAddress] ,
				[Originator] ,
				[SessionSummary] ,
				[StartTime] ,
				[EndTime] ,
				[ElapsedSeconds] ,
				[PointsProcessed] ,
				[PointsMtdReportsSent] ,
				[InChargerDeviceID] ,
				[DatFileName] ,
				[StoredTimeStamp] ,
				[CallProcessed])

			SELECT 	
				S.[CallRecID],
				S.[DeviceID] ,
				S.[DemoGraphicID],
				S.[ANIPhoneNumber] ,
				S.[IPAddress] ,
				S.[Originator] ,
				S.[SessionSummary] ,
				S.[StartTime] ,
				S.[EndTime] ,
				S.[ElapsedSeconds] ,
				S.[PointsProcessed] ,
				S.[PointsMtdReportsSent] ,
				S.[InChargerDeviceID] ,
				S.[DatFileName] ,
				S.[StoredTimeStamp] ,
				S.[CallProcessed] 
			FROM        
				[PD].[MTD_01].[dbo].[MTDCalls] S WITH (NOLOCK)
			WHERE 
				S.[CallRecID] BETWEEN @StartID AND @EndID
				--' + CONVERT(VARCHAR(20),@StartID) + ' AND ' + CONVERT(VARCHAR(20),@EndId) + '
			ORDER BY 
				S.CallRecID --'
			--EXEC (@SQL)

			SET IDENTITY_INSERT dbo.[MTDCalls] OFF

			UPDATE [PD].[SyncDB].dbo.MTDCalls_ChangedRows 
				SET [CanProcess] = 1
			WHERE
				[CallRecID] <= @EndID AND
				[CanProcess] = 0
			
			PRINT 'Records ' + CONVERT(VARCHAR(20),@StartID) + ' thru ' + CONVERT(VARCHAR(20),@EndId) + ' have been imported. Last record ID is ' + CONVERT(VARCHAR(20),@LastID)
			
			SET @StartID = @EndID + 1
		END
SELECT @MaxID = (SELECT MAX(CallRecID) FROM [MTD_01].[dbo].[MTDCalls]  WITH (NOLOCK))
UPDATE [PD].[SyncDB].dbo.MTDCalls_ChangedRows 
SET [CanProcess] = 1
			WHERE
				[CallRecID] <= @MaxID AND
				[CanProcess] = 0
GO
/****** Object:  StoredProcedure [dbo].[sync_MTDCallsExtension_BlockCopy]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[sync_MTDCallsExtension_BlockCopy]
AS
	DECLARE @StartID bigint, 
			@LastID bigint, 
			@EndID bigint,
			@MaxID bigint

	SELECT @MaxID = (SELECT MAX([CallRecID]) FROM [MTD_01].[dbo].[MTDCallsExtension]  WITH (NOLOCK))
	SELECT @StartID = (SELECT ISNULL(max(CallRecID),@MaxID) + 1 FROM [MTDCallsExtension] WITH (NOLOCK))
	SELECT @LastID = (SELECT MAX(S.[CallRecID]) FROM [PD].[MTD_01].[dbo].[MTDCallsExtension] S WITH (NOLOCK))

	UPDATE [PD].[SyncDB].dbo.MTDCallsExtension_ChangedRows_MaxMonitorKey 
		SET [BlockCopyOn] = 1

	WHILE @StartID <= @LastID
		BEGIN
			SET @EndID = @StartID + 100000

			UPDATE [PD].[SyncDB].dbo.MTDCallsExtension_ChangedRows_MaxMonitorKey 
				SET [CallRecId] = @EndID

			--DECLARE @SQL varchar(max) = 
			INSERT INTO dbo.MTDCallsExtension 
			(
			 	[CallRecID],
				[DuplicatePositions] ,
				[SourceApplication],
				[SourceApplicationVersion] ,
				[SourceApplicationHost]
			)
			SELECT 	
			 	S.[CallRecID],
				S.[DuplicatePositions] ,
				S.[SourceApplication],
				S.[SourceApplicationVersion] ,
				S.[SourceApplicationHost]
			FROM        
				[PD].[MTD_01].[dbo].[MTDCallsExtension] S WITH (NOLOCK)
			WHERE 
				S.[CallRecID] BETWEEN @StartID AND @EndId
				--' + CONVERT(VARCHAR(20),@StartID) + ' AND ' + CONVERT(VARCHAR(20),@EndId) + '
			ORDER BY 
				S.CallRecID 
			--EXEC (@SQL)

			UPDATE [PD].[SyncDB].dbo.MTDCallsExtension_ChangedRows 
				SET [CanProcess] = 1
			WHERE
				[CallRecID] <= @EndID AND
				[CanProcess] = 0
			
			PRINT 'Records ' + CONVERT(VARCHAR(20),@StartID) + ' thru ' + CONVERT(VARCHAR(20),@EndId) + ' have been imported. Last record ID is ' + CONVERT(VARCHAR(20),@LastID)
			
			SET @StartID = @EndID + 1
		END
SELECT @MaxID = (SELECT MAX(CallRecId) FROM [MTD_01].[dbo].[MTDCallsExtension]  WITH (NOLOCK))
UPDATE [PD].[SyncDB].dbo.MTDCallsExtension_ChangedRows 
SET [CanProcess] = 1
			WHERE
				[CallRecID] <= @MaxID AND
				[CanProcess] = 0
GO
/****** Object:  StoredProcedure [dbo].[sync_VCommDeviceCalls_BlockCopy]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE     PROCEDURE [dbo].[sync_VCommDeviceCalls_BlockCopy]
AS



DECLARE @StartID INT, 
		@LastID INT, 
		@EndID INT,
		@MaxID INT


SELECT @MaxID = (SELECT MAX(RecID) FROM [MTD_01].[dbo].VCommDeviceCalls   WITH (NOLOCK))

SELECT @StartID = (SELECT ISNULL(max(RecID),@MaxID) + 1 FROM VCommDeviceCalls WITH (NOLOCK))

SELECT @LastID = (SELECT MAX(S.RecID) FROM [PD].[MTD_01].[dbo].VCommDeviceCalls  S WITH (NOLOCK))


	UPDATE [PD].[SyncDB].dbo.VCommDeviceCalls_ChangedRows_MaxMonitorKey 
		SET [BlockCopyOn] = 1

	WHILE @StartID <= @LastID
		BEGIN
			SET @EndID = @StartID + 100000

	UPDATE [PD].[SyncDB].dbo.VCommDeviceCalls_ChangedRows_MaxMonitorKey 
		SET [RecId] = @EndID


SET IDENTITY_INSERT [dbo].VCommDeviceCalls ON

--DECLARE @SQL varchar(max) = '
INSERT INTO dbo.VCommDeviceCalls 
( 	[RecID]
      ,[DeviceID]
      ,[DemographicID]
      ,[CompletedByUserRecID]
      ,[DateCreated]
      ,[DateCompleted]
      ,[DevicePhoneNumber]
      ,[DeviceIPAddress]
      ,[DevicePort]
      ,[ContactMethod]
      ,[ContactAttempts]
      ,[LastAttemptTime] )

SELECT 		
       S.[RecID]
      ,S.[DeviceID]
      ,S.[DemographicID]
      ,S.[CompletedByUserRecID]
      ,S.[DateCreated]
      ,S.[DateCompleted]
      ,S.[DevicePhoneNumber]
      ,S.[DeviceIPAddress]
      ,S.[DevicePort]
      ,S.[ContactMethod]
      ,S.[ContactAttempts]
      ,S.[LastAttemptTime]
FROM        [PD].[MTD_01].[dbo].VCommDeviceCalls  S WITH (NOLOCK)
WHERE S.[RecID] BETWEEN @StartID AND @EndID
--' + CONVERT(VARCHAR(20),@StartID) + ' AND ' + CONVERT(VARCHAR(20),@EndId) + '
ORDER BY S.RecID --'

--EXEC (@SQL)

SET IDENTITY_INSERT VCommDeviceCalls OFF

UPDATE [PD].[SyncDB].dbo.VCommDeviceCalls_ChangedRows 
				SET [CanProcess] = 1
			WHERE
				[RecID] <= @EndID AND
				[CanProcess] = 0

PRINT 'Records ' + CONVERT(VARCHAR(20),@StartID) + ' thru ' + CONVERT(VARCHAR(20),@EndId) + ' have been imported. Last record ID is ' + CONVERT(VARCHAR(20),@LastID)
  
  SET @StartID = @EndID + 1

END

SELECT @MaxID = (SELECT MAX(RecID) FROM [MTD_01].[dbo].[VCommDeviceCalls]  WITH (NOLOCK))
UPDATE [PD].[SyncDB].dbo.VCommDeviceCalls_ChangedRows 
SET [CanProcess] = 1
			WHERE
				[RecID] <= @MaxID AND
				[CanProcess] = 0
GO
/****** Object:  StoredProcedure [dbo].[tbt_LacCidLocationsLog_DeleteOld_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[tbt_LacCidLocationsLog_DeleteOld_001]
	@IntervalInDays int
AS
	--Delete old log traces
	CREATE TABLE #LogIds (
		id bigint
	)
	INSERT INTO #LogIds (
		id
	)
	SELECT 
		LacCidLocationsLogId 
	FROM 
		LacCidLocationsLog 
	WHERE 
		ExecutionStart < DATEADD(dd,(@IntervalInDays * -1), GETDATE())

	DELETE FROM LacCidLocationsTraceLog 
		WHERE LacCidLocationsLogId IN (SELECT id FROM #LogIds)

	DELETE FROM LacCidLocationsLog
		WHERE LacCidLocationsLogId IN (SELECT id FROM #LogIds)

	DROP TABLE #LogIds

GO
/****** Object:  StoredProcedure [dbo].[tbt_LacCidLocationsLog_Insert_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[tbt_LacCidLocationsLog_Insert_001]
	@ExecutionStart datetime,
	@LacCidsRows bigint = NULL,
	@SampleDataLacCidsRows bigint = NULL,
	@LacCidLocationsUpdates bigint = NULL,
	@LacCidLocationsInserts bigint = NULL,
	@ExecutionEnd datetime = NULL,
	@SequenceId bigint,
	@Step varchar(255),
	@LacCidLocationsLogId bigint OUTPUT
AS
	INSERT INTO LacCidLocationsLog (
		ExecutionStart,
		LacCidsRows,
		SampleDataLacCidsRows,
		LacCidLocationsUpdates,
		LacCidLocationsInserts,
		ExecutionEnd,
		SequenceId,
		Step
	) VALUES (
		@ExecutionStart,
		@LacCidsRows,
		@SampleDataLacCidsRows,
		@LacCidLocationsUpdates,
		@LacCidLocationsInserts,
		@ExecutionEnd,
		@SequenceId,
		@Step
	)

	SELECT @LacCidLocationsLogId = SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure [dbo].[tbt_LacCidLocationsLog_Update_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[tbt_LacCidLocationsLog_Update_001]
	@LacCidLocationsLogId bigint,
	@ExecutionEnd datetime
AS
	UPDATE LacCidLocationsLog SET
		ExecutionEnd = @ExecutionEnd
	WHERE
		LacCidLocationsLogId = @LacCidLocationsLogId
GO
/****** Object:  StoredProcedure [dbo].[tbt_LacCidLocationsLog_UpdateCounters_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[tbt_LacCidLocationsLog_UpdateCounters_001]
	@LacCidLocationsLogId bigint,
	@LacCidsRows bigint = NULL,
	@SampleDataLacCidsRows bigint = NULL,
	@LacCidLocationsUpdates bigint = NULL,
	@LacCidLocationsInserts bigint = NULL
AS
	UPDATE LacCidLocationsLog SET
		LacCidsRows = @LacCidsRows,
		SampleDataLacCidsRows = @SampleDataLacCidsRows,
		LacCidLocationsUpdates = @LacCidLocationsUpdates,
		LacCidLocationsInserts = @LacCidLocationsInserts
	WHERE
		LacCidLocationsLogId = @LacCidLocationsLogId
GO
/****** Object:  StoredProcedure [dbo].[tbt_LacCidLocationsTraceLog_Insert_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[tbt_LacCidLocationsTraceLog_Insert_001]
	@LacCidLocationsLogId bigint,
	@SequenceId bigint,
	@Step varchar(255),
	@ExecutionStart datetime,
	@ExecutionEnd datetime = NULL,
	@LacCidLocationsTraceLogId bigint OUTPUT
AS
	INSERT INTO LacCidLocationsTraceLog (
		LacCidLocationsLogId,
		SequenceId,
		Step,
		ExecutionStart,
		ExecutionEnd
	) VALUES (
		@LacCidLocationsLogId,
		@SequenceId,
		@Step,
		@ExecutionStart,
		@ExecutionEnd
	)

	SELECT @LacCidLocationsTraceLogId = SCOPE_IDENTITY()

	UPDATE LacCidLocationsLog SET
		SequenceId = @SequenceId,
		Step = @Step
	WHERE
		LacCidLocationsLogId = @LacCidLocationsLogId
GO
/****** Object:  StoredProcedure [dbo].[tbt_LacCidLocationsTraceLog_Update_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[tbt_LacCidLocationsTraceLog_Update_001]
	@LacCidLocationsTraceLogId bigint,
	@ExecutionEnd datetime
AS
	UPDATE LacCidLocationsTraceLog SET
		ExecutionEnd = @ExecutionEnd
	WHERE
		LacCidLocationsTraceLogId = @LacCidLocationsTraceLogId
GO
/****** Object:  StoredProcedure [dbo].[tbt_UpdateLacCidLocations]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[tbt_UpdateLacCidLocations]
AS

	-- =============================================
	-- Author:		Mike McGowan
	-- Create date: 01-7-2016
	-- Description:	Updates the Lac Cid Locations Table 
	--				on the Protech Database if the number of LAC CID positions increases 
	--				by 20 percent or more, and if there are new LAC CID locations
	-- =============================================
	/*
	===========================================================================
	History
	===========================================================================
	07/11/2018 - JSC - Modified the stored procedure to improve the logging so
		that it will be easier to determine which aspects of the process are 
		long running statements.
	---------------------------------------------------------------------------
	*/
	SET NOCOUNT ON

	DECLARE @LacCidLocationsLogId bigint = 0,
			@ExecutionStart datetime = GETDATE(),
			@LacCidsRows bigint = 0,
			@SampleDataLacCidsRows bigint = 0,
			@LacCidLocationsUpdates bigint = 0,
			@LacCidLocationsInserts bigint = 0,
			@ExecutionEnd datetime = GETDATE(),
			@Step varchar(255) = '',
			@toProcess bigint = 0,
			@EstimatedCompletion datetime = DATEADD(MINUTE,25,GETDATE()),
			@SegmentStart datetime = GETDATE(),
			@SegmentEnd datetime = GETDATE(),
			@ThousandsToProcess float = 1.0,
			@CurrentMedianLat float = 0,
			@CurrentMedianLong float = 0,
			@CurrentMedianText varchar(128),
			@AverageDistance int,
			@SequenceId bigint = 0,
			@LacCidLocationsTraceLogId bigint = 0

	SET @Step = 'Starting...'
	SET @SequenceId = @SequenceId + 1

	RAISERROR(@Step, 10, 1) WITH NOWAIT

	EXEC tbt_LacCidLocationsLog_Insert_001
		@ExecutionStart,
		@LacCidsRows,
		@SampleDataLacCidsRows,
		@LacCidLocationsUpdates,
		@LacCidLocationsInserts,
		@ExecutionEnd,
		@SequenceId,
		@Step,
		@LacCidLocationsLogId OUTPUT

	EXEC tbt_LacCidLocationsTraceLog_Insert_001 
		@LacCidLocationsLogId,
		@SequenceId,
		@Step,
		@ExecutionStart,
		@ExecutionEnd,
		@LacCidLocationsTraceLogId OUTPUT

	IF OBJECT_ID('tempdb..#TempLacCidLocations') IS NOT NULL
		BEGIN
			DROP TABLE #TempLacCidLocations
		END

	CREATE TABLE #TempLacCidLocations 
	(
		CellType tinyint,
		LAC int,
		CID int,
		NID int,
		CDPDAvailable char(1),
		Latitude float,
		Longitude float,
		PositionCount int,
		AverageDistance int
	)

	CREATE INDEX IDX_TempLacCidLocations ON #TempLacCidLocations (
		CellType,
		LAC,
		CID,
		NID
	)

	--Get each distinct LAC CID Combo where there is no existing locked tower info
	CREATE TABLE #TempLacCids
	(
		ID int IDENTITY(1,1),
		CellType tinyint,
		LAC int,
		CID int,
		NID int,
		PositionCount int
	)

	CREATE INDEX IDX_TempLacCid ON #TempLacCids (
		CellType,
		LAC,
		CID,
		NID
	)

	SET @ExecutionEnd = GETDATE()
	EXEC tbt_LacCidLocationsTraceLog_Update_001 
		@LacCidLocationsTraceLogId,
		@ExecutionEnd

	SELECT @LacCidsRows = COUNT(*) FROM LacCids

	EXEC tbt_LacCidLocationsLog_UpdateCounters_001
		@LacCidLocationsLogId,
		@LacCidsRows,
		@SampleDataLacCidsRows,
		@LacCidLocationsUpdates,
		@LacCidLocationsInserts
		
	SET @Step = 'Collecting sample tower data...'
	SET @SequenceId = @SequenceId + 1
	SET @ExecutionStart = GETDATE()
	SET @ExecutionEnd = NULL

	RAISERROR(@Step, 10, 1) WITH NOWAIT

	EXEC tbt_LacCidLocationsTraceLog_Insert_001 
		@LacCidLocationsLogId,
		@SequenceId,
		@Step,
		@ExecutionStart,
		@ExecutionEnd,
		@LacCidLocationsTraceLogId OUTPUT

	INSERT INTO #TempLacCids (
		CellType,
		LAC,
		CID,
		NID,
		PositionCount
	)
	SELECT DISTINCT 
		A.CellType,
		A.LAC, 
		A.CID, 
		A.NID,
		RecordCount 
	FROM
		(
			SELECT  
				L.CellType,
				L.LAC,
				L.CID,
				L.NID,
				ISNULL(LCL.Locked,0) Locked,
				ISNULL(LCL.PositionCount,0) PositionCount, 
				COUNT(*) RecordCount
			FROM
				[MTD_01].[dbo].[LacCids] AS L WITH (NOLOCK)
				LEFT JOIN [Protech].[dbo].[LacCidLocations] LCL  WITH (NOLOCK)
					ON L.CellType = LCL.CellType
						AND L.LAC = LCL.LAC 
						AND L.CID = LCL.CID 
						AND L.NID = LCL.NID
			WHERE 
				L.LAC > 0
				AND L.CID > 0
			GROUP BY 
				L.CellType,
				L.LAC,
				L.CID,
				L.NID,
				ISNULL(LCL.Locked,0), 
				ISNULL(LCL.PositionCount,0)
			HAVING 
				COUNT(*) > ISNULL(LCL.PositionCount,0)
		) AS A

	WHERE 
		A.Locked = 0
		AND
		(
				--Number of LAC CID Positions increased by 20%
				CASE 
					WHEN A.PositionCount = 0 THEN 1 --Do not divide by zero
					ELSE ((CONVERT(Decimal (28,9),A.RecordCount) - CONVERT(Decimal (28,9),A.PositionCount)) /  CONVERT(Decimal (28,9),A.PositionCount))
				END
				 > 0.20
			OR 
				A.PositionCount is null
		)
	ORDER BY 
		1,2

	SELECT @SampleDataLacCidsRows = COUNT(*) FROM #TempLacCids

	EXEC tbt_LacCidLocationsLog_UpdateCounters_001
		@LacCidLocationsLogId,
		@LacCidsRows,
		@SampleDataLacCidsRows,
		@LacCidLocationsUpdates,
		@LacCidLocationsInserts

	SET @ExecutionEnd = GETDATE()
	EXEC tbt_LacCidLocationsTraceLog_Update_001 
		@LacCidLocationsTraceLogId,
		@ExecutionEnd


	DECLARE @LacCidIdx int = (SELECT COUNT(*) FROM #TempLacCids),
			@Index int = 1

	--Create this temp table here and truncate in loop, it's faster than drop and creating for every LAC CID


	--For each LAC CID NID, Find the center point (Geographic Envelope)
	SET @toProcess = @LacCidIdx


	WHILE (@Index <= @LacCidIdx)
		BEGIN
			DECLARE @CurrentCellType tinyint = 0,
					@CurrentLac int = 0,
					@CurrentCid int = 0,
					@CurrentNid int = 0,
					@CurrentCdPd char(1),
					@CurrentPositionCount int = 0

			SET @Step = 'Analyzing sample tower data (' + CAST(@Index as varchar(40)) + ' of ' + CAST(@toProcess as varchar(40)) + ') ETC: ' + CAST(@EstimatedCompletion as varchar(40))
			SET @SequenceId = @SequenceId + 1
			SET @ExecutionStart = GETDATE()
			SET @ExecutionEnd = NULL

			RAISERROR(@Step, 10, 1) WITH NOWAIT

			EXEC tbt_LacCidLocationsTraceLog_Insert_001 
				@LacCidLocationsLogId,
				@SequenceId,
				@Step,
				@ExecutionStart,
				@ExecutionEnd,
				@LacCidLocationsTraceLogId OUTPUT

			SELECT
				@CurrentCellType = CellType,  
				@CurrentLac = LAC, 
				@CurrentCid = CID, 
				@CurrentNid = NID,
				@CurrentPositionCount = PositionCount 
			FROM 
				#TempLacCids
			WHERE 
				ID = @Index

			INSERT INTO #TempLacCidLocations (
				CellType,
				LAC,
				CID,
				NID,
				Latitude,
				Longitude,
				PositionCount,
				CDPDAvailable
			)
			SELECT DISTINCT
				L.CellType,
				L.LAC, 
				L.CID,
				L.NID,
				PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY L.Latitude) OVER (PARTITION BY Convert(varchar(20),L.LAC )) Latitude,
				PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY L.Longitude) OVER (PARTITION BY Convert(varchar(20),L.LAC )) Longitude,
				@CurrentPositionCount,
				L.CDPDAvailable
			FROM
				[MTD_01].[dbo].[LacCids] L WITH (NOLOCK)
			WHERE 
				L.CellType = @CurrentCellType
				AND L.LAC = @CurrentLac 
				AND L.CID = @CurrentCid 
				AND L.NID = @CurrentNid
				--ONLY VALID NORTHERN HEMISPHERE LAT LONG
				AND ((L.latitude > -90.0 AND L.latitude < 90.0) AND (L.longitude > -180.0 AND L.longitude < 180.0))
			
			IF (@@ROWCOUNT > 0)
				BEGIN
					SELECT 
						@CurrentMedianLat = Latitude, 
						@CurrentMedianLong = Longitude  
					FROM  
						#TempLacCidLocations
					WHERE 
						CellType = @CurrentCellType
						AND LAC = @CurrentLac 
						AND CID = @CurrentCid 
						AND NID = @CurrentNid

					SET @CurrentMedianText = 'POINT (' + convert(varchar(20),@CurrentMedianLong) + ' ' + convert(varchar(20),@CurrentMedianLat)  + ')'

					SELECT @AverageDistance = (
						SELECT DISTINCT
							PERCENTILE_DISC(0.8) WITHIN GROUP 
							(
								ORDER BY
									GEOGRAPHY::STGeomFromText(@CurrentMedianText,4326).STDistance(
									GEOGRAPHY::STGeomFromText('POINT (' + convert(varchar(20),Longitude) + ' ' + convert(varchar(20),Latitude)  + ')',4326))
							) 
							OVER
							( 
								PARTITION BY
									CellType, 
									LAC,
									CID,
									NID
							)
						FROM 
							[MTD_01].[dbo].[LacCids] with (nolock)
						WHERE
							CellType = @CurrentCellType 
							AND LAC = @CurrentLac 
							AND CID = @CurrentCid 
							AND NID = @CurrentNid
									--ONLY VALID NORTHERN HEMISPHERE LAT LONG
							AND (Latitude > -90.0 AND Latitude < 90.0)
							AND (Longitude > -180.0 AND Longitude < 180.0)
							--Only care about the most recent 200 positions recorded for this LAC CID
							AND LacCidRecID IN (
								SELECT TOP 200 
									LacCidRecID 
								FROM 
									[MTD_01].[dbo].[LacCids] WITH (nolock) 
								WHERE 
									CellType = @CurrentCellType
									AND LAC = @CurrentLac 
									AND CID = @CurrentCid 
									AND NID = @CurrentNid
								ORDER BY 
									TimeStamp desc)
						) * 3.28084 -- Convert to feet


					UPDATE #TempLacCidLocations SET 
						AverageDistance = @AverageDistance
					WHERE
						CellType = @CurrentCellType 
						AND LAC = @CurrentLac 
						AND CID = @CurrentCid 
						AND NID = @CurrentNid

				END

			SET @Index = @Index + 1
			SET @ExecutionEnd = GETDATE()
			EXEC tbt_LacCidLocationsTraceLog_Update_001 
				@LacCidLocationsTraceLogId,
				@ExecutionEnd
		END 


	SELECT 
		@LacCidLocationsUpdates = COUNT(*) 
	FROM 		
		#TempLacCidLocations T WITH (NOLOCK)
		JOIN Protech.dbo.LacCidLocations L WITH (NOLOCK)
			ON T.CellType = L.CellType
				AND T.LAC = L.LAC 
				AND T.CID = L.CID 
				AND T.NID = L.NID
				AND L.Locked = 0

	EXEC tbt_LacCidLocationsLog_UpdateCounters_001
		@LacCidLocationsLogId,
		@LacCidsRows,
		@SampleDataLacCidsRows,
		@LacCidLocationsUpdates,
		@LacCidLocationsInserts

	IF (@LacCidLocationsUpdates > 0)
	BEGIN
		SET @Step = 'Update existing tower data...'
		SET @SequenceId = @SequenceId + 1
		SET @ExecutionStart = GETDATE()
		SET @ExecutionEnd = NULL

		RAISERROR(@Step, 10, 1) WITH NOWAIT

		EXEC tbt_LacCidLocationsTraceLog_Insert_001 
			@LacCidLocationsLogId,
			@SequenceId,
			@Step,
			@ExecutionStart,
			@ExecutionEnd,
			@LacCidLocationsTraceLogId OUTPUT

		----These values already exist and are not locked
		UPDATE [Protech].[dbo].[LacCidLocations] SET 
			PositionCount = T.PositionCount,
			AverageDistance = T.AverageDistance,
			Latitude = T.Latitude,
			Longitude = T.Longitude
		FROM  
			#TempLacCidLocations T WITH (NOLOCK)
			JOIN Protech.dbo.LacCidLocations L WITH (NOLOCK)
				ON T.CellType = L.CellType
					AND T.LAC = L.LAC 
					AND T.CID = L.CID 
					AND T.NID = L.NID
					AND L.Locked = 0

		SET @ExecutionEnd = GETDATE()
		EXEC tbt_LacCidLocationsTraceLog_Update_001 
			@LacCidLocationsTraceLogId,
			@ExecutionEnd

	END
	

	
	SELECT 
		@LacCidLocationsInserts = COUNT(*)
	FROM #TempLacCidLocations T WITH (NOLOCK)
		LEFT JOIN Protech.dbo.LacCidLocations L WITH (NOLOCK)
			ON T.CellType = L.CellType
				AND T.LAC = L.LAC 
				AND T.CID = L.CID 
				AND T.NID = L.NID
	WHERE
		L.LacCidLocationsID IS NULL

	EXEC tbt_LacCidLocationsLog_UpdateCounters_001
		@LacCidLocationsLogId,
		@LacCidsRows,
		@SampleDataLacCidsRows,
		@LacCidLocationsUpdates,
		@LacCidLocationsInserts

	--These are new values
	IF (@LacCidLocationsInserts > 0)
	BEGIN
		SET @Step = 'Inserting new tower data...'
		SET @SequenceId = @SequenceId + 1
		SET @ExecutionStart = GETDATE()
		SET @ExecutionEnd = NULL

		RAISERROR(@Step, 10, 1) WITH NOWAIT

		EXEC tbt_LacCidLocationsTraceLog_Insert_001 
			@LacCidLocationsLogId,
			@SequenceId,
			@Step,
			@ExecutionStart,
			@ExecutionEnd,
			@LacCidLocationsTraceLogId OUTPUT

		INSERT INTO [Protech].[dbo].[LacCidLocations] (
			CellType, 
			LAC, 
			CID,
			NID,
			CDPDAvailable, 
			Latitude, 
			Longitude, 
			PositionCount, 
			AverageDistance, 
			Locked
		)
		SELECT 
			T.CellType,
			T.LAC, 
			T.CID, 
			T.NID,
			T.CDPDAvailable, 
			T.Latitude, 
			T.Longitude, 
			T.PositionCount, 
			T.AverageDistance,
			0
		 FROM 
			#TempLacCidLocations T WITH (NOLOCK)
			LEFT JOIN Protech.dbo.LacCidLocations L WITH (NOLOCK)
				ON T.CellType = L.CellType
					AND T.LAC = L.LAC 
					AND T.CID = L.CID 
					AND T.NID = L.NID
			WHERE
				L.LacCidLocationsID IS NULL

		SET @ExecutionEnd = GETDATE()
		EXEC tbt_LacCidLocationsTraceLog_Update_001 
			@LacCidLocationsTraceLogId,
			@ExecutionEnd
	END

	SET @Step = 'Terminating...'
	SET @SequenceId = @SequenceId + 1
	SET @ExecutionStart = GETDATE()
	SET @ExecutionEnd = NULL

	RAISERROR(@Step, 10, 1) WITH NOWAIT

	EXEC tbt_LacCidLocationsTraceLog_Insert_001 
		@LacCidLocationsLogId,
		@SequenceId,
		@Step,
		@ExecutionStart,
		@ExecutionEnd,
		@LacCidLocationsTraceLogId OUTPUT

	DROP TABLE #TempLacCidLocations

	SET @ExecutionEnd = GETDATE()
	EXEC tbt_LacCidLocationsTraceLog_Update_001 
		@LacCidLocationsTraceLogId,
		@ExecutionEnd

	SET @Step = 'Done.'
	SET @SequenceId = @SequenceId + 1
	SET @ExecutionStart = GETDATE()
	SET @ExecutionEnd = GETDATE()

	RAISERROR(@Step, 10, 1) WITH NOWAIT

	EXEC tbt_LacCidLocationsTraceLog_Insert_001 
		@LacCidLocationsLogId,
		@SequenceId,
		@Step,
		@ExecutionStart,
		@ExecutionEnd,
		@LacCidLocationsTraceLogId OUTPUT

	SET @ExecutionEnd = GETDATE()
	EXEC tbt_LacCidLocationsLog_Update_001
		@LacCidLocationsLogId,
		@ExecutionEnd
	
	EXEC tbt_LacCidLocationsLog_DeleteOld_001 30

	--SELECT 
	--	ExecutionStart,
	--	ExecutionEnd,
	--	CONVERT(varchar(5), DATEDIFF(s, ExecutionStart, ExecutionEnd) / 3600) + ' hrs.' + 
	--		CONVERT(varchar(5), DATEDIFF(s, ExecutionStart, ExecutionEnd) % 3600 / 60) + ' mins.' +
	--		CONVERT(varchar(5), DateDiff(s, ExecutionStart, ExecutionEnd) % 60) + ' secs.' as [Duration],
	--	LacCidsRows as [LacCids Rows],
	--	SampleDataLacCidsRows as [Sample LacCids Rows],
	--	LacCidLocationsUpdates as [Updates],
	--	LacCidLocationsInserts as [Inserts]
	--FROM 
	--	LacCidLocationsLog 
	--WHERE
	--	LacCidLocationsLogId = @LacCidLocationsLogId

	--SELECT
	--	SequenceId, 
	--	Step,
	--	ExecutionStart,
	--	ExecutionEnd,
	--	CONVERT(varchar(5), DATEDIFF(s, ExecutionStart, ExecutionEnd) / 3600) + ' hrs.' + 
	--		CONVERT(varchar(5), DATEDIFF(s, ExecutionStart, ExecutionEnd) % 3600 / 60) + ' mins.' +
	--		CONVERT(varchar(5), DateDiff(s, ExecutionStart, ExecutionEnd) % 60) + ' secs.' as [Duration]
	--FROM
	--	LacCidLocationsTraceLog
	--WHERE
	--	LacCidLocationsLogId = @LacCidLocationsLogId
	--ORDER BY
	--	SequenceId
GO
/****** Object:  StoredProcedure [dbo].[tmrpcm_DeviceCallsLastNormal_GetLastCallTime_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[tmrpcm_DeviceCallsLastNormal_GetLastCallTime_DEL]
	@DemographicID	INT,
	@DeviceID		INT,
	@LastCallTime	DATETIME OUT
AS
BEGIN
	SET NOCOUNT ON
	
	SET @LastCallTime = (SELECT StartTime
	                     FROM DeviceCallsLastNormal
	                     WHERE DemographicID = @DemographicID
							AND DeviceID = @DeviceID)
END
GO
/****** Object:  StoredProcedure [dbo].[UpdateVcommList]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[UpdateVcommList] @IPAddress VARCHAR(15)
    , @ServerName VARCHAR(max)
    , @CommSite VARCHAR(max)
    , @CommType VARCHAR(max)
    , @CommNumber INT
    , @UserRecID INT
AS
-- =============================================
-- Author:		Alfredo Inostroza
-- Create date: 2022-04-21
-- Description:	Adds/Updates Servers
--   on the VCommList
-- =============================================
BEGIN
    WITH s
    AS (
        SELECT *
        FROM (
            VALUES (
                @ServerName
                , @CommSite
                , @CommType
                , @CommNumber
                , @IPAddress
                )
            ) AS [S]([ServerName], [CommSite], [CommType], [CommNumber], [IPAddress])
        )
    MERGE MTD_01.dbo.VCommList T
    USING S
        ON T.IPAddress = S.IPAddress
    WHEN NOT MATCHED BY TARGET
        THEN
            INSERT (
                [ServerName]
                , [CommSite]
                , [CommType]
                , [CommNumber]
                , [IPAddress]
                )
            VALUES (
                @ServerName
                , @CommSite
                , @CommType
                , @CommNumber
                , @IPAddress
                )
    WHEN MATCHED
        THEN
            UPDATE
            SET t.[ServerName] = S.[ServerName]
                , t.[CommSite] = S.[CommSite]
                , t.[CommType] = S.[CommType]
                , t.[CommNumber] = S.[CommNumber];

    INSERT INTO Protech.dbo.ModificationHistory (
        UserRecID
        , TIMESTAMP
        , AppName
        , TableName
        , EventType
        , TableRecID
        , Message
        , CallingFormName
        )
    VALUES (
        @UserRecID
        , GETDATE()
        , 'SQL'
        , 'VCommList'
        , 'UPDATE'
        , 0
        , @IPAddress + ' Set to Server Name' + @ServerName + ', Site ' + @CommSite + ', Type ' + @CommType + ', Number ' + cast(@CommNumber AS VARCHAR(max))
        , NULL
        )
END
GO
/****** Object:  StoredProcedure [dbo].[usp_AGStats]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO













-- =============================================
-- Author:		Uche Okoye
-- Create date: 04-25-2023
-- Description:	AG Stats
-- =============================================
CREATE PROCEDURE [dbo].[usp_AGStats] AS
	
BEGIN

SET NOCOUNT ON;

SELECT
    ar.replica_server_name,
    adc.database_name,
    drs.synchronization_state_desc,
    drs.synchronization_health_desc,
    drs.log_send_queue_size,
    drs.redo_queue_size,
    drs.redo_rate
FROM sys.dm_hadr_database_replica_states drs
JOIN sys.availability_databases_cluster adc
    ON drs.group_id = adc.group_id
    AND drs.group_database_id = adc.group_database_id
JOIN sys.availability_replicas ar
    ON drs.group_id = ar.group_id
    AND drs.replica_id = ar.replica_id
WHERE ar.replica_server_name IS NOT NULL
ORDER BY ar.replica_server_name, adc.database_name;

    
END




GO
/****** Object:  StoredProcedure [dbo].[usp_binarySearch]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE    PROC [dbo].[usp_binarySearch]
( @StartTime DATETIME, @EndTime DATETIME)
AS
BEGIN
-- ══════════════════════════════════════════════════════════════
--                Binary Search Example for SQL Server
--
-- This example demonstrates how to use binary search to efficiently
-- find records within a time range when:
-- 1. The table has a clustered index on an identity column (PositionRecID)
-- 2. The timestamp column (StoredTimeStamp) is not indexed or poorly indexed
-- 3. The table is very large (millions/billions of rows)
--
-- The binary search finds the RecID boundaries for your time range,
-- then uses those boundaries for efficient data retrieval.
-- ══════════════════════════════════════════════════════════════

-- ════════════════════════════
-- Setup: Define your time range
-- ════════════════════════════
--DECLARE @StartTime DATETIME = '2025-01-15 10:00:00';  -- Your start time
--DECLARE @EndTime DATETIME = '2025-01-15 11:00:00';    -- Your end time

-- Variables for binary search
DECLARE @MinPositionRecID BIGINT;  -- Will hold the first RecID >= StartTime
DECLARE @MaxPositionRecID BIGINT;  -- Will hold the last RecID < EndTime
DECLARE @Low BIGINT, @High BIGINT, @Mid BIGINT;
DECLARE @MidTime DATETIME;

-- ════════════════════════════════════════════════
-- Step 1: Get the table's RecID range
-- ════════════════════════════════════════════════
SELECT @Low = MIN(PositionRecID), @High = MAX(PositionRecID) 
FROM MTD_01.dbo.MTD_Positions WITH (NOLOCK);

PRINT 'Table range: ' + CAST(@Low AS VARCHAR) + ' to ' + CAST(@High AS VARCHAR);

-- ════════════════════════════════════════════════
-- Step 2: Binary Search for Lower Bound
-- Find the first PositionRecID where StoredTimeStamp >= @StartTime
-- ════════════════════════════════════════════════
PRINT '';
PRINT '=== Finding Lower Bound (first record >= ' + CONVERT(VARCHAR, @StartTime, 120) + ') ===';

-- Store initial range for reuse
DECLARE @InitialLow BIGINT = @Low;
DECLARE @InitialHigh BIGINT = @High;

WHILE @Low <= @High
BEGIN
    SET @Mid = (@Low + @High) / 2;
    
    -- Get the timestamp for this RecID (using PK index hint)
    SELECT TOP 1 @MidTime = StoredTimeStamp 
    FROM MTD_01.dbo.MTD_Positions WITH (NOLOCK, INDEX(Orig_PK_MTD_Positions))
    WHERE PositionRecID >= @Mid
    ORDER BY PositionRecID;
    
    PRINT 'Checking RecID ' + CAST(@Mid AS VARCHAR) + ': Time = ' + 
          ISNULL(CONVERT(VARCHAR, @MidTime, 120), 'NULL');
    
    IF @MidTime IS NULL OR @MidTime < @StartTime
        SET @Low = @Mid + 1;  -- Look in the upper half
    ELSE
    BEGIN
        SET @MinPositionRecID = @Mid;  -- This could be our answer
        SET @High = @Mid - 1;          -- But check if there's a smaller one
    END
END

PRINT 'Lower bound found: RecID = ' + ISNULL(CAST(@MinPositionRecID AS VARCHAR), 'NULL');

-- ════════════════════════════════════════════════
-- Step 3: Binary Search for Upper Bound
-- Find the last PositionRecID where StoredTimeStamp < @EndTime
-- ════════════════════════════════════════════════
-- Reset the search range
SET @Low = @InitialLow;
SET @High = @InitialHigh;

PRINT '';
PRINT '=== Finding Upper Bound (last record < ' + CONVERT(VARCHAR, @EndTime, 120) + ') ===';

WHILE @Low <= @High
BEGIN
    SET @Mid = (@Low + @High) / 2;
    
    -- Get the timestamp for this RecID (using PK index hint)
    SELECT TOP 1 @MidTime = StoredTimeStamp 
    FROM MTD_01.dbo.MTD_Positions WITH (NOLOCK, INDEX(Orig_PK_MTD_Positions))
    WHERE PositionRecID <= @Mid
    ORDER BY PositionRecID DESC;
    
    PRINT 'Checking RecID ' + CAST(@Mid AS VARCHAR) + ': Time = ' + 
          ISNULL(CONVERT(VARCHAR, @MidTime, 120), 'NULL');
    
    IF @MidTime IS NULL
        SET @High = @Mid - 1;  -- Look in the lower half
    ELSE IF @MidTime < @EndTime
    BEGIN
        SET @MaxPositionRecID = @Mid;  -- This could be our answer
        SET @Low = @Mid + 1;           -- But check if there's a larger one
    END
    ELSE
        SET @High = @Mid - 1;  -- Look in the lower half
END

PRINT 'Upper bound found: RecID = ' + ISNULL(CAST(@MaxPositionRecID AS VARCHAR), 'NULL');

-- ════════════════════════════════════════════════
-- Step 4: Use the boundaries to query data
-- ════════════════════════════════════════════════
PRINT '';
PRINT '=== Final Query Using Binary Search Results ===';

-- Check if we found valid boundaries
IF @MinPositionRecID IS NULL OR @MaxPositionRecID IS NULL
BEGIN
    PRINT 'ERROR: Could not find valid RecID boundaries for the given time range';
    RETURN;
END

PRINT 'RecID Range: ' + CAST(@MinPositionRecID AS VARCHAR) + ' to ' + CAST(@MaxPositionRecID AS VARCHAR);

-- Now you can efficiently query using the RecID range!
-- The PK index makes the BETWEEN very fast, and we add timestamp filter for accuracy
SELECT 
    COUNT(*) as RecordCount,
    MIN(StoredTimeStamp) as FirstRecord,
    MAX(StoredTimeStamp) as LastRecord
FROM MTD_01.dbo.MTD_Positions WITH (NOLOCK, INDEX(Orig_PK_MTD_Positions))
WHERE PositionRecID BETWEEN @MinPositionRecID AND @MaxPositionRecID
  AND StoredTimeStamp >= @StartTime 
  AND StoredTimeStamp < @EndTime;

-- ════════════════════════════════════════════════
-- Example: Aggregate by minute using the boundaries
-- ════════════════════════════════════════════════
SELECT 
    DATEADD(MINUTE, DATEDIFF(MINUTE, 0, StoredTimeStamp), 0) AS MinuteBucket,
    COUNT(*) AS EventCount
FROM MTD_01.dbo.MTD_Positions WITH (NOLOCK, INDEX(Orig_PK_MTD_Positions))
WHERE PositionRecID BETWEEN @MinPositionRecID AND @MaxPositionRecID
  AND StoredTimeStamp >= @StartTime 
  AND StoredTimeStamp < @EndTime
GROUP BY DATEADD(MINUTE, DATEDIFF(MINUTE, 0, StoredTimeStamp), 0)
ORDER BY MinuteBucket;

-- ════════════════════════════════════════════════
-- Performance Comparison (Optional)
-- ════════════════════════════════════════════════
/*
-- Compare with traditional approach (WARNING: This might be very slow!)
SELECT COUNT(*) as RecordCount
FROM MTD_01.dbo.MTD_Positions WITH (NOLOCK)
WHERE StoredTimeStamp >= @StartTime 
  AND StoredTimeStamp < @EndTime;

-- The binary search approach is typically 10-100x faster on large tables
-- because it uses the clustered index on PositionRecID efficiently
*/
END
GO
/****** Object:  StoredProcedure [dbo].[usp_getIdentityValues]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Elena Roe
-- Create date: 01-19-2012
-- Monitors identity values to prevent overflow
-- =============================================
CREATE PROCEDURE [dbo].[usp_getIdentityValues]
AS
BEGIN
SET NOCOUNT ON; 
	INSERT INTO [Utilities].[dbo].[MTD_IdentityValues]
		([TableName]
		,[ColumnName]
		,[ColumnType]
		,[Precision]
		,[CurrentIdentityValue]
		,[PercentUsed])
		
                   
     SELECT  
        --DB_NAME() as database_name,
		OBJECT_NAME(c.object_id) as table_name,  
		c.name as column_name,                     
        t.name as column_type,
        c.precision,
        IDENT_CURRENT(OBJECT_NAME(c.object_id)) as current_identity_value,
        (IDENT_CURRENT(OBJECT_NAME(c.object_id)) / 
        CASE
			WHEN    t.name = 'bigint'
				THEN    9223372036854775807.00
            WHEN    t.name = 'int'
                THEN    2147483647.00
			WHEN    t.name = 'smallint'
                THEN    32767.00
            WHEN    t.name = 'tinyint'
                THEN    255.00
            WHEN    t.name = 'numeric'                      
                THEN    POWER(10.00, c.precision) - 1
            WHEN    t.name = 'decimal'
                THEN    POWER(10.00, c.precision) - 1
            WHEN    t.name = 'money'
                THEN    922337203685477.5807
            WHEN    t.name = 'smallmoney'
                THEN    214748.3647
            ELSE    1.00
        END) * 100 AS percent_used
     FROM    sys.columns c
         INNER JOIN sys.types t
		 ON c.system_type_id = t.system_type_id                       
     WHERE   c.is_identity = 1
         AND OBJECTPROPERTY(c.object_id, 'IsUserTable') = 1 AND OBJECT_NAME(c.object_id) <> 'dtproperties'
     order by table_name 
     
END

GO
/****** Object:  StoredProcedure [dbo].[usp_spaceused]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[usp_spaceused] --- 2003/05/19 14:00
@objname nvarchar(776) = null,		-- The object we want size on.
@updateusage varchar(5) = false		-- Param. for specifying that
					-- usage info. should be updated.
as

declare @id	int			-- The object id that takes up space
		,@type	character(2) -- The object type.
		,@pages	bigint			-- Working variable for size calc.
		,@dbname sysname
		,@dbsize bigint
		,@logsize bigint
		,@reservedpages  bigint
		,@usedpages  bigint
		,@rowCount bigint

/*
**  Check to see if user wants usages updated.
*/

if @updateusage is not null
	begin
		select @updateusage=lower(@updateusage)

		if @updateusage not in ('true','false')
			begin
				raiserror(15143,-1,-1,@updateusage)
				return(1)
			end
	end
/*
**  Check to see that the objname is local.
*/
if @objname IS NOT NULL
begin

	select @dbname = parsename(@objname, 3)

	if @dbname is not null and @dbname <> db_name()
		begin
			raiserror(15250,-1,-1)
			return (1)
		end

	if @dbname is null
		select @dbname = db_name()

	/*
	**  Try to find the object.
	*/
	SELECT @id = object_id, @type = type FROM sys.objects WHERE object_id = object_id(@objname)

	-- Translate @id to internal-table for queue
	IF @type = 'SQ'
		SELECT @id = object_id FROM sys.internal_tables WHERE parent_id = @id and internal_type = 201 --ITT_ServiceQueue

	/*
	**  Does the object exist?
	*/
	if @id is null
		begin
			raiserror(15009,-1,-1,@objname,@dbname)
			return (1)
		end

	-- Is it a table, view or queue?
	IF @type NOT IN ('U ','S ','V ','SQ','IT')
	begin
		raiserror(15234,-1,-1)
		return (1)
	end
end

/*
**  Update usages if user specified to do so.
*/

if @updateusage = 'true'
	begin
		if @objname is null
			dbcc updateusage(0) with no_infomsgs
		else
			dbcc updateusage(0,@objname) with no_infomsgs
		print ' '
	end

set nocount on

/*
**  If @id is null, then we want summary data.
*/
if @id is null
begin
	select @dbsize = sum(convert(bigint,case when status & 64 = 0 then size else 0 end))
		, @logsize = sum(convert(bigint,case when status & 64 <> 0 then size else 0 end))
		from dbo.sysfiles

	select @reservedpages = sum(a.total_pages),
		@usedpages = sum(a.used_pages),
		@pages = sum(
				CASE
					-- XML-Index and FT-Index internal tables are not considered "data", but is part of "index_size"
					When it.internal_type IN (202,204,211,212,213,214,215,216) Then 0
					When a.type <> 1 Then a.used_pages
					When p.index_id < 2 Then a.data_pages
					Else 0
				END
			)
	from sys.partitions p join sys.allocation_units a on p.partition_id = a.container_id
		left join sys.internal_tables it on p.object_id = it.object_id

	/* unallocated space could not be negative */
	select 
		database_name = db_name(),
		/*database_size = ltrim(str((convert (dec (15,2),@dbsize) + convert (dec (15,2),@logsize)) 
			* 8192 / 1048576,15,2) + ' MB'),*/
		 database_sizeGB = ltrim(str((convert (dec (15,2),@dbsize) + convert (dec (15,2),@logsize)) 
			* 8192 / (1048576 * 1024.),15,2) + ' GB'),	
		/*'unallocated space' = ltrim(str((case when @dbsize >= @reservedpages then
			(convert (dec (15,2),@dbsize) - convert (dec (15,2),@reservedpages)) 
			* 8192 / 1048576 else 0 end),15,2) + ' MB'),*/
		'unallocated space GB' = ltrim(str((case when @dbsize >= @reservedpages then
			(convert (dec (15,2),@dbsize) - convert (dec (15,2),@reservedpages)) 
			* 8192 / (1048576 * 1024.) else 0 end),15,2) + ' GB')

	/*
	**  Now calculate the summary data.
	**  reserved: sum(reserved) where indid in (0, 1, 255)
	** data: sum(data_pages) + sum(text_used)
	** index: sum(used) where indid in (0, 1, 255) - data
	** unused: sum(reserved) - sum(used) where indid in (0, 1, 255)
	*/
	select
		--reserved = ltrim(str(@reservedpages * 8192 / 1024.,15,0) + ' KB'),
		reservedGB = ltrim(str(@reservedpages * 8192 / (1024. * 1024. * 1024.),15,2) + ' GB'),
		--data = ltrim(str(@pages * 8192 / 1024.,15,0) + ' KB'),
		dataGB = ltrim(str(@pages * 8192 / (1024. * 1024. * 1024.),15,2) + ' GB'),
		--index_size = ltrim(str((@usedpages - @pages) * 8192 / 1024.,15,0) + ' KB'),
		index_sizeGB = ltrim(str((@usedpages - @pages) * 8192 / (1024. * 1024. * 1024.),15,2) + ' GB'),
		--unused = ltrim(str((@reservedpages - @usedpages) * 8192 / 1024.,15,0) + ' KB'),
		unusedGB = ltrim(str((@reservedpages - @usedpages) * 8192 / (1024. * 1024. * 1024.),15,2) + ' GB')
end

/*
**  We want a particular object.
*/
else
begin
	/*
	** Now calculate the summary data. 
	*  Note that LOB Data and Row-overflow Data are counted as Data Pages.
	*/
	SELECT 
		@reservedpages = SUM (reserved_page_count),
		@usedpages = SUM (used_page_count),
		@pages = SUM (
			CASE
				WHEN (index_id < 2) THEN (in_row_data_page_count + lob_used_page_count + row_overflow_used_page_count)
				ELSE lob_used_page_count + row_overflow_used_page_count
			END
			),
		@rowCount = SUM (
			CASE
				WHEN (index_id < 2) THEN row_count
				ELSE 0
			END
			)
	FROM sys.dm_db_partition_stats
	WHERE object_id = @id;

	/*
	** Check if table has XML Indexes or Fulltext Indexes which use internal tables tied to this table
	*/
	IF (SELECT count(*) FROM sys.internal_tables WHERE parent_id = @id AND internal_type IN (202,204,211,212,213,214,215,216)) > 0 
	BEGIN
		/*
		**  Now calculate the summary data. Row counts in these internal tables don't 
		**  contribute towards row count of original table.
		*/
		SELECT 
			@reservedpages = @reservedpages + sum(reserved_page_count),
			@usedpages = @usedpages + sum(used_page_count)
		FROM sys.dm_db_partition_stats p, sys.internal_tables it
		WHERE it.parent_id = @id AND it.internal_type IN (202,204,211,212,213,214,215,216) AND p.object_id = it.object_id;
	END

	SELECT 
		table_name = OBJECT_NAME (@id),
		rows = convert (char(11), @rowCount),
		--reserved = LTRIM (STR (@reservedpages * 8, 15, 0) + ' KB'),
		reservedGB = LTRIM (STR (@reservedpages * 8/(1024. * 1024.), 15, 2) + ' GB'),
		--data = LTRIM (STR (@pages * 8, 15, 0) + ' KB'),
		dataGB = LTRIM (STR (@pages * 8/(1024. * 1024.), 15, 2) + ' GB'),
		--index_size = LTRIM (STR ((CASE WHEN @usedpages > @pages THEN (@usedpages - @pages) ELSE 0 END) * 8, 15, 0) + ' KB'),
		index_sizeGB = LTRIM (STR ((CASE WHEN @usedpages > @pages THEN (@usedpages - @pages) ELSE 0 END) * 8/(1024. * 1024.), 15, 2) + ' GB'),
		--unused = LTRIM (STR ((CASE WHEN @reservedpages > @usedpages THEN (@reservedpages - @usedpages) ELSE 0 END) * 8, 15, 0) + ' KB'),
		unusedGB = LTRIM (STR ((CASE WHEN @reservedpages > @usedpages THEN (@reservedpages - @usedpages) ELSE 0 END) * 8/(1024. * 1024.), 15, 2) + ' GB')


end


return (0) -- sp_spaceused
GO
/****** Object:  StoredProcedure [dbo].[vc_devicecallcount_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[vc_devicecallcount_DEL] @start datetime, @end datetime
AS
	SET NOCOUNT ON
	select 'datecalled' = cast(datecalled as datetime), device, unitscalled from (select 'datecalled' = left(datecalled,20), 'device' = 'MTD', 'unitscalled' = count(datecalled) from (select distinct deviceid, datecalled 
	from(select deviceid, 'datecalled'= rtrim(cast(month(starttime)as char)) + '/'+ rtrim(cast(day(starttime)as char)) + '/' + rtrim(cast(year(starttime)as char)) from mtdcalls(nolock) where starttime >= @start and 
	starttime < @end and (DeviceID & 0xFF000000) = 0x02000000) as mtdlist) as indivmtd group by datecalled union select 'datecalled' = left(datecalled,20), 'device' = 'CHG', 'unitscalled' = count(datecalled) 
	from (select distinct deviceid, datecalled from(select deviceid, 'datecalled'= rtrim(cast(month(starttime)as char)) + '/'+ rtrim(cast(day(starttime)as char)) + '/' + rtrim(cast(year(starttime)as char)) from 
		mtdcalls(nolock) where starttime >= @start and starttime < @end and (DeviceID & 0xFF000000) = 0x03000000) as chglist) as indivchg group by datecalled) as combineddevicecalled 
	order by device, datecalled
GO
/****** Object:  StoredProcedure [dbo].[vcm_FetchNewSmsMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

/*****Warning: this store procedure is shared with ProtechE. *************
******Please see DBA before modifying. ***********************************/

-- 05/27/10 - CG - Per Ronen, Added EmailFormat  
--	   (Note that some of the columns are now aliased where they weren't 
--    before (APN, NetworkUserID, NetworkPassword, IPAddress)
--    ER added RTRIM to PhoneNumber
--
-- 12/10/2015 - JSC - Modified the stored procedure to only return SMS
--		messages that are not to be sent using a modem (SendMethod <> 'M')

CREATE Procedure [dbo].[vcm_FetchNewSmsMessages]
AS
	SELECT TOP 50 
		DeviceID, 
		RecID, 
		Action, 
		Parameter = RTRIM(LEFT(Parameter,31)), 
		RTRIM(PhoneNumber), 
		Gateway = RTRIM(LEFT(Gateway,31)), 
		CreateGMT, 
		APN = RTRIM(APN), 
		NetUserID = RTRIM(NetworkUserId), 
		NetPass = RTRIM(NetworkPassword), 
		SendMethod, 
		MessageType, 
		IPAddr = RTRIM(IPAddress), 
		Port, 
		CSD, 
		LL, 
		EmailFormat
	FROM 
		MTD_SMSMessages WITH (NOLOCK)
	WHERE 
		SendTime IS NULL  
		AND ReplyTime IS NULL
		AND SendMethod <> 'M'
	ORDER BY 
		DeviceID
GO
/****** Object:  StoredProcedure [dbo].[vcm_FetchVCommDeviceCalls]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[vcm_FetchVCommDeviceCalls] AS
BEGIN
	SELECT TOP 25
		RecID,
		DeviceID, 
		DemographicID, 
		DateCreated, 
		DevicePhoneNumber, 
		DeviceIPAddress, 
		DevicePort, 
		ContactMethod, 
		ContactAttempts,
		LastAttemptTime
	FROM VCommDeviceCalls WITH (NOLOCK)
	WHERE DateCreated > DateAdd( hh, -18, GetDate() )
	AND DateCompleted IS NULL
	AND LastAttemptTime < DateAdd( mi, -10, GetDate() )
	AND ContactAttempts < 7
	ORDER BY DateCreated
END
GO
/****** Object:  StoredProcedure [dbo].[vcm_InvertRuleInAlarmRuleID_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--DROP PROCEDURE vcm_InvertRuleInAlarmRuleID 
--GO

CREATE PROCEDURE [dbo].[vcm_InvertRuleInAlarmRuleID_DEL] 
	@RuleInAlarmRecID bigint
AS
	SET NOCOUNT ON
	DECLARE @PositionRecId bigint
	DECLARE @HWRule int
	DECLARE @HWRuleBitIndex int
	DECLARE @RuleID int

	SELECT 
		@PositionRecId = PositionRecID,
		@HWRuleBitIndex = HwRuleBitIndex,
		@HWRule = HWRule,
		@RuleID = RuleID
	FROM 
		RulesInAlarm 
	WHERE 
		RulesInAlarmRecID = @RuleInAlarmRecID

	UPDATE RulesInAlarm SET 
		RuleID = -RuleID 
	WHERE 
		RulesInAlarmRecID = @RuleInAlarmRecID
	
	UPDATE Reporting..Report_EM_Positions SET 
		RuleID = -RuleID 
	WHERE 
		PositionRecID = @PositionRecId AND 
		HWRuleBitIndex = @HWRuleBitIndex AND 
		HwRule = @HWRule AND
		RuleID = @RuleID

	UPDATE Reporting..Report_MTDPositions SET 
		RuleID = -RuleID 
	WHERE 
		PositionRecID = @PositionRecId AND 
		HWRuleBitIndex = @HWRuleBitIndex AND 
		HwRule = @HWRule AND
		RuleID = @RuleID
GO
/****** Object:  StoredProcedure [dbo].[vcm_MtdActions_Select_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE   PROCEDURE [dbo].[vcm_MtdActions_Select_001]  
	@DeviceID int, 
	@ExcludeFlag int=0
AS
/*
===============================================================================
Product: VComm
Version: 3.0.0.0
-------------------------------------------------------------------------------
Returns a collection of actions for the specified device.

@DeviceId		The device id

@ExcludeFlag	If 0, the only the actions that have not been started or any
				bulk load actions that are in progress will be included.  If
				1, only actions that have not been started will be included
				in the results and all bulk load actions are omitted.
===============================================================================
*/
	SET NOCOUNT ON
	IF @ExcludeFlag = 0 
		BEGIN
			SELECT 
				* 
			FROM 
				MtdActions 
			WHERE	
				(DeviceID = @DeviceID)
				AND (
					(ActionInProgress = 'N') 
					OR
					((ActionInProgress = 'P') AND 
					(commandnumber = 14))
					)
		END
	ELSE
		BEGIN
			SELECT 
				* 
			FROM 
				MtdActions 
			WHERE	
				(DeviceID = @DeviceID)
				AND (ActionInProgress = 'N') 
				AND (commandnumber <> 14)
		END
GO
/****** Object:  StoredProcedure [dbo].[vcm_MTDActions_UpdateProgress_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jeremy Nelson
-- Create date: 1/25/2018
-- Description:	Update MTDAction ActionInProgress value
-- =============================================
CREATE PROCEDURE [dbo].[vcm_MTDActions_UpdateProgress_001]

@ActionId			int,
@ActionInProgress	char

AS
BEGIN
	SET NOCOUNT ON;

	UPDATE	MTDActions
	SET		ActionInProgress = @ActionInProgress
	WHERE	MTDActionId = @ActionId

END
GO
/****** Object:  StoredProcedure [dbo].[vcm_SndCds_ChangeFlag]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================================
-- Author:		Ulises Sala
-- Create date: 5/5/2011
-- Description:	Changes the SendCodes Status flag 'ActinInProgress
-- in MtdActions table.  Call by VComm upon successfully completing and code upload
-- or at the beginning of a call and in interrupted partial code load
-- ER added MAX(DateCreated)
-- =================================================================================
CREATE PROCEDURE [dbo].[vcm_SndCds_ChangeFlag] 
@DeviceID int,
@State char 
AS
BEGIN
	SET NOCOUNT ON
	UPDATE MTDActions SET ActionInProgress = @State
	WHERE DeviceID = @DeviceID and CommandNumber = 14 
	and DateCreated = (select MAX(DateCreated) from MTDActions where DeviceID = @DeviceID and CommandNumber = 14)  
END
GO
/****** Object:  StoredProcedure [dbo].[vcm_UpdateMTD_SmsMessages]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[vcm_UpdateMTD_SmsMessages] @RecID INT
AS
	SET NOCOUNT ON
	UPDATE MTD_SmsMessages 
	SET SendTime = GetDate() 
	WHERE RecID = @RecID
GO
/****** Object:  StoredProcedure [dbo].[vcm_UpdateOneMtdAction]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[vcm_UpdateOneMtdAction] @MtdActionID int 
AS
	SET NOCOUNT ON
	Update MTDActions WITH  (ROWLOCK) Set ActionInProgress = 'P' Where MtdActionID = @MtdActionID


GO
/****** Object:  StoredProcedure [dbo].[vcm_UpdateVCommDeviceCallAttempts]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[vcm_UpdateVCommDeviceCallAttempts] @RecID INT
AS
BEGIN
	UPDATE VCommDeviceCalls WITH (ROWLOCK)
	SET ContactAttempts = ContactAttempts+1, LastAttemptTime = GetDate()
	WHERE RecID = @RecID
END
GO
/****** Object:  StoredProcedure [dbo].[vcm_VCommDeviceCalls_Select_001]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE   PROCEDURE [dbo].[vcm_VCommDeviceCalls_Select_001] 
AS
/*
===============================================================================
Product: EM.CommServer.ServiceApi
Version: 3.0.0.3
Script Date: 2020-05-15
-------------------------------------------------------------------------------
This stored procedure will return a list of OutboundDeviceCall entities where
the entity is incomplete, is no older than 18 hours, the last attempt to call 
the device occurred over 10 minutes prior to the current time, and no more than
7 attempts have been made to call the device (1 hour of attempted calls).  The
entities returned by this stored procedure are only for devices that 
communicate using a landline connection.
-------------------------------------------------------------------------------
History
-------------------------------------------------------------------------------
2020-05-15 - Added description section to stored procedure

2021-01-13 - Modified the stored procedure to return the OffenderDeviceId and
			 the ContractId values for the device at the time of the attempted
			 call.
===============================================================================
*/
	SELECT TOP 25
		vdc.RecID as RecId,
		vdc.DeviceID as DeviceId,
		vdc.DemographicID as DemographicId,
		vdc.DateCreated,
		vdc.DevicePhoneNumber,
		vdc.DeviceIPAddress,
		vdc.DevicePort,
		vdc.ContactMethod,
		vdc.ContactAttempts,
		vdc.LastAttemptTime,
		ISNULL(od.OffenderDeviceID,0) AS OffenderDeviceId,
		ISNULL(c.ContractID,0) AS ContractId
	FROM 
		VCommDeviceCalls vdc (NOLOCK)
		LEFT OUTER JOIN [Protech].[dbo].[OffenderDevices] od (NOLOCK)
			ON vdc.DeviceID = od.DeviceID AND
				vdc.DemographicID = od.DemographicID AND
				od.AssignmentDate IS NOT NULL AND
				od.UnassignmentDate IS NULL AND
				od.DeactivationDate IS NULL
		LEFT OUTER JOIN [Protech].dbo.Demographics d (NOLOCK)
			ON vdc.DemographicID = d.DemographicID
		LEFT OUTER JOIN [Protech].dbo.Customers c (NOLOCK)
			ON d.CustomerID = c.CustomerID
	WHERE 
		vdc.DateCreated > DATEADD(HOUR, -18, GETDATE() ) AND
		vdc.DateCompleted IS NULL AND
		vdc.LastAttemptTime < DATEADD(MINUTE, -10, GETDATE() ) AND
		vdc.ContactAttempts < 7
	ORDER BY 
		vdc.DateCreated
GO
/****** Object:  StoredProcedure [dbo].[vr_GetLastPos_DEL]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE Procedure [dbo].[vr_GetLastPos_DEL] @DeviceID INT, @DemoID INT
AS

IF( @DeviceID < 33550000 )
BEGIN
	IF @DemoID = 0 
	BEGIN
		Select TOP 1 PtdID, Longitude, Latitude, DemographicID, TimeStamp, StoredTimeStamp
		FROM PA_LACK_01..Positions WITH (NOLOCK, INDEX=PositionQryIDX)
		WHERE PtdID = @DeviceID
		AND DemographicID IN ( SELECT DemographicID FROM PROTECH..Demographics WHERE CustomerID IN ( SELECT CustomerID FROM PROTECH..Customers WHERE ContractID = 111  ) )
		AND Longitude != 0
		ORDER BY TimeStamp Desc
	END 
	ELSE
	BEGIN
		Select TOP 1 PtdID, Longitude, Latitude, DemographicID, TimeStamp, StoredTimeStamp
		FROM PA_LACK_01..Positions WITH(NOLOCK, INDEX=PositionQryIDX)
		WHERE DemographicID = @DemoID AND PtdID = @DeviceID
		AND Longitude != 0
		--ORDER BY PositionRecID DESC
		ORDER BY TimeStamp Desc
	END
END
ELSE
BEGIN
	IF @DemoID = 0 
	BEGIN
		Select TOP 1 DeviceID, Longitude, Latitude, DemographicID, TimeStamp, StoredTimeStamp
		FROM MTD_01..MTD_Positions WITH(NOLOCK,INDEX=PositionQryIDX)
		WHERE  DeviceID = @DeviceID
		AND DemographicID IN ( SELECT DemographicID FROM PROTECH..Demographics WHERE CustomerID IN ( SELECT CustomerID FROM PROTECH..Customers WHERE ContractID = 111  ) )
		AND Longitude != 0
		ORDER BY TimeStamp Desc
	END 
	ELSE
	BEGIN
		Select TOP 1 DeviceID, Longitude, Latitude, DemographicID, TimeStamp, StoredTimeStamp
		FROM MTD_01..MTD_Positions WITH(NOLOCK,INDEX=PositionQryIDX)
		WHERE DemographicID = @DemoID AND DeviceID = @DeviceID
		AND Longitude != 0
		--ORDER BY PositionRecID DESC
		ORDER BY TimeStamp Desc
	END
END
GO
/****** Object:  StoredProcedure [msqta].[spPurgeData]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [msqta].[spPurgeData]
@sessionObject	msqta.TuningSessionType		READONLY,
@queryObject	msqta.TuningQueryType		READONLY,
@databaseName								varchar(256),
@mode										tinyint
AS

/*
------------------------------------------------------------
Copyright (c) Microsoft Corporation.  All rights reserved.
Licensed under the Source EULA. See License.txt in the project root for license information.
------------------------------------------------------------

Deletes persisted Session and Query data from database. It operates in multiple modes as defined below

case @mode = 0:
    Purge queries and its properties from database.
    This operation might leave an empty session in database. If queries getting purged
    are part of some session.
    Caller needs to pass in @queryObject

case @mode = 1: 
    Purge session and its properties from database.
    Query belonging to this session remains in the database.
    Caller needs to pass in @sessionObject

case @mode = 2:
    Purge session and its properties from database.
    This also purges query which are part of this session.
    Caller needs to pass in @sessionObject

case @mode = 3:
    Purge all sessions and its properties from database except current active session.
    Query belonging to this session remains in the database.
    Caller needs to pass @databaseName

case @mode = 4:
    Purge all sessions and its properties from database except current active session.
    This also purges query which are part of this session.
    Caller needs to pass @databaseName
*/

BEGIN TRANSACTION

BEGIN TRY

    IF @mode = 0 AND (SELECT COUNT(*) FROM @queryObject) > 0
    BEGIN
        DELETE query 
        FROM msqta.TuningQuery query 
        INNER JOIN @queryObject queryObject ON queryObject.QueryID = query.QueryID AND DB_ID(queryObject.DatabaseName) = query.DatabaseID
        -- delete cascade  will take care of foreign keys
    END
    IF @mode = 1 AND (SELECT COUNT(*) FROM @sessionObject) > 0
    BEGIN
        DELETE session
        FROM msqta.TuningSession session
        INNER JOIN @sessionObject sessionObject ON sessionObject.TuningSessionID = session.TuningSessionID
        WHERE session.Status != 0
        -- delete cascade  will take care of foreign keys
    END
    IF @mode = 2 AND (SELECT COUNT(*) FROM @sessionObject) > 0
    BEGIN
        DELETE query 
        FROM msqta.TuningQuery query 
        INNER JOIN msqta.TuningSession_TuningQuery session_query ON session_query.TuningQueryID = query.TuningQueryID
        INNER JOIN msqta.TuningSession session ON session.TuningSessionID = session_query.TuningSessionID
        INNER JOIN @sessionObject sessionObject ON sessionObject.TuningSessionID = session_query.TuningSessionID
        WHERE session.Status != 0

        DELETE session
        FROM msqta.TuningSession session
        INNER JOIN @sessionObject sessionObject ON sessionObject.TuningSessionID = session.TuningSessionID
        WHERE session.Status != 0
        -- delete cascade  will take care of foreign keys
    END
    IF @mode = 3
    BEGIN
        DELETE session
        FROM msqta.TuningSession session WHERE session.DatabaseID = DB_ID(@databaseName) AND session.Status != 0
        -- delete cascade  will take care of foreign keys
    END
    IF @mode = 4
    BEGIN
        DELETE query 
        FROM msqta.TuningQuery query 
        INNER JOIN msqta.TuningSession_TuningQuery session_query ON session_query.TuningQueryID = query.TuningQueryID
        INNER JOIN msqta.TuningSession session ON session.TuningSessionID = session_query.TuningSessionID
        WHERE session.DatabaseID = DB_ID(@databaseName) AND session.Status != 0

        DELETE session
        FROM msqta.TuningSession session WHERE session.DatabaseID = DB_ID(@databaseName) AND session.Status != 0
        -- delete cascade  will take care of foreign keys
    END
END TRY
BEGIN CATCH

    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;

    THROW

END CATCH

IF @@TRANCOUNT > 0
    COMMIT TRANSACTION;
GO
/****** Object:  StoredProcedure [msqta].[spQueryGet]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [msqta].[spQueryGet]
@databaseName	varchar(256)
AS

/*
------------------------------------------------------------
Copyright (c) Microsoft Corporation.  All rights reserved.
Licensed under the Source EULA. See License.txt in the project root for license information.
------------------------------------------------------------

Returns list of TuningQuery for the given database
@databaseName			- Name of the database for which TuningQuery is returned for

*/

SELECT 
query.TuningQueryID,
query.QueryID,
DB_NAME(query.DatabaseID) AS DatabaseName,
query.ParentObjectId,
query.QueryHash,
query.QueryText,
query.QueryType,
query.IsParametrized,
query.PlanGuide,
query.Status,
query.CreateDate,
query.LastModifyDate,
query.ProfileCompleteDate,
query.AnalysisCompleteDate,
query.ExperimentPendingDate,
query.ExperimentCompleteDate,
query.DeployedDate,
query.AbandonedDate,
query.Parameters 
FROM msqta.TuningQuery query
WHERE query.DatabaseID = DB_ID(@databaseName)

SELECT 
queryOptionGroup.GroupID,
queryOptionGroup.TuningQueryID,
query.QueryID,
DB_NAME(query.DatabaseID) AS DatabaseName,
queryOptionGroup.QueryOptions,
queryOptionGroup.IsVerified,
queryOptionGroup.IsDeployed,
queryOptionGroup.ValidationCompleteDate
FROM msqta.QueryOptionGroup queryOptionGroup
INNER JOIN msqta.TuningQuery query ON query.TuningQueryID = queryOptionGroup.TuningQueryID
WHERE query.DatabaseID = DB_ID(@databaseName)

SELECT
stat.StatID,
stat.GroupID,
query.QueryID,
DB_NAME(query.DatabaseID) AS DatabaseName,
stat.StatType,
stat.IsProfiled,
stat.ExecutionCount,
stat.Showplan,
stat.Stats
FROM msqta.ExecutionStat stat
INNER JOIN msqta.QueryOptionGroup queryOptionGroup ON queryOptionGroup.GroupID = stat.GroupID
INNER JOIN msqta.TuningQuery query ON query.TuningQueryID = queryOptionGroup.TuningQueryID
WHERE query.DatabaseID = DB_ID(@databaseName)
GO
/****** Object:  StoredProcedure [msqta].[spQuerySave]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [msqta].[spQuerySave]
@queryObject				msqta.TuningQueryType		READONLY,
@queryOptionGroupObject		msqta.QueryOptionGroupType	READONLY,
@queryExecutionStatObject	msqta.ExecutionStatType		READONLY,
@update						tinyint 
AS

/*
------------------------------------------------------------
Copyright (c) Microsoft Corporation.  All rights reserved.
Licensed under the Source EULA. See License.txt in the project root for license information.
------------------------------------------------------------

Persist queries into database. 
@queryObject				- UDT for TuningQuery
@queryOptionGroupObject		- UDT from QueryOptionObject
@queryExecutionStatObject	- UDT for ExecutionStat
@update						- Valid values are 
                                1 - Force update existing record and insert new records
                                2 - update existing record only if it's query_status is behind the incoming record and insert new records
                                x - insert new records

*/

BEGIN TRANSACTION

BEGIN TRY
    
     -- Verify Database name is valid for query records
    IF (SELECT COUNT(*) FROM @queryObject WHERE DB_ID(DatabaseName) IS NULL) > 0
    BEGIN
        THROW 51000, 'Cannot find database against which query is saved.', 1
    END
        
    IF @update = 1
    BEGIN
        
        /*
        If query already exists, we will overwrite existing record with the incoming record (DELETE + ADD)
        */

        DELETE query
        FROM msqta.TuningQuery query
        INNER JOIN @queryObject queryObject on queryObject.QueryID = query.QueryID AND DB_ID(queryObject.DatabaseName) = query.DatabaseID
        
    END

    IF @update = 2
    BEGIN
        
        /*
        If query already exists, we will update record only if saved query's query_status is behind the incoming record
        */

        DELETE query
        FROM msqta.TuningQuery query
        INNER JOIN @queryObject queryObject on queryObject.QueryID = query.QueryID AND DB_ID(queryObject.DatabaseName) = query.DatabaseID
        WHERE query.Status <= queryObject.Status

    END

    /*
    Add new records
    */

    -- Create temporary list of QueryIDs to which we have to insert. 
    DECLARE @msqta_TempQueryToInsert table(
    QueryID bigint,
    DatabaseID int)

    INSERT INTO @msqta_TempQueryToInsert (QueryID, DatabaseID)
    SELECT queryObject.QueryID, DB_ID(queryObject.DatabaseName)
    FROM @queryObject queryObject
    LEFT JOIN msqta.TuningQuery query on query.QueryID = queryObject.QueryID AND query.DatabaseID = DB_ID(queryObject.DatabaseName)
    WHERE query.QueryID IS NULL AND query.DatabaseID IS NULL

    -- Adding Query Record
    INSERT INTO msqta.TuningQuery(
    QueryID,
    DatabaseID,
    ParentObjectId,
    QueryHash,
    QueryText,
    QueryType,
    IsParametrized,
    PlanGuide,
    Status,
    CreateDate,
    LastModifyDate,
    ProfileCompleteDate,
    AnalysisCompleteDate,
    ExperimentPendingDate,
    ExperimentCompleteDate,
    DeployedDate,
    AbandonedDate,
    Parameters)

    SELECT 
    queryObject.QueryID, 
    DB_ID(queryObject.DatabaseName), 
    queryObject.ParentObjectId, 
    queryObject.QueryHash, 
    queryObject.QueryText, 
    queryObject.QueryType, 
    queryObject.IsParametrized, 
    queryObject.PlanGuide, 
    queryObject.Status,
    queryObject.CreateDate, 
    GETUTCDATE(), 
    queryObject.ProfileCompleteDate, 
    queryObject.AnalysisCompleteDate, 
    queryObject.ExperimentPendingDate, 
    queryObject.ExperimentCompleteDate, 
    queryObject.DeployedDate, 
    queryObject.AbandonedDate, 
    queryObject.Parameters 
    FROM @queryObject queryObject
    INNER JOIN @msqta_TempQueryToInsert queryToInsert ON queryToInsert.QueryID = queryObject.QueryID AND queryToInsert.DatabaseID = DB_ID(queryObject.DatabaseName)

    -- Create a temporary mapping of QueryOptionGroup(GroupID) from the client to actual GroupID generated from above statement.
    -- We will need this mapping to link ExecutionStats back to GroupID
    DECLARE @msqta_TempGroupIdMapping table(
    TuningQueryID bigint,
    TempGroupID bigint,
    NewGroupID bigint)

    /*
    Adding QueryOptionGroup Records with always insert merge condition.
    We have to use merge condition in this case because we have to use output clause to get back the identity column value for GroupID.
    Output clause will generate the temporary mapping of GroupID from client to actual GroupID.
    */
    MERGE INTO msqta.QueryOptionGroup
    USING @queryOptionGroupObject qogObject
    INNER JOIN @msqta_TempQueryToInsert queryToInsert ON queryToInsert.QueryID = qogObject.QueryID AND queryToInsert.DatabaseID = DB_ID(qogObject.DatabaseName)
    INNER JOIN msqta.TuningQuery query ON query.QueryID = qogObject.QueryID AND query.DatabaseID = DB_ID(qogObject.DatabaseName)
    ON 1=0
    WHEN NOT MATCHED THEN
        INSERT(
        TuningQueryID,
        QueryOptions,
        IsVerified,
        IsDeployed,
        ValidationCompleteDate)

        VALUES(
        query.TuningQueryID,
        qogObject.QueryOptions,
        qogObject.IsVerified,
        qogObject.IsDeployed,
        qogObject.ValidationCompleteDate)

        OUTPUT INSERTED.TuningQueryID, qogObject.GroupID, INSERTED.GroupID INTO @msqta_TempGroupIdMapping;

    -- Adding ExecutionStat Records
    INSERT INTO msqta.ExecutionStat(
    GroupID,
    StatType,
    IsProfiled,
    ExecutionCount,
    Showplan,
    Stats)

    SELECT
    tempGroupIdMapping.NewGroupID,
    statsObject.StatType,
    statsObject.IsProfiled,
    statsObject.ExecutionCount,
    statsObject.Showplan,
    statsObject.Stats
    FROM @queryExecutionStatObject statsObject
    INNER JOIN @msqta_TempQueryToInsert queryToInsert ON queryToInsert.QueryID = statsObject.QueryID AND queryToInsert.DatabaseID = DB_ID(statsObject.DatabaseName)
    INNER JOIN msqta.TuningQuery query ON query.QueryID = statsObject.QueryID AND query.DatabaseID = DB_ID(statsObject.DatabaseName)
    INNER JOIN @msqta_TempGroupIdMapping tempGroupIdMapping ON tempGroupIdMapping.TuningQueryID = query.TuningQueryID AND tempGroupIdMapping.TempGroupID = statsObject.GroupID

END TRY
BEGIN CATCH

    IF @@TRANCOUNT > 0  
        ROLLBACK TRANSACTION; 
    THROW

END CATCH

IF @@TRANCOUNT > 0  
    COMMIT TRANSACTION;
GO
/****** Object:  StoredProcedure [msqta].[spSessionById]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [msqta].[spSessionById]
@sessionId	bigint
AS

/*
------------------------------------------------------------
Copyright (c) Microsoft Corporation.  All rights reserved.
Licensed under the Source EULA. See License.txt in the project root for license information.
------------------------------------------------------------

Retrieve already saved Tuning Session. 
@sessionId			- sessionId to retrieve

*/

SELECT 
TuningSessionID,
DB_NAME(DatabaseID) AS DatabaseName,
Name,
Description,
Status,
CreateDate,
LastModifyDate,
BaselineEndDate,
UpgradeDate,
TargetCompatLevel,
WorkloadDurationDays
FROM msqta.TuningSession 
WHERE TuningSessionID = @sessionId

SELECT 
query.TuningQueryID,
query.QueryID,
DB_NAME(query.DatabaseID) AS DatabaseName,
query.ParentObjectId,
query.QueryHash,
query.QueryText,
query.QueryType,
query.IsParametrized,
query.PlanGuide,
query.Status,
query.CreateDate,
query.LastModifyDate,
query.ProfileCompleteDate,
query.AnalysisCompleteDate,
query.ExperimentPendingDate,
query.ExperimentCompleteDate,
query.DeployedDate,
query.AbandonedDate,
query.Parameters 
FROM msqta.TuningQuery query
INNER JOIN msqta.TuningSession_TuningQuery session_query ON session_query.TuningQueryID = query.TuningQueryID
WHERE session_query.TuningSessionID = @sessionId

SELECT 
queryOptionGroup.GroupID,
queryOptionGroup.TuningQueryID,
query.QueryID,
DB_NAME(query.DatabaseID) AS DatabaseName,
queryOptionGroup.QueryOptions,
queryOptionGroup.IsVerified,
queryOptionGroup.IsDeployed,
queryOptionGroup.ValidationCompleteDate
FROM msqta.QueryOptionGroup queryOptionGroup
INNER JOIN msqta.TuningQuery query ON query.TuningQueryID = queryOptionGroup.TuningQueryID
INNER JOIN msqta.TuningSession_TuningQuery session_query ON session_query.TuningQueryID = queryOptionGroup.TuningQueryID
WHERE session_query.TuningSessionID = @sessionId

SELECT
stat.GroupID,
query.QueryID,
DB_NAME(query.DatabaseID) AS DatabaseName,
stat.StatType,
stat.IsProfiled,
stat.ExecutionCount,
stat.Showplan,
stat.Stats
FROM msqta.ExecutionStat stat
INNER JOIN msqta.QueryOptionGroup queryOptionGroup ON queryOptionGroup.GroupID = stat.GroupID
INNER JOIN msqta.TuningQuery query ON query.TuningQueryID = queryOptionGroup.TuningQueryID
INNER JOIN msqta.TuningSession_TuningQuery session_query ON session_query.TuningQueryID = queryOptionGroup.TuningQueryID
WHERE session_query.TuningSessionID = @sessionId
GO
/****** Object:  StoredProcedure [msqta].[spSessionSave]    Script Date: 9/3/2025 6:47:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [msqta].[spSessionSave]
@sessionObject				msqta.TuningSessionType		READONLY,
@queryObject				msqta.TuningQueryType		READONLY,
@queryOptionGroupObject		msqta.QueryOptionGroupType	READONLY,
@queryExecutionStatObject	msqta.ExecutionStatType		READONLY
AS

/*
------------------------------------------------------------
Copyright (c) Microsoft Corporation.  All rights reserved.
Licensed under the Source EULA. See License.txt in the project root for license information.
------------------------------------------------------------

Persist tuning Session into database. 
@sessionObject				- UDT for TuningSession
@queryObject				- UDT for TuningQuery
@queryOptionGroupObject		- UDT from QueryOptionObject
@queryExecutionStatObject	- UDT for ExecutionStat

*/

BEGIN TRANSACTION

BEGIN TRY

    -- Verify Database name is valid for query records
    IF (SELECT COUNT(*) FROM @sessionObject WHERE DB_ID(DatabaseName) IS NULL) > 0
    BEGIN
        THROW 51000, 'Cannot find database against which session is saved.', 1
    END

    -- we only handle single session update for now
    IF (SELECT COUNT(*) FROM @sessionObject) > 1
    BEGIN
        THROW 51000, 'Cannot process multiple sessions.', 1
    END

    DECLARE @sessionId AS int
    SET @sessionId = (SELECT TOP(1) TuningSessionID FROM @sessionObject)

    DECLARE @databaseId AS int
    SET @databaseId = (SELECT TOP(1) DB_ID(DatabaseName) FROM @sessionObject)
        
    IF @sessionId > 0
    BEGIN
        /*
        If session already exists, (this is update session request)
            - Update session properties
            - Update Queries
            - Drop existing session-query mappings 
            - Add new session-query mappings
        */
            
        -- Update session properties
        UPDATE session
        SET DatabaseID = DB_ID(sessionObject.DatabaseName),
        Name = sessionObject.Name,
        Description = sessionObject.Description,
        Status = sessionObject.Status,
        CreateDate = sessionObject.CreateDate,
        LastModifyDate = GETUTCDATE(),
        BaselineEndDate = sessionObject.BaselineEndDate,
        UpgradeDate = sessionObject.UpgradeDate,
        TargetCompatLevel = sessionObject.TargetCompatLevel,
        WorkloadDurationDays = sessionObject.WorkloadDurationDays
        FROM msqta.TuningSession session		
        INNER JOIN @sessionObject sessionObject ON sessionObject.TuningSessionID = session.TuningSessionID

        IF (SELECT COUNT(*) FROM @queryObject) > 0
        BEGIN
            -- Update queries with update flag
            exec msqta.spQuerySave @queryObject, @queryOptionGroupObject, @queryExecutionStatObject, 2
        END

        -- Delete all existing session-query mapping
        DELETE session_query
        FROM msqta.TuningSession_TuningQuery session_query
        WHERE session_query.TuningSessionID = @sessionId
        
        -- Add session-query mapping
        INSERT INTO msqta.TuningSession_TuningQuery (TuningSessionID, TuningQueryID)
        SELECT @sessionId, query.TuningQueryID 
        FROM @queryObject queryObject
        INNER JOIN msqta.TuningQuery query ON query.QueryID = queryObject.QueryID AND query.DatabaseID = DB_ID(queryObject.DatabaseName)

    END
    ELSE 
    BEGIN
        /*
        If session doesn't exist, (this is create new session request)
            - Create new session only if we don't have an active session
            - If query already exist with a mapping to an existing session, update the query mappings
            - Persist new query
            - Add new mapping for session and query
        */

        -- Validate we don't have active session
        IF (SELECT COUNT(*) FROM msqta.TuningSession WHERE DatabaseID = @databaseId AND Status = 0) > 0
        BEGIN
            THROW 51000, 'Database already have an active session.', 1
        END

        -- Create a new session
        INSERT INTO msqta.TuningSession (DatabaseID, Name, Description, Status, CreateDate, LastModifyDate, BaselineEndDate, UpgradeDate, TargetCompatLevel, WorkloadDurationDays)
        SELECT DB_ID(DatabaseName), Name, Description, Status, CreateDate, GETUTCDATE(), BaselineEndDate, UpgradeDate, TargetCompatLevel, WorkloadDurationDays FROM @sessionObject
            
        -- asign new session id
        SET @sessionId = SCOPE_IDENTITY()

        IF (SELECT COUNT(*) FROM @queryObject) > 0
        BEGIN
            -- Update Queries
            exec msqta.spQuerySave @queryObject, @queryOptionGroupObject, @queryExecutionStatObject, 2

            -- Add session-query mappings
            INSERT INTO msqta.TuningSession_TuningQuery (TuningSessionID, TuningQueryID)
            SELECT @sessionId, query.TuningQueryID 
            FROM @queryObject queryObject
            INNER JOIN msqta.TuningQuery query ON query.QueryID = queryObject.QueryID AND query.DatabaseID = DB_ID(queryObject.DatabaseName)
        END
    END

    EXEC msqta.spSessionById @sessionId

END TRY
BEGIN CATCH

    IF @@TRANCOUNT > 0  
        ROLLBACK TRANSACTION; 
    
    THROW 

END CATCH

IF @@TRANCOUNT > 0  
    COMMIT TRANSACTION;
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "MTD_SMSMessages"
            Begin Extent = 
               Top = 9
               Left = 57
               Bottom = 206
               Right = 407
            End
            DisplayFlags = 280
            TopColumn = 30
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vw_MTD_SMSMessages_PD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vw_MTD_SMSMessages_PD'
GO
SET ARITHABORT ON
SET CONCAT_NULL_YIELDS_NULL ON
SET QUOTED_IDENTIFIER ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
SET NUMERIC_ROUNDABORT OFF
GO
/****** Object:  Index [IX_Spatial_Stops]    Script Date: 9/3/2025 6:47:09 PM ******/
CREATE SPATIAL INDEX [IX_Spatial_Stops] ON [Association].[Stops]
(
	[StopGeography]
)USING  GEOGRAPHY_AUTO_GRID 
WITH (
CELLS_PER_OBJECT = 12, PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
GO
USE [master]
GO
ALTER DATABASE [MTD_01] SET  READ_WRITE 
GO
